created: 20230821135032029
modified: 20230821152208590
published: 20230821152208589
tags: tj-style blog $:/plugins/adithyab/tiddlyjam/live
title: 2023-08-22 error handling
type: text/vnd.tiddlywiki


{{tj-style}}

首先，对于 error handling，我的风格碰巧和 Ruby 作者 Matz 一致，虽然是巧合，但是增加了我的信心。

先说 error handling 需要解决哪些问题？

# 不能放任 error 使其导致程序崩溃
# 不能让 error handling 多到影响原本的功能

我常用的编程语言有 TypeScript 和 Elixir，Elixir 不用说了，我很喜欢它的 error handling 机制。

我主要分享一下我自己使用 TypeScript 时的 error handling 风格。

!!! 1. 80% 的情况下，我会直接使用 try-catch 处理 Promise rejected 状态，不用其他奇技淫巧

!!! 2. 我会尽量避免 Nested try blocks，形如：

```js
try {
  try {
    throw new Error("oops");
  } finally {
    console.log("finally");
  }
} catch (ex) {
  console.error("outer", ex.message);
}
```

为了避免嵌套 try blocks，我会参考 Elixir/golang/Swift 的方式返回一个数组包含 [isError, data/error]

形如：

```js
async function doSomething() {
  try {
    // await ...
    return [false, data]
  } catch(error) {
    return [true, error]
  }
}

const [isError, data] = await doSomething()
if(isError) {
  // data is error
  // fallback
}

// normal data
// next 
```

supabase-js 和 zod 也采用了类似的风格，只是细节不太一样，我会在引用出分享链接。

!!! 3. 我不会强迫症似的穷举所有的 Exception 类型

```js
// good
async function doSomething(): Promise<Data>

// bad
async function doSomething(): Promise<Data 
      | RpcException
      | ChargeFeeHasNotBeenPaidException
      | BadRequestException
      | UnusableFacilityException
      | NotBusinessDayException>
```



当然，npm package, public library 除外。

!!! 4. 我不会让 Exception 不能导致整个 App 崩溃

例如 MVC web server app 的 exception 最好控制在 controller 层，不要因为个别的 API 异常导致整个 App 崩溃或者重启。

类似 Remix.run 这样的框架甚至可以将 exception 控制在 component 级别，不过我不过分强求，只要别让整个 App 崩溃就行。

!!! 5. 我会适当记录 Exception log

refs

* supabse-js error handling
* zod.dev error handling