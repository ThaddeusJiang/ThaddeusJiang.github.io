created: 20201122092831265
modified: 20201122093605775
tags: 
title: 类和对象
type: text/vnd.tiddlywiki

<<<
Kotlin 类可以包含：

* 构造函数
* 初始化代码块
* 函数
* 属性 
* 内部类
* 对象声明。
<<<


```
val site = Runoob() // Kotlin 中没有 new 关键字
```

```
site.name           // 使用 . 号来引用
```


主构造器

```
class Person constructor(firstName: String) {
    init {
        println("FirstName is $firstName")
    }
}

```

次构造器

```
class Person(val name: String) {
    constructor (name: String, age:Int) : this(name) {
        // 初始化...
    }
}
```

抽象类

抽象是面向对象编程的特征之一，类本身，或类中的部分成员，都可以声明为abstract的。抽象成员在类中不存在具体的实现。 

```
open class Base {
    open fun f() {}
}

abstract class Derived : Base() {
    override abstract fun f()
}
```

嵌套类

```
class Outer {                  // 外部类
    private val bar: Int = 1
    class Nested {             // 嵌套类
        fun foo() = 2
    }
}

fun main(args: Array<String>) {
    val demo = Outer.Nested().foo() // 调用格式：外部类.嵌套类.嵌套类方法/属性
    println(demo)    // == 2
}
```

内部类

```
class Outer {
    private val bar: Int = 1
    var v = "成员属性"
    /**嵌套内部类**/
    inner class Inner {
        fun foo() = bar  // 访问外部类成员
        fun innerTest() {
            var o = this@Outer //获取外部类的成员变量
            println("内部类可以引用外部类的成员，例如：" + o.v)
        }
    }
}

fun main(args: Array<String>) {
    val demo = Outer().Inner().foo()
    println(demo) //   1
    val demo2 = Outer().Inner().innerTest()   
    println(demo2)   // 内部类可以引用外部类的成员，例如：成员属性
}
```

匿名内部类


[[类的修饰符]]

类的修饰符包括 classModifier 和_accessModifier:

```
abstract
final
enum
open
annotation
```

```
private
protected
public
internal
```


