<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   <title>TJ (Thaddeus Jiang)</title>
   <link>https://thaddeusjiang.com</link>
   <description>专注；分享；寻找。</description>
   <item>
      <title>2023-08-24 JS/TS number 格格不入</title>
      <link>https://thaddeusjiang.com/2023-08-24-js-ts-number-ge-ge-bu-ru</link>
			<description><![CDATA[
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4">
      <nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a href="./">
                <h1 class="title">TJ (Thaddeus Jiang)</h1>
                <p class="subtitle">专注；分享；寻找。</p>
            </a>
        </div>
     </nav>
    </div>
  </div>


<div class="container mt-4">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="subtitle">2023-08-24 JS/TS number 格格不入</h1>
            <hr>

            <blockquote class="tc-quote tc-big-quote"><p>imo: TypeScript number 类型作用范围模糊，JavaScript number 很容易产生 bug，ES bigint 限制太多，long.js 能不用就别用。
</p><cite>TJ</cite></blockquote><p>TypeScript 的 number 类型因为需要兼容 JavaScript，所以没有 int32 int64 等细分类型，数值范围也和其他静态语言不一样，使得 TypeScript number 与其他编程语言格格不入。</p><p>分享几个我遇到的问题以及解决方案：</p><h3 class="">1. JS/TS number 全身都是 bug</h3><p>JS/TS number 因为要同时兼容 int float double 导致它的精度很迷，与强类型工具（如 RDB, protobuf）的数值范围上有差异，非常容易产生 bug。</p><p>JS 最大安全整数（能够精确表示的整数）为 9,007,199,254,740,991（2<sup>53</sup> - 1），远小于 int64 (2<sup>63</sup> - 1)。所以如果你在 RDB 中使用 int64 类型，在 JS 中就会溢出。</p><p>Example: 2<sup>64</sup>-1 is 1844674407370955<strong>1615</strong> but in JavaScript it evaluates to 1844674407370955<strong>2000</strong>.</p><blockquote><div>使用 long.js 可以弥补这个设计缺陷。</div></blockquote><p>但是 long.js 也有问题，基本上和 bigint 的问题一样，我们一起说。</p><h3 class="">2. JS/TS bigint 限制超多</h3><p>bigint 虽然是整数，但是在使用上有很多限制，例如：</p><ol><li>BigInt 与 Number 转换会损失精度</li><li>BigInt 在 JSON.stringify() 会引发 TypeError</li><li>BigInt 不能使用 Math 中方法</li></ol><p>天呐🤷，这么多限制，还不容不用呢。反正我从来不用 bigint。</p><p>如果真的需要处理超大数值，我推荐使用 bignumber.js，我可不想自己写数值运算，bignumber.js 提供了很多开箱即用的方法：</p><h2 class="">3. int32 int64 对应 TS 类型没有统一标准</h2><p>Prisma scheme 支持 BigInt 类型，对应 TS BigInt 类型</p><p>Protocol Buffers 的 int32 int64 类型分别对应 TS number 和 Long</p><p>如果你同时使用 Prisma BigInt 和 protobuf int64 的话，你带代码中就会出现大量相互转换的 utils，类似下面这种：</p><blockquote><div>👇这些代码都是我从其他人的代码中 copy 过来的，不是我写的，我也永远不用写这种代码。</div></blockquote><pre class="hljs"><code class="ts hljs"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BigIntUtil</span> {
  <span class="hljs-keyword">static</span> <span class="hljs-title function_">toNumber</span>(<span class="hljs-attr">b</span>: bigint): <span class="hljs-built_in">number</span> {
    <span class="hljs-keyword">const</span> n = <span class="hljs-built_in">parseInt</span>(b.<span class="hljs-title function_">toString</span>());
    <span class="hljs-keyword">if</span> (!<span class="hljs-title class_">Number</span>.<span class="hljs-title function_">isSafeInteger</span>(n)) {
      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(
        <span class="hljs-string">&#x27;Fail to cast bigint to number. Value is out of safe integer range.&#x27;</span>,
      );
    }
    <span class="hljs-keyword">return</span> n;
  }

  <span class="hljs-keyword">static</span> <span class="hljs-title function_">from</span>(<span class="hljs-attr">v</span>: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span> | bigint): bigint {
    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> v === <span class="hljs-string">&#x27;bigint&#x27;</span>) {
      <span class="hljs-keyword">return</span> v;
    }
    <span class="hljs-keyword">return</span> <span class="hljs-title class_">BigInt</span>(v);
  }
}</code></pre><pre class="hljs"><code class="ts hljs"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Long</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;long&#x27;</span>;

<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LongUtil</span> {
  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-title function_">fromBigInt</span>(<span class="hljs-attr">num</span>: bigint): <span class="hljs-title class_">Long</span>;
  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-title function_">fromBigInt</span>(<span class="hljs-attr">num</span>: bigint | <span class="hljs-literal">undefined</span> | <span class="hljs-literal">null</span>): <span class="hljs-title class_">Long</span> | <span class="hljs-literal">undefined</span>;
  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-title function_">fromBigInt</span>(<span class="hljs-attr">num</span>: bigint | <span class="hljs-literal">undefined</span> | <span class="hljs-literal">null</span>): <span class="hljs-title class_">Long</span> | <span class="hljs-literal">undefined</span> {
    <span class="hljs-keyword">if</span> (num === <span class="hljs-literal">undefined</span> || num === <span class="hljs-literal">null</span>) {
      <span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span>;
    }
    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Long</span>.<span class="hljs-title function_">fromNumber</span>(<span class="hljs-title class_">Number</span>(num));
  }

  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-title function_">toBigInt</span>(<span class="hljs-attr">num</span>: <span class="hljs-title class_">Long</span>): bigint;
  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-title function_">toBigInt</span>(<span class="hljs-attr">num</span>: <span class="hljs-title class_">Long</span> | <span class="hljs-literal">undefined</span> | <span class="hljs-literal">null</span>): bigint | <span class="hljs-literal">undefined</span>;
  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-title function_">toBigInt</span>(<span class="hljs-attr">num</span>: <span class="hljs-title class_">Long</span> | <span class="hljs-literal">undefined</span> | <span class="hljs-literal">null</span>): bigint | <span class="hljs-literal">undefined</span> {
    <span class="hljs-keyword">if</span> (num === <span class="hljs-literal">undefined</span> || num === <span class="hljs-literal">null</span>) {
      <span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span>;
    }
    <span class="hljs-keyword">return</span> <span class="hljs-title class_">BigInt</span>(num.<span class="hljs-title function_">toNumber</span>());
  }
}</code></pre><pre class="hljs"><code class="ts hljs"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JsonUtil</span> {
  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-title function_">stringify</span>(<span class="hljs-attr">data</span>: <span class="hljs-title class_">Record</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">any</span>&gt;): <span class="hljs-built_in">string</span> {
    <span class="hljs-keyword">return</span> <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data, <span class="hljs-function">(<span class="hljs-params">k, v</span>) =&gt;</span> {
      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> v === <span class="hljs-string">&#x27;bigint&#x27;</span>) {
        <span class="hljs-keyword">return</span> v.<span class="hljs-title function_">toString</span>();
      }
      <span class="hljs-keyword">return</span> v;
    });
  }
}</code></pre><p>你有关于 JS/TS number 的故事吗？欢迎与我分享。</p><p>refs:</p><ul><li><a class="tc-tiddlylink-external" href="https://www.npmjs.com/package/long" rel="noopener noreferrer" target="_blank">long.js</a></li><li><a class="tc-tiddlylink-external" href="https://www.npmjs.com/package/bignumber.js" rel="noopener noreferrer" target="_blank">bignumber.js</a></li><li><a class="tc-tiddlylink-external" href="https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields#working-with-bigint" rel="noopener noreferrer" target="_blank">Prisma BigInt</a></li><li><a class="tc-tiddlylink-external" href="https://protobuf.dev/programming-guides/proto3/" rel="noopener noreferrer" target="_blank">protobuf int64</a></li></ul>
          </div>          
      </div>
  </div>
</div>     


]]></description>
      <pubDate>Thu, 24 August 2023 13:44:6 -00:00</pubDate>
			<guid>https://thaddeusjiang.com/2023-08-24-js-ts-number-ge-ge-bu-ru</guid>      
   </item>

   <item>
      <title>2023-08-22 error handling</title>
      <link>https://thaddeusjiang.com/2023-08-22-error-handling</link>
			<description><![CDATA[
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4">
      <nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a href="./">
                <h1 class="title">TJ (Thaddeus Jiang)</h1>
                <p class="subtitle">专注；分享；寻找。</p>
            </a>
        </div>
     </nav>
    </div>
  </div>


<div class="container mt-4">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="subtitle">2023-08-22 error handling</h1>
            <hr>

            <p>对于 error handling，我的风格碰巧和 Ruby 作者 Matz 一致，虽然是巧合，但是增加了我的信心。</p><p>先说 error handling 需要解决哪些问题？</p><ol><li>不能放任 error 使其导致程序崩溃</li><li>不能让 error handling 多到影响原本的功能</li></ol><p>我常用的编程语言有 TypeScript 和 Elixir，Elixir 不用说了，我很喜欢它的 error handling 机制。</p><p>我主要分享一下我自己使用 TypeScript 时的 error handling 风格。</p><h3 class="">1. 80% 的情况下，我会直接使用 try-catch 处理 Exception，不用其他奇技淫巧</h3><h3 class="">2. 我会尽量避免 Nested try blocks，形如：</h3><pre class="hljs"><code class="js hljs"><span class="hljs-keyword">try</span> {
  <span class="hljs-keyword">try</span> {
    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;oops&quot;</span>);
  } <span class="hljs-keyword">finally</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;finally&quot;</span>);
  }
} <span class="hljs-keyword">catch</span> (ex) {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;outer&quot;</span>, ex.<span class="hljs-property">message</span>);
}</code></pre><p>为了避免嵌套 try blocks，我会参考 Elixir/golang/Swift 的方式返回一个数组包含 [isError, data/error]</p><p>形如：</p><pre class="hljs"><code class="js hljs"><span class="hljs-comment">// </span>
<span class="hljs-keyword">function</span> <span class="hljs-title function_">doSomething</span>(<span class="hljs-params"></span>) {
  <span class="hljs-keyword">try</span> {
    <span class="hljs-keyword">return</span> [<span class="hljs-literal">false</span>, data]
  } <span class="hljs-keyword">catch</span>(error) {
    <span class="hljs-keyword">return</span> [<span class="hljs-literal">true</span>, error]
  }
}

<span class="hljs-keyword">const</span> [isError, data] = <span class="hljs-title function_">doSomething</span>()
<span class="hljs-keyword">if</span>(isError) {
  <span class="hljs-comment">// data is error</span>
  <span class="hljs-comment">// your fallback</span>
}
<span class="hljs-comment">// data is expected data</span>
<span class="hljs-comment">// next ...</span></code></pre><p>supabase-js 和 zod 也采用了类似的风格，只是细节不太一样，这也增强了我的信心。</p><pre class="hljs"><code class="js hljs"><span class="hljs-comment">// supabase-js </span>
<span class="hljs-keyword">const</span> { data, error } = <span class="hljs-keyword">await</span> supabase
  .<span class="hljs-title function_">from</span>(<span class="hljs-string">&#x27;countries&#x27;</span>)
  .<span class="hljs-title function_">select</span>()</code></pre><pre class="hljs"><code class="js hljs"><span class="hljs-comment">// zod .safeParse</span>
stringSchema.<span class="hljs-title function_">safeParse</span>(<span class="hljs-number">12</span>);
<span class="hljs-comment">// =&gt; { success: false; error: ZodError }</span>

stringSchema.<span class="hljs-title function_">safeParse</span>(<span class="hljs-string">&quot;billie&quot;</span>);
<span class="hljs-comment">// =&gt; { success: true; data: &#x27;billie&#x27; }</span></code></pre><p>为什么我用 Array 而不是 Object 作为返回值？因为我觉得 ES6 以后数组取值也很简单。</p><h3 class="">3. 我不会强迫症似的穷举所有的 Exception 类型</h3><pre class="hljs"><code class="js hljs"><span class="hljs-comment">// good</span>
<span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">doSomething</span>(<span class="hljs-params"></span>): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-title class_">Data</span>&gt;

<span class="hljs-comment">// bad</span>
<span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">doSomething</span>(<span class="hljs-params"></span>): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-title class_">Data</span> 
      | <span class="hljs-title class_">RpcException</span>
      | <span class="hljs-title class_">ChargeFeeHasNotBeenPaidException</span>
      | <span class="hljs-title class_">BadRequestException</span>
      | <span class="hljs-title class_">UnusableFacilityException</span>
      | <span class="hljs-title class_">NotBusinessDayException</span>&gt;</code></pre><p>当然，npm package, public library 除外。</p><h3 class="">4. 我不会让 Exception 不能导致整个 App 崩溃</h3><p>MVC 风格的 web server app 的 exception 最好控制在 controller 层，不要因为个别的 API 异常导致整个 App 崩溃或者重启。</p><p>类似 Remix.run 这样的框架甚至可以将 exception 控制在 UI component 级别，不过我不过分强求，只要别让整个 App 崩溃就行。</p><h3 class="">5. 我会适当记录 Exception log</h3><p>refs</p><ul><li><a class="tc-tiddlylink-external" href="https://supabase.com/docs/reference/javascript/select" rel="noopener noreferrer" target="_blank">supabse-js error handling</a></li><li><a class="tc-tiddlylink-external" href="https://zod.dev/?id=safeparse" rel="noopener noreferrer" target="_blank">zod.dev error handling</a></li></ul><p>备注：</p><blockquote><div>这是我的个人风格，不奢求成为主流，只希望将来有机会合作的朋友能事先了解我的个人风格。</div></blockquote>
          </div>          
      </div>
  </div>
</div>     


]]></description>
      <pubDate>Tue, 22 August 2023 1:13:55 -00:00</pubDate>
			<guid>https://thaddeusjiang.com/2023-08-22-error-handling</guid>      
   </item>

   <item>
      <title>2023-08-15 未来程序员也可以是人间国宝</title>
      <link>https://thaddeusjiang.com/2023-08-15-wei-lai-cheng-xu-yuan-ye-ke-yi-shi-ren-jian-guo-bao</link>
			<description><![CDATA[
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4">
      <nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a href="./">
                <h1 class="title">TJ (Thaddeus Jiang)</h1>
                <p class="subtitle">专注；分享；寻找。</p>
            </a>
        </div>
     </nav>
    </div>
  </div>


<div class="container mt-4">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="subtitle">2023-08-15 未来程序员也可以是人间国宝</h1>
            <hr>

            <p>人间国宝是日本对一些传统手艺人的称呼，通常是指一些传递技艺的传承者。在日本，人间国宝的作品很受欢迎，大家都很喜欢，政府也有一定的辅助金扶持，所以他们的生活水平还不错。很羡慕他们，他们基本上是在做自己喜欢的工作，十年、几十年如一日的从事自己喜欢的工作，并且没有职场的各种压力。不需要考虑办公室政治，不需要年复一年的定目标、做计划、没有 KPI，没有 OKR。</p><p>我想未来程序员可以成为人间国宝，受到一部分人的推崇，国家和政府出钱保护这门手艺。程序员不需要和机器竞争，不用在生产效率和标准化上疯狂内圈，程序员只需要保持自己的特色，依据客户的订单编写程序即可。</p><p>个人思考，如何才能在 2050 年成为人间国宝？</p><ol><li>有别于工业生产的风格，成果是艺术品，可以赏玩。</li><li>即使不用工业生产也能保证质量稳定，有一定的实际价值。</li><li>稀有</li></ol>
          </div>          
      </div>
  </div>
</div>     


]]></description>
      <pubDate>Tue, 15 August 2023 6:56:45 -00:00</pubDate>
			<guid>https://thaddeusjiang.com/2023-08-15-wei-lai-cheng-xu-yuan-ye-ke-yi-shi-ren-jian-guo-bao</guid>      
   </item>

</channel>
</rss>
