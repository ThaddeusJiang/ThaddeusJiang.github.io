<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   <title>Thaddeus Jiang</title>
   <link>https://thaddeusjiang.com</link>
   <description>I know I don't know.</description>
   <item>
      <title>2023-10-13 关于 Code 我的一些改变</title>
      <link>https://thaddeusjiang.com/2023-10-13-guan-yu-code-wo-de-yi-xie-gai-bian</link>
			<description><![CDATA[
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4">
      <nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a href="./">
                <h1 class="title">Thaddeus Jiang</h1>
                <p class="subtitle">I know I don't know.</p>
            </a>
        </div>
     </nav>
    </div>
  </div>


<div class="container mt-4">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="subtitle">2023-10-13 关于 Code 我的一些改变</h1>
            <hr>

            <p>本来想写《使用 React.js 后我有哪些改变？》，写完后发现我的改变不仅仅是 React.js 相关，还有一些代码周边的内容。</p><h2 class="">1. File Structure: 放弃按代码类型组织，选择按使用频度组织</h2><p>使用 React.js 之前，我是按照代码类型进行组织文件结构的。HTML 放在 views 文件夹，JS 放在 scripts 文件夹，CSS 放在 styles 文件夹。文件结构如下：</p><pre><code>├── scripts
│   ├── index.js
│   ├── login.js
│   └── settings.js
├── styles
│   ├── index.css
│   ├── login.css
│   └── settings.css
└── views
    ├── index.html
    ├── login.html
    └── settings.html</code></pre><p>使用 React.js 之后，我开始按代码被调用、被修改的频度组织文件结构。登录页需要的 HTML JS CSS 都放在 login 文件夹，管理页需要的 HTML JS CSS 都放在 settings 文件夹。文件结构如下：</p><pre><code>├── index
│   ├── index.css
│   ├── index.js
│   └── index.jsx
├── login
│   ├── login.css
│   ├── login.js
│   └── login.jsx
└── settings
    ├── settings.css
    ├── settings.js
    └── settings.jsx</code></pre><p>这样做的好处是：</p><ol><li>每次新增 features 或者修改 bugs 的 diff changesets 更集中；</li><li>在编辑器中进行文件夹跳跃更少，手指和大脑负担更小；</li><li>已有功能的修改、重构、拆分、删除更简单。</li></ol><blockquote class="tc-quote tc-big-quote"><p>传统的 MVC 三层架构项目也可以按代码使用频度整理文件架构。
</p><cite>TJ</cite></blockquote><p>old style</p><pre><code>├── controllers
│   ├── index.controller.js
│   ├── login.controller.js
│   └── settings.controller.js
├── services
│   ├── index.service.js
│   ├── login.service.js
│   └── settings.service.js
└── views
    ├── index.htm
    ├── login.htm
    └── settings.htm</code></pre><p>new style</p><pre><code>├── index
│   ├── index.controller.js
│   ├── index.htm
│   └── index.service.js
├── login
│   ├── login.controller.js
│   ├── login.htm
│   └── login.service.js
└── settings
    ├── settings.controller.js
    ├── settings.htm
    └── settings.service.js</code></pre><h2 class="">2. 代码重复利用单位从 class 变小的 function</h2><p>使用 React.js 之前，我使用 class 组织数据和功能，properties 和 methods 放在 class 中，并通过 class 使用。代码如下：</p><pre class="hljs"><code class="js hljs"><span class="hljs-comment">// account.js</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span> {
  name = <span class="hljs-string">&quot;&quot;</span>;
  age = <span class="hljs-number">0</span>;

  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">{ name, age }</span>) {
    <span class="hljs-title class_">Account</span>.<span class="hljs-title function_">validateAccount</span>({ name, age });
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;
  }

  <span class="hljs-title function_">getAccount</span>(<span class="hljs-params"></span>) {
    <span class="hljs-keyword">return</span> {
      <span class="hljs-attr">name</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>,
      <span class="hljs-attr">age</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>,
    };
  }

  <span class="hljs-title function_">setAccount</span>(<span class="hljs-params">{ name, age }</span>) {
    <span class="hljs-title class_">Account</span>.<span class="hljs-title function_">validateAccount</span>({ name, age });
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;
  }

  <span class="hljs-keyword">static</span> <span class="hljs-title function_">validateAccount</span>(<span class="hljs-params">{ name, age }</span>) {
    <span class="hljs-keyword">if</span> (name.<span class="hljs-property">length</span> &lt;= <span class="hljs-number">0</span>) {
      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Name is required&quot;</span>);
    }

    <span class="hljs-keyword">if</span> (age &lt; <span class="hljs-number">0</span>) {
      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Age must be greater than 0&quot;</span>);
    }
  }

  <span class="hljs-title function_">introduce</span>(<span class="hljs-params"></span>) {
    <span class="hljs-keyword">return</span> <span class="hljs-string">`Hello, my name is <span class="hljs-subst">${<span class="hljs-variable language_">this</span>.name}</span> and I am <span class="hljs-subst">${<span class="hljs-variable language_">this</span>.age}</span> years old`</span>;
  }
}

<span class="hljs-comment">// hello.js</span>
<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Account</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;account.js&quot;</span>

<span class="hljs-keyword">const</span> tj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Account</span>({ <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;TJ&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">31</span> });
tj.<span class="hljs-title function_">introduce</span>()</code></pre><p>使用 React.js 之后，我使用 module 组织数据和功能，数据就是最基本的变量，功能就是最基本的函数，它们可以被单独使用。代码如下：</p><pre class="hljs"><code class="js hljs"><span class="hljs-comment">// account.js</span>
<span class="hljs-keyword">import</span> z <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;zod&quot;</span>;
<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">AccountSchema</span> = z.<span class="hljs-title function_">object</span>({
    <span class="hljs-attr">name</span>: z.<span class="hljs-title function_">string</span>().<span class="hljs-title function_">min</span>(<span class="hljs-number">1</span>),
    <span class="hljs-attr">age</span>: z.<span class="hljs-title function_">number</span>().<span class="hljs-title function_">min</span>(<span class="hljs-number">0</span>),
});

<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">introduce</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">{ name, age }</span>) =&gt; {
    <span class="hljs-keyword">return</span> <span class="hljs-string">`Hello, my name is <span class="hljs-subst">${name}</span> and I am <span class="hljs-subst">${age}</span> years old`</span>;
};

<span class="hljs-comment">// hello.js</span>
<span class="hljs-keyword">import</span> { <span class="hljs-title class_">AccountSchema</span>, introduce } <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;account.js&quot;</span>

<span class="hljs-keyword">const</span> tj = <span class="hljs-title class_">AccountSchema</span>.<span class="hljs-title function_">parse</span>({ <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;TJ&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">31</span> });
<span class="hljs-title function_">introduce</span>(tj)</code></pre><p>这样做的好处是：</p><ol><li>plaintext object 比 class instance object 更容易理解，没有魔法</li><li>function 比 class method 更容易管理、拆分、测试，可以避免写出巨型代码块。</li><li>代码行数少，阅读代码更轻松。</li></ol><blockquote class="tc-quote tc-big-quote"><p>CSS 代码重复利用单位也从 BEM class 变小到 utility class
</p><cite>TJ</cite></blockquote><h2 class="">3. Coding: 放弃模版文件和注解等非标准特性，使用编程语言的标准特性</h2><p>使用 React.js 之前，我会使用一些模版技术。代码如下：</p><pre class="hljs"><code class="html hljs">// settings.vue
<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">
<span class="hljs-keyword">const</span> items = [{ <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Foo&#x27;</span> }, { <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Bar&#x27;</span> }]
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>Settings<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in items&quot;</span>&gt;</span>
      {{ item.message }}
    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css">
<span class="hljs-selector-class">.title</span> {
  <span class="hljs-attribute">color</span>: red;
  <span class="hljs-attribute">font-weight</span>: bold;
}
</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><p>使用 React.js 之后：</p><pre class="hljs"><code class="js hljs"><span class="hljs-comment">// settings.jsx</span>
<span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./settings.css&quot;</span>;

<span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Settings</span>(<span class="hljs-params"></span>) {
  <span class="hljs-keyword">const</span> items = [{ <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;Foo&quot;</span> }, { <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;Bar&quot;</span> }];
  <span class="hljs-keyword">return</span> (
    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>Settings<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>
        {items.map((item) =&gt; (
          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>{item.message}<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>
        ))}
      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
  );
}</code></pre><p>import "./settings.css"; 是 normal JS code, .map() 也是 normal JS code。</p><h4 class="">使用 React.js 之前，我会使用一些基于注解的框架。代码如下：</h4><pre class="hljs"><code class="ts hljs"><span class="hljs-comment">// OcpiListFilter.ts</span>

<span class="hljs-keyword">import</span> { <span class="hljs-title class_">IsDateString</span>, <span class="hljs-title class_">IsInt</span>, <span class="hljs-title class_">IsOptional</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;class-validator&#x27;</span>;
<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Type</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;class-transformer&#x27;</span>;

<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OcpiListFilter</span> {
  <span class="hljs-meta">@IsOptional</span>()
  <span class="hljs-meta">@IsDateString</span>()
  <span class="hljs-attr">dateFrom</span>: <span class="hljs-built_in">string</span>;

  <span class="hljs-meta">@IsOptional</span>()
  <span class="hljs-meta">@IsDateString</span>()
  <span class="hljs-attr">dateTo</span>: <span class="hljs-built_in">string</span>;

  <span class="hljs-meta">@IsOptional</span>()
  <span class="hljs-meta">@IsInt</span>()
  <span class="hljs-meta">@Type</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title class_">Number</span>)
  <span class="hljs-attr">offset</span>: <span class="hljs-built_in">number</span>;

  <span class="hljs-meta">@IsOptional</span>()
  <span class="hljs-meta">@IsInt</span>()
  <span class="hljs-meta">@Type</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title class_">Number</span>)
  <span class="hljs-attr">limit</span>: <span class="hljs-built_in">number</span>;
}
</code></pre><p>使用 React.js 之后：</p><pre class="hljs"><code class="js hljs"><span class="hljs-keyword">import</span> z <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;zod&#x27;</span>;

<span class="hljs-keyword">const</span> <span class="hljs-title class_">OcpiListFilterSchema</span> = z.<span class="hljs-title function_">object</span>({
    <span class="hljs-attr">dateFrom</span>: z.<span class="hljs-title function_">string</span>().<span class="hljs-title function_">date</span>().<span class="hljs-title function_">optional</span>(),
    <span class="hljs-attr">dateTo</span>: z.<span class="hljs-title function_">string</span>().<span class="hljs-title function_">date</span>().<span class="hljs-title function_">optional</span>(),
    <span class="hljs-attr">offset</span>: z.<span class="hljs-title function_">number</span>().<span class="hljs-title function_">int</span>().<span class="hljs-title function_">optional</span>(),
    <span class="hljs-attr">limit</span>: z.<span class="hljs-title function_">number</span>().<span class="hljs-title function_">int</span>().<span class="hljs-title function_">optional</span>(),
});</code></pre><p>没有注解，没有黑魔法，只是最普通函数（function）。</p><h2 class="">总结</h2><p>其实是很简单的几件小事，几句话就说清楚了。但是要展示 before and after 的代码，占用了很大篇幅，😂</p>
          </div>          
      </div>
  </div>
</div>     

<div class="copyright">
<strong>
<a href="https://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">
版权声明：自由转载-非商用-非衍生-保持署名（创意共享3.0许可证）
</a>
</strong>
</div>

<style>
.copyright {
  padding: 0.5rem 1rem;
  text-align: center;
}

.copyright:hover {
  opacity: 0.9;
}
</style>


]]></description>
      <pubDate>Fri, 13 October 2023 5:1:2 -00:00</pubDate>
			<guid>https://thaddeusjiang.com/2023-10-13-guan-yu-code-wo-de-yi-xie-gai-bian</guid>      
   </item>

   <item>
      <title>2023-10-12 Nest.js Validation Tips</title>
      <link>https://thaddeusjiang.com/2023-10-12-nest-js-validation-tips</link>
			<description><![CDATA[
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4">
      <nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a href="./">
                <h1 class="title">Thaddeus Jiang</h1>
                <p class="subtitle">I know I don't know.</p>
            </a>
        </div>
     </nav>
    </div>
  </div>


<div class="container mt-4">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="subtitle">2023-10-12 Nest.js Validation Tips</h1>
            <hr>

            <p>imo: 如果你可以选择，推荐使用 zod.dev 作为 JS/TS validation library。</p><p>Nest.js Validation Tips:</p><ol><li>Use <code>@IsInt()</code>, don't use <code>ParseIntPipe</code></li><li>Use <code>@IsDateString()</code>, don't use <code>@IsDate()</code></li><li>Use <code>@IsOptional()</code>, since TypeScript ? doesn't work</li><li>Use <code>@Type(() =&gt; Number)</code> instead of <code>Number(str)</code> , use <code>@Int</code> instead of <code>parseInt(str)</code></li></ol><p>推荐直接使用 class-transformer-validator，</p><pre class="hljs"><code class="sh hljs">npm install class-transformer-validator --save</code></pre><p>因为单独使用 class-validator 和 class-transformer 让人沮丧。</p><h2 class="">imo: Nest.js 这种基于注解的框架和 TypeScript 一起使用让人十分困惑。</h2><p>@IsOptional() 和 ? 让人困惑。</p><blockquote><div>可选属性用 library 还是 TypeScript 呢？</div></blockquote><pre class="hljs"><code class="ts hljs">  <span class="hljs-meta">@IsInt</span>()
  <span class="hljs-meta">@IsOptional</span>()
  <span class="hljs-attr">offset</span>: <span class="hljs-built_in">number</span>;

  <span class="hljs-meta">@IsInt</span>()
  limit?: <span class="hljs-built_in">number</span>;</code></pre><p>@Type(() =&gt; Date) 和 :string 也让人困惑。</p><blockquote><div>类型转换用注解还是代码呢？</div></blockquote><pre class="hljs"><code class="ts hljs">  <span class="hljs-meta">@IsDate</span>()
  <span class="hljs-meta">@Type</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title class_">Date</span>) 
  <span class="hljs-attr">dateFrom</span>: <span class="hljs-built_in">string</span>;

  <span class="hljs-meta">@IsDateString</span>()
  <span class="hljs-attr">dateTo</span>: <span class="hljs-title class_">Date</span>;</code></pre><p>refs</p><ul><li><a class="tc-tiddlylink-external" href="https://docs.nestjs.com/techniques/validation#explicit-conversion" rel="noopener noreferrer" target="_blank">NestJS Validation</a></li><li><a class="tc-tiddlylink-external" href="https://github.com/MichalLytek/class-transformer-validator" rel="noopener noreferrer" target="_blank">class-transformer-validator</a></li><li><a class="tc-tiddlylink-external" href="https://github.com/typestack/class-validator" rel="noopener noreferrer" target="_blank">class-validator</a></li><li><a class="tc-tiddlylink-external" href="https://github.com/typestack/class-transformer" rel="noopener noreferrer" target="_blank">class-transformer</a></li></ul>
          </div>          
      </div>
  </div>
</div>     

<div class="copyright">
<strong>
<a href="https://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">
版权声明：自由转载-非商用-非衍生-保持署名（创意共享3.0许可证）
</a>
</strong>
</div>

<style>
.copyright {
  padding: 0.5rem 1rem;
  text-align: center;
}

.copyright:hover {
  opacity: 0.9;
}
</style>


]]></description>
      <pubDate>Thu, 12 October 2023 7:6:37 -00:00</pubDate>
			<guid>https://thaddeusjiang.com/2023-10-12-nest-js-validation-tips</guid>      
   </item>

   <item>
      <title>2023-10-04</title>
      <link>https://thaddeusjiang.com/2023-10-04</link>
			<description><![CDATA[
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4">
      <nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a href="./">
                <h1 class="title">Thaddeus Jiang</h1>
                <p class="subtitle">I know I don't know.</p>
            </a>
        </div>
     </nav>
    </div>
  </div>


<div class="container mt-4">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="subtitle">2023-10-04</h1>
            <hr>

            <p>昨天晚上在东京看了李宗盛的演唱会，今天和许久未见的朋友约了午餐，现在在一家隐市的咖啡店坐着等老婆下班。我有点喜欢这种生活状态，自由职业者真好，好自由啊，有点爽。其实只要积极利用好自己的高效时间，一周的工作成果并不会比做全职员工少，并且不用每天按照规定时间上班，不用时不时的就看一下 slack 上有没有消息，也不用去钢筋混凝土的建筑物里坐着。</p><p>昨晚李宗盛的演唱会很棒，老李的歌很好听，我可以听到我自己六七十岁。看到有几个网友写了长文抒发感想，我在想我是否也写一下呢？演唱会很棒，如果要细品的确有很多可以感动，可以共鸣，可以激励和警醒的内容，但是我有必要写下来，并发给别人看吗？我不确定。</p><p>至少，此时此刻我觉得没有必要。</p><p>其实我只是想找一个地方坐着等老婆下班，这家咖啡店就在老婆公司旁边，我停好车，准备去星巴克的路上碰巧看到了它。它在一条普普通通的小路旁，有一个通向路面下的楼梯，楼梯口挂着一个《可否道》的招牌，顺着楼梯往下看，门是开着的，门口挂着“商い中”的牌子。</p><p>于是我决定不去星巴克了。</p><p>我很喜欢这家店，我想试着用文字把这家店描述给大家。一进门就看见店里是一个长长的吧台，从门口一直通向深处，店里是细细长长的布局，没有独立的桌子。整个店细细长长的空间就像一个身材苗条的美女，很漂亮，让人有一种愉悦的感觉，让人忍不住多瞄几眼。</p><p>但是我不能多看。</p><p>因为店里还有其他客人，其实我进来的时候店里已经有一对中年男女坐在店里了。男人穿着衬衫，坐的挺直，女人在男人的另一侧，我只是扫到一眼，似乎她是故意躲避其他客人的注意力。这对男女像极了日本小说和电视剧中常见的那种在午后偷情的男女。这家店也太适合偷情了。哈哈哈</p><p>不对，是适合约会。</p><p>我坐着进门第五个座位，大约是整个店进门三分之一的位置。我的座位前是一些小摆件，一个用来称咖啡豆天平秤；一个磨咖啡粉的机器；一个写着【特選おすすめ珈琲】的牌子。还有一个三层的玻璃盒子，里面全是猫咪的摆件，可见店主也是一个喜欢猫的人。</p><p>店主是一个七八十岁的奶奶。</p><p>奶奶的身高和我妈妈差不多，应该不超过 145cm，我还看到一位爷爷一直在很里面的一个帘子后面，我也只是看到一眼，没看清。</p><p>我点了一杯【特選おすすめ珈琲】，店主让我选一个自己喜欢的杯子。对了，我面前，吧台的墙上是满满的各式各样的咖啡杯，客人可以任意挑选自己喜欢的咖啡杯。我选了一个欧式印花的枣红色的杯子，没什么特别的理由，就是当下的感觉而已。</p><p>我一边喝咖啡，一边慢慢地品味这家店的风格和陈列。</p><p>我大约坐了 2 小时，店里的客人已经换了 3 波了。哈哈哈，果然东京也是一个快节奏的城市，大家连喝咖啡都来也匆匆去也匆匆。最初的中年男女走了，没一会儿店里进来了一个比我年龄稍大一些的女性，一个人，坐在进门第二个位置，和我之间隔了两把椅子。女人是那种十分干练的感觉，声音响亮，她与店主的交谈整个店里都可以听得清清楚楚。女人问了一下店里是否可以吸烟，得到肯定的回复以后，她点了一根烟。我本能地用左手挡住了鼻子，继续写东西。我只能隐隐约约地问道一点点烟味，我发现她是背对着我一边吸烟一边大口的喝着咖啡。女人坐了不到十分钟就走了。</p><p>没一会儿又进来了一对男女。</p><p>这对男女应该也是年龄比我稍大一些。我今年 31岁，好像稍微成熟一点的都是比我大一点，哈哈哈。女人穿着一身和服，很高级，很优雅的那种，男人还是很常见的上班族打扮。不知为何，我脑子里全是日剧《昼颜》的画面，哈哈哈。最后在我走之前，店里进来一位瘦瘦的小哥哥，他一进来没有打招呼就径直走向最里面的座位，把雨伞杵在墙边，坐下就点上了一根烟。一看就是这家店的常客。</p><p>客人们像是商量好的一样，一组一组的进店，除了我以外，每次只有一组客人在店里。</p><p>这就写完了，我发现我不太会写结尾。</p><p>这就是我不工作的一天，见见朋友，一个人找一家咖啡店坐坐，然后接老婆回家。
</p>
          </div>          
      </div>
  </div>
</div>     

<div class="copyright">
<strong>
<a href="https://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">
版权声明：自由转载-非商用-非衍生-保持署名（创意共享3.0许可证）
</a>
</strong>
</div>

<style>
.copyright {
  padding: 0.5rem 1rem;
  text-align: center;
}

.copyright:hover {
  opacity: 0.9;
}
</style>


]]></description>
      <pubDate>Wed, 4 October 2023 11:56:33 -00:00</pubDate>
			<guid>https://thaddeusjiang.com/2023-10-04</guid>      
   </item>

</channel>
</rss>
