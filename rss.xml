<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   <title>Thaddeus Jiang</title>
   <link>https://thaddeusjiang.com</link>
   <description>I know I don't know, stay curious.</description>
   <item>
      <title>2024-01-31 Why I love Erlang</title>
      <link>https://thaddeusjiang.com/2024-01-31-why-i-love-erlang</link>
			<description><![CDATA[
<div class="container">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><nav aria-label="main navigation" class="navbar" role="navigation"><p><div class="navbar-brand">
          <a href="./">
              <h1 class="title">Thaddeus Jiang</h1>
              <p class="subtitle">I know I don't know, stay curious.</p>
          </a>
      </div></p><p><div class="navbar-end mt-2 subtitle is-5"><a class="tc-tiddlylink tc-tiddlylink-shadow tc-tiddlylink-resolves" href="./#blog">Blogs</a> | <a class="tc-tiddlylink-external" href="https://thaddeusjiang.com/wiki" rel="noopener noreferrer" target="_blank">Wiki</a> | <a class="tc-tiddlylink-external" href="https://thaddeusjiang.com/rss.xml" rel="noopener noreferrer" target="_blank">RSS</a> </div></p></nav></div>
</div>


<div class="container mt-4">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="subtitle">2024-01-31 Why I love Erlang</h1>
            <hr>

            <p>我想起了《黑客与画家》中的一段话：“编程语言不一样，与其说它是技术，还不如说是程序员的思考模式。编程语言是技术和宗教的混合物。”</p><h2 class="">Why I love Erlang</h2><p>这本身就不是一个问题，喜欢某个编程语言就像喜欢某个具体的人一样，那是一种感觉，根本不需要具体的理由。</p><p>多年来，我一直很向往 DHH 因为他很早找到了他喜欢的编程语言 Ruby。我尝试过很多编程语言，如：Java、JS、Perl、Swift、ResonML 等等，很遗憾它们都没有让我有 soulmate 的感觉。几年前偶然的机会，我了解到 Elixir，以及断断续续地使用过程中又了解到 Erlang，编写 Erlang/Elixir 代码让我有了久违的愉悦感。</p><p>我愈发地明晰了 Erlang/Elixir 是我真正的 soulmate language，我太喜欢它们了。希望我可以像 DHH 对 Ruby 一样，为 Erlang/Elixir 做一些贡献。</p><h2 class="">虽然事实如上，但是我也可以列出一些具体的点说明为什么我喜欢 Erlang。</h2><blockquote><div>我不太确定应该按照 Erlang 的强项开始写，还是按照阅读这篇文章的朋友可以学习曲线开始写。</div><div>暂时先按照容易理解的顺序开始写吧。</div></blockquote><p>TR;DR</p><ol><li>Erlang 让程序回归数学</li><li>Erlang 整数不会溢出</li><li>Erlang 提供完美的字面量对象</li><li>Erlang 远程调用和本地调用一样简单</li><li>Erlang 远程处理错误允许优雅地对应不可抗力因素</li><li>Erlang 在语言层面提供了功能强大的 Schemaless Database</li></ol><h2 class="">1. Erlang 让程序回归数学</h2><p>列举计算机编程问题中常被提到的两个算法斐波拉切数和快速排序。</p><p>斐波那契数：</p><pre><code>fib(0) -&gt; 0;
fib(1) -&gt; 1;
fib(X) -&gt; fib(X-1) + fib(X-2).</code></pre><p>快速排序</p><pre><code>sort([]) -&gt; [];
sort([Pivot|Rest]) -&gt;
    {Smaller, Larger} = lists:partition(fun(X) -&gt; X &lt; Pivot end, Rest),
    sort(Smaller) ++ [Pivot] ++ sort(Larger).</code></pre><p>我想应该没有其他编程语言可以做到像 Erlang 这样既优雅又简洁了吧。最重要的是 Erlang 编写的代码和数学上的定义几乎是一致的，太棒了。</p><p>再分享一个简单的求面积的函数</p><pre><code>area({rectangle, Width, Ht}) -&gt; Width * Ht;
area({circle, R})            -&gt; 3.14 * R * R.

area({circle, 14}). % 615.44</code></pre><p>Erlang 提供的函数参数模式匹配让代码可以减少很多条件判断，例如： if (rectangle) then ... else if (circle) then ... 等等。</p><h2 class="">2. Erlang 整数不会溢出</h2><pre><code>1234567890 * 9876543210.
% 12193263111263526900</code></pre><p>相信所有开发者都知道编程领域绕不开的就是浮点数精度问题，如：0.1 +  0.2 不等于 0.3。</p><p>虽然 Erlang 也没有办法避免这个问题，并且和其他编程技巧一样也是先使用整数进行数学运算再除以位数；但是整数不溢出可以将运算范围和精度提升到其他编程语言无法比拟的水平。重要的是，这是语言默认提供的能力，不需要额外安装依赖。</p><h2 class="">3. Erlang 提供完美的字面量对象</h2><blockquote class="tc-quote tc-big-quote"><p>Less, but better.
</p><cite>Rams</cite></blockquote><p>Erlang 中返回一个 person 数据</p><pre><code>{person, {tj, 31, male}}</code></pre><p>虽然我很喜欢 JSON，相较于 Erlang tuple ，还是有点繁琐了。</p><pre class="hljs"><code class="json hljs"><span class="hljs-punctuation">{</span>
    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;tj&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">31</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">&quot;gender&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;male&quot;</span>
<span class="hljs-punctuation">}</span></code></pre><p>Erlang Records 提供更加明确属性名，或许大家更亲切。</p><pre><code>-record(person, {name, phone, address}).

P = #person{name="tj"}
#person{name = N} = P.

N. % "tj"</code></pre><p>— 下面分享一些 Erlang 更高级的功能 —</p><h2 class="">4. Erlang 在语言层面提供远程调用，原生支持分布式</h2><p>Erlang 允许直接通过 node 调用远程代码，在语言层面支持分布式。</p><p>我们准备一段代码</p><pre><code>% math.erl
-module(math).
-export([add/2]).

add(X, Y) -&gt;
    X + Y.</code></pre><p>然后在代码目录下开启一个 terminal，并打开一个指定名称的 erl </p><pre><code>erl -sname left

node().
% 'left@2022-M2-Air'</code></pre><p>编译代码，并测试一下代码是否工作</p><pre><code>c(math).
% {ok,math}
math:add(1,2).
% 3</code></pre><p>在 <code>任意目录</code> 下开启 <code>另一个 terminal</code>，并打开一个指定名称的 erl </p><pre><code>erl -sname right

node().
% 'right@2022-M2-Air'</code></pre><p>现在是见证奇迹的时刻了。虽然在 right terminal 没有 math.erl 代码，
Erlang 允许我们直接调用远程节点的代码</p><pre><code>math:add(1,2).
% ** exception error: undefined function math:add/2

rpc:call('left@2022-M2-Air', math, add, [1,2]).
% 3</code></pre><h2 class="">5. Erlang 远程处理错误允许优雅地对应不可抗力因素</h2><blockquote><div>远程处理错误这不是微服务架构的终极目标吗？</div></blockquote><p>准备两个 server side 代码，server1 负责逻辑，server2 负责错误处理。</p><pre><code>% server1.erl
-module(sever1).
-export([run/0]).

run() -&gt;
    receive
        X -&gt; list_to_atom(X)
    end.</code></pre><pre><code>% server2.erl
-module(server2).
-export([listen/1]).

listen(Pid) -&gt;
    spawn(fun() -&gt;
        process_flag(trap_exit, true),
        link(Pid),
        receive
            {'EXIT', Pid, _} -&gt; io:format(" ~p died. ~n", [Pid])
        end
    end).</code></pre><p>打开一个 terminal 并编译 server1</p><pre><code>erl -sname server1

c(server1).</code></pre><p>打开另外一个 terminal，并编译 server2</p><pre><code>erl -sname server2

c(server2).</code></pre><p>在 terminal 2 中</p><pre><code>% 创建一个线程指向 server1 run 函数
Pid = spawn('server1@2022-M2-Air', server1, run, []).

% 绑定线程和错误处理函数
server2:listen(Pid).

% 向线程发送消息
Pid ! hello.</code></pre><p>这时 terminal 2 会得到如下输出</p><pre><code>&lt;10155.111.0&gt; died. </code></pre><p>so cool.</p><p>解释一下，虽然程序异常是在 terminal 1 发生的，但是处理程序却只在 terminal 2 中被定义，并且在 terminal 中被执行。</p><blockquote class="tc-quote tc-big-quote"><p>现在我们先停下来，回味一下前面这个样例。这个样例展示了 Erlang 哲学中极其重要的一面——远程错误处理。
</p><cite>joe</cite></blockquote><blockquote class="tc-quote tc-big-quote"><p>Erlang 在语言层面提供了一个 k8s
</p><cite>TJ 2024-01-31</cite></blockquote><ol><li>6. Erlang 在语言层面提供了功能强大的 Schemaless Database</li></ol><p>其实我没有使用过 Erlang 自带 Mnesia database，而且也没有计划真正使用 Mnesia 开发实际产品。但是我很喜欢 ETS 和 DETS，在语言层面提供 ETS DETS 这种内存和硬盘储存服务真的太方便了。</p><p>虽然 SQLite 也很方便，但是 ETS 可以直接存储 Erlang Records 这简直是无敌一样的存在。</p><pre><code>1&gt; Tab = ets:new(user, [set]).
#Ref&lt;0.2226659868.3932815361.70843&gt;
2&gt; ets:insert(Tab, {tj, {tj, 31, male}}).
true
3&gt; ets:lookup(Tab, tj).
[{tj,{tj,31,male}}]</code></pre><p>为什么 Erlang 中 ETS EDTS 比 SQLite 更好用？</p><ol><li>ETS EDTS 无需额外安装，Erlang VM 自带</li><li>ETS EDTS 支持存储 Erlang Records，原生对象，更高效，无需额外转换</li><li>ETS EDTS 支持存储任何 Erlang Records，即使是嵌套数据，相当于一个 NoSQL database。</li></ol><p>先写到这吧，如果你想尝试 Erlang，或者有 Erlang 相关讨论想要找人聊聊，欢迎来找我，😁</p><blockquote class="tc-quote tc-big-quote"><p>I love Elixir too, Elixir runs on the Erlang VM and has a lot of beautiful features and awesome developers.
</p><cite>TJ 2024-01-31</cite></blockquote>
          </div>          
      </div>
  </div>
</div>     


<div class="copyright">
<strong>
<a href="https://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">
版权声明：自由转载-非商用-非衍生-保持署名（创意共享3.0许可证）
</a>
</strong>
</div>

<style>
.copyright {
  padding: 0.5rem 1rem;
  text-align: center;
}

.copyright:hover {
  opacity: 0.9;
}
</style>


]]></description>
      <pubDate>Wed, 31 January 2024 13:5:43 -00:00</pubDate>
			<guid>https://thaddeusjiang.com/2024-01-31-why-i-love-erlang</guid>      
   </item>

   <item>
      <title>2024-01-11 TypeScript 最烦人，也最简单的 error</title>
      <link>https://thaddeusjiang.com/2024-01-11-typescript-zui-fan-ren-ye-zui-jian-dan-de-error</link>
			<description><![CDATA[
<div class="container">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><nav aria-label="main navigation" class="navbar" role="navigation"><p><div class="navbar-brand">
          <a href="./">
              <h1 class="title">Thaddeus Jiang</h1>
              <p class="subtitle">I know I don't know, stay curious.</p>
          </a>
      </div></p><p><div class="navbar-end mt-2 subtitle is-5"><a class="tc-tiddlylink tc-tiddlylink-shadow tc-tiddlylink-resolves" href="./#blog">Blogs</a> | <a class="tc-tiddlylink-external" href="https://thaddeusjiang.com/wiki" rel="noopener noreferrer" target="_blank">Wiki</a> | <a class="tc-tiddlylink-external" href="https://thaddeusjiang.com/rss.xml" rel="noopener noreferrer" target="_blank">RSS</a> </div></p></nav></div>
</div>


<div class="container mt-4">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="subtitle">2024-01-11 TypeScript 最烦人，也最简单的 error</h1>
            <hr>

            <p>TypeScript 最烦人，也最简单的 error，即：optional 声明方式不兼容。</p><p>相信所有 TypeScript 开发者都遇到下面的错误日志吧？😂</p><pre class="hljs"><code class="ts hljs"><span class="hljs-title class_">Type</span> <span class="hljs-string">&#x27;number | null&#x27;</span> is not assignable to <span class="hljs-keyword">type</span> <span class="hljs-string">&#x27;number | undefined&#x27;</span>.
  <span class="hljs-title class_">Type</span> <span class="hljs-string">&#x27;null&#x27;</span> is not assignable to <span class="hljs-keyword">type</span> <span class="hljs-string">&#x27;number | undefined&#x27;</span>.<span class="hljs-title function_">ts</span>(<span class="hljs-number">2322</span>)</code></pre><p>虽然这个错误的解决方法很简单，但是时不时就被它烦一下，也是服气了。忍不住想吐槽几句。</p><blockquote class="tc-quote tc-big-quote"><p>TypeScript optional 声明方式不兼容造成了生态问题，不是简单的语法问题。
</p><cite>TJ 2024-01-11</cite></blockquote><p>如果只是简单的语法问题，我又何必吐槽呢？</p><p>如果只是简单的程序，没有第三方依赖，不涉及工具链，那就做好自己就行了。只要自己和团队做得好，TypeScript optional 声明方式不兼容的问题是可以避免的。</p><p>但是对于复杂的程序，有大量第三方依赖，并使用各种工具链辅助开发，那么这就是生态问题。只靠自己和团队避坑是没有用的，因为生态里的总有人会挖好坑等你。</p><h2 class="">为什么说是生态问题呢？</h2><p>先解释一下我现在参加的项目的技术栈：</p><ol><li><a class="tc-tiddlylink tc-tiddlylink-missing" href="./#protobuf">protobuf</a> 定义 gRPC request response，并通过 codegen 生成 gRPC server 和 client 的 TypeScript 类型定义</li><li><a class="tc-tiddlylink tc-tiddlylink-missing" href="./#prisma">prisma</a> 定义 database schema，并通过 prisma generate 生成 TypeScript 类型定义</li><li><a class="tc-tiddlylink tc-tiddlylink-missing" href="./#class-validator">class-validator</a> 定义 validation schema</li><li><a class="tc-tiddlylink tc-tiddlylink-missing" href="./#typescript">TypeScript</a> 编写业务代码和辅助数据</li></ol><p>针对最开始分享的 TypeScript error 我分享一下我的 protobuf prisma class-validator TypeScript 分别是怎么写的，如果你是 TypeScript developer，相信你一定能看懂。</p><h3 class="">1. protobuf and generated code</h3><p>protobuf code</p><pre class="hljs"><code class="ts hljs"><span class="hljs-comment">// .proto</span>
message <span class="hljs-title class_">ChargingProfile</span> {
  <span class="hljs-comment">// ...</span>
  optional int32 duration = <span class="hljs-number">2</span>;
  <span class="hljs-comment">// ...</span>
}</code></pre><p>protobuf generated code </p><pre class="hljs"><code class="ts hljs"><span class="hljs-comment">// dist/buf/check_in_history_pb.ts</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChargingProfile</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Message</span>&lt;<span class="hljs-title class_">ChargingProfile</span>&gt; {
  <span class="hljs-comment">// ...</span>
  <span class="hljs-comment">/**
   * <span class="hljs-doctag">@generated</span> from field: optional int32 duration = 2;
   */</span>
  duration?: <span class="hljs-built_in">number</span>;
  <span class="hljs-comment">// ...</span></code></pre><h2 class="">2. prisma and generated code</h2><p>prisma schema</p><pre class="hljs"><code class="ts hljs"><span class="hljs-comment">// schema.prisma</span>
model <span class="hljs-title class_">ChargingProfile</span> {
  <span class="hljs-comment">// ...</span>
  duration                <span class="hljs-title class_">Int</span>?
  <span class="hljs-comment">// ...</span>
}</code></pre><p>prisma schema generated code</p><pre class="hljs"><code class="ts hljs"><span class="hljs-comment">// node_module/.prisma/client/index.d.ts</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">type</span> <span class="hljs-title class_">ChargingProfile</span> = {
  <span class="hljs-comment">// ...</span>
  <span class="hljs-attr">duration</span>: <span class="hljs-built_in">number</span> | <span class="hljs-literal">null</span>
  <span class="hljs-comment">// ...</span>
}</code></pre><h3 class="">小结</h3><p>注意看，protobuf generated code 和 prisma schema generated code</p><pre class="hljs"><code class="diff hljs">  // protobuf generated code
<span class="hljs-addition">+  duration?: number;</span>
  //prisma schema generated code
<span class="hljs-addition">+  duration: number | null</span></code></pre><p>最开始分享的 TypeScript error 就是因为这个原因造成的，我在 x.com 上分享了这段代码，很多朋友分享了他们的避免方法。但是 <code>generated code</code> 完全不是我编写的，而是 TypeScript 生态中工具链生成的，即使我的定义是相同的，不同工具链生成的代码还是造成了 TypeScripr error，我真不知道我要如何避免这个错误。🤷</p><blockquote class="tc-quote tc-big-quote"><p>BTW 这个问题的解决方法非常简单，我并不是不能解决。
只是它经常出来烦我一下，让我忍不住想吐槽。
</p><cite>TJ 2024-01-11</cite></blockquote><h2 class="">3. class-validator</h2><pre class="hljs"><code class="ts hljs"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChargingProfileDto</span> {
  <span class="hljs-comment">// ...</span>
  <span class="hljs-meta">@IsOptional</span>()
  <span class="hljs-meta">@IsInt</span>()
  duration?: <span class="hljs-built_in">number</span>;
  <span class="hljs-comment">// ...</span>
}</code></pre><p>其实 class-validator 实现的代码和本文没什么关系，不过这段代码是真实存在于我们的代码库中的，我就顺便分享一下。</p><p>并且，我非常不喜欢 class-validator，原因有以下几点：</p><ol><li>class-validator 和 TypeScript 在某些方面是重复的，例如 <code>@IsOptional()</code> 和 <code>?</code></li><li>class-validator 只能校验 class instance，如果想校验 JSON 还需要额外依赖（class-transformer）</li><li>class-validator 文档不全，例如：我一直没有找到 <code>@IsNumber(options: IsNumberOptions)</code> 中 options 有哪些配置项</li></ol><h2 class="">最后，分享几种 TypeScript 中 number 的定义</h2><pre class="hljs"><code class="ts hljs"><span class="hljs-keyword">type</span> A = {
  a?: <span class="hljs-built_in">number</span>
}

<span class="hljs-keyword">type</span> B = {
  <span class="hljs-attr">a</span>: <span class="hljs-built_in">number</span> | <span class="hljs-literal">undefined</span>
}

<span class="hljs-keyword">type</span> C = {
  <span class="hljs-attr">a</span>: <span class="hljs-built_in">number</span> | <span class="hljs-literal">null</span>
}

<span class="hljs-keyword">type</span> D = {
  <span class="hljs-attr">a</span>: <span class="hljs-built_in">number</span> | <span class="hljs-literal">null</span> | <span class="hljs-literal">undefined</span>
}

<span class="hljs-keyword">type</span> E = {
  <span class="hljs-attr">a</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">0</span>
}</code></pre><p>大家参加的项目中用哪一种呢？就个人而言，你倾向哪一种？</p><p>欢迎大家和我一起讨论：</p><ul><li>x.com: <a class="tc-tiddlylink-external" href="https://x.com/ThaddeusJiang/status/1745085873807347771" rel="noopener noreferrer" target="_blank">https://x.com/ThaddeusJiang/status/1745085873807347771</a></li><li>telegram: <a class="tc-tiddlylink-external" href="https://t.me/talktalk_developer/539" rel="noopener noreferrer" target="_blank">https://t.me/talktalk_developer/539</a></li><li>github: <a class="tc-tiddlylink-external" href="https://github.com/ThaddeusJiang/thaddeusjiang.github.io/discussions/63" rel="noopener noreferrer" target="_blank">https://github.com/ThaddeusJiang/thaddeusjiang.github.io/discussions/63</a></li></ul><p>other refs</p><ul><li><a class="tc-tiddlylink-external" href="https://protobuf.dev/" rel="noopener noreferrer" target="_blank">https://protobuf.dev/</a></li><li><a class="tc-tiddlylink-external" href="https://www.prisma.io/" rel="noopener noreferrer" target="_blank">https://www.prisma.io/</a></li><li><a class="tc-tiddlylink-external" href="https://www.typescriptlang.org/" rel="noopener noreferrer" target="_blank">https://www.typescriptlang.org/</a></li><li><a class="tc-tiddlylink-external" href="https://github.com/typestack/class-validator" rel="noopener noreferrer" target="_blank">https://github.com/typestack/class-validator</a></li><li><a class="tc-tiddlylink-external" href="https://github.com/typestack/class-transformer" rel="noopener noreferrer" target="_blank">https://github.com/typestack/class-transformer</a></li></ul>
          </div>          
      </div>
  </div>
</div>     


<div class="copyright">
<strong>
<a href="https://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">
版权声明：自由转载-非商用-非衍生-保持署名（创意共享3.0许可证）
</a>
</strong>
</div>

<style>
.copyright {
  padding: 0.5rem 1rem;
  text-align: center;
}

.copyright:hover {
  opacity: 0.9;
}
</style>


]]></description>
      <pubDate>Wed, 10 January 2024 19:44:26 -00:00</pubDate>
			<guid>https://thaddeusjiang.com/2024-01-11-typescript-zui-fan-ren-ye-zui-jian-dan-de-error</guid>      
   </item>

   <item>
      <title>2023-12-18 软件开发“白痴指数”</title>
      <link>https://thaddeusjiang.com/2023-12-18-ruan-jian-kai-fa-bai-chi-zhi-shu</link>
			<description><![CDATA[
<div class="container">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><nav aria-label="main navigation" class="navbar" role="navigation"><p><div class="navbar-brand">
          <a href="./">
              <h1 class="title">Thaddeus Jiang</h1>
              <p class="subtitle">I know I don't know, stay curious.</p>
          </a>
      </div></p><p><div class="navbar-end mt-2 subtitle is-5"><a class="tc-tiddlylink tc-tiddlylink-shadow tc-tiddlylink-resolves" href="./#blog">Blogs</a> | <a class="tc-tiddlylink-external" href="https://thaddeusjiang.com/wiki" rel="noopener noreferrer" target="_blank">Wiki</a> | <a class="tc-tiddlylink-external" href="https://thaddeusjiang.com/rss.xml" rel="noopener noreferrer" target="_blank">RSS</a> </div></p></nav></div>
</div>


<div class="container mt-4">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="subtitle">2023-12-18 软件开发“白痴指数”</h1>
            <hr>

            <p>“白痴指数”，用来计算某个制成品的成本比其基本材料的成本高多少。软件开发“白痴指数”，用来计算计算机软件总成本比功能相关成本高多少。</p><ul><li>总成本（功能相关 + 非功能相关）：设计、开发、测试、部署、配置</li><li>功能相关：设计、开发</li></ul><p>测试、部署、配置等非功能相关的成本越高，项目水分越大。</p><h2 class="">为什么我突然想写《软件开发“白痴指数”》 ？</h2><p>今天我负责 release 一个新版本，需要配置一个 connection token，我花了大约 3~4 个小时才完成，差点没把我累死。😭</p><p>就是一个环境变量啊，干嘛搞得这么复杂呢？</p><p>美其名曰：架构安全。但是软件系统的安全是木桶效应，瓶颈不在最高的那块板，而是在最低的那块板。DevOps 搞得这么复杂，复杂到 DevOps developers 都不能完全理解和 100% 保证正确。最低的那块板就变成了维护如此复杂 DevOps 的人了。</p><blockquote class="tc-quote tc-big-quote"><p>“架构安全” 是什么垃圾？
推荐瞎折腾的人先看一下 <a class="tc-tiddlylink-external" href="https://zh.wikipedia.org/wiki/%E7%A4%BE%E4%BC%9A%E5%B7%A5%E7%A8%8B%E5%AD%A6" rel="noopener noreferrer" target="_blank">《社会工程学》</a> 是什么。
</p><cite>TJ 2023-12-18</cite></blockquote><p>简单记录一下我今天干了什么：</p><ol><li>使用 terraform 在 GCP 创建一个 Secret Manager，用来储存密钥。</li><li>在 k8s 中配置 secret-manager client，用来在读取密钥。</li><li>使用 terraform 为 k8s 配置 Secret Manager 权限，没有权限读不到密钥</li><li>更新 k8s container image tag，得到 k8s load-balancer 切换 pod。</li><li>使用 Postman 调用 health endpoint，并查看 container image tag 是否正确</li><li>查看 metabase 已确定 database migrations 正确执行</li><li>查看 datadog, Google Pub/Sub subscriptions, 等等周边服务</li></ol><p>关键是上面这些操作全都要通过 gitlab MR 和 CICD，美其名曰 GitOps，😂</p><ol><li>编写 yaml</li><li>提交 gitlab MR</li><li>请求 review</li><li>合并 MR，并等待 CICD</li><li>确认 CICD 结果</li></ol><p>我累死了，也傻掉了，太麻烦了。反复在 gitlab repositories 间横跳、提交 code、等待 review、执行 merge、继续等待，啊啊啊啊啊啊</p><blockquote class="tc-quote tc-big-quote"><p>GitOps 是什么垃圾？
等我休完年假回来，2024 年第一件事就是精简现在项目的 DevOps，不该用 git 的地方少扯版本管理。
infra as code 是继 micro-services 后又一个我粉转黑的架构技术。🤮
</p><cite>TJ 2023-12-18</cite></blockquote><h2 class="">最后再说一遍</h2><p>软件开发“白痴指数”，非功能相关的成本越高，项目水分越大。</p>
          </div>          
      </div>
  </div>
</div>     


<div class="copyright">
<strong>
<a href="https://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">
版权声明：自由转载-非商用-非衍生-保持署名（创意共享3.0许可证）
</a>
</strong>
</div>

<style>
.copyright {
  padding: 0.5rem 1rem;
  text-align: center;
}

.copyright:hover {
  opacity: 0.9;
}
</style>


]]></description>
      <pubDate>Mon, 18 December 2023 13:8:55 -00:00</pubDate>
			<guid>https://thaddeusjiang.com/2023-12-18-ruan-jian-kai-fa-bai-chi-zhi-shu</guid>      
   </item>

</channel>
</rss>
