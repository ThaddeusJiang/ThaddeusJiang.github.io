<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   <title>ThaddeusJiang</title>
   <link>https://thaddeusjiang.com</link>
   <description>I know I don't know.</description>
   <item>
      <title>2023-12-18 软件开发“白痴指数”</title>
      <link>https://thaddeusjiang.com/2023-12-18-ruan-jian-kai-fa-bai-chi-zhi-shu</link>
			<description><![CDATA[
<div class="container">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><nav aria-label="main navigation" class="navbar" role="navigation"><p><div class="navbar-brand">
          <a href="./">
              <h1 class="title">ThaddeusJiang</h1>
              <p class="subtitle">I know I don't know.</p>
          </a>
      </div></p><p><div class="navbar-end mt-2 subtitle is-5"><a class="tc-tiddlylink tc-tiddlylink-shadow tc-tiddlylink-resolves" href="./#blog">Blogs</a> | <a class="tc-tiddlylink-external" href="https://thaddeusjiang.com/wiki" rel="noopener noreferrer" target="_blank">Wiki</a> | <a class="tc-tiddlylink-external" href="https://thaddeusjiang.com/rss.xml" rel="noopener noreferrer" target="_blank">RSS</a> </div></p></nav></div>
</div>


<div class="container mt-4">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="subtitle">2023-12-18 软件开发“白痴指数”</h1>
            <hr>

            <p>“白痴指数”，用来计算某个制成品的成本比其基本材料的成本高多少。软件开发“白痴指数”，用来计算计算机软件总成本比功能相关成本高多少。</p><ul><li>总成本（功能相关 + 非功能相关）：设计、开发、测试、部署、配置</li><li>功能相关：设计、开发</li></ul><p>测试、部署、配置等非功能相关的成本越高，项目水分越大。</p><h2 class="">为什么我突然想写《软件开发“白痴指数”》 ？</h2><p>今天我负责 release 一个新版本，需要配置一个 connection token，我花了大约 3~4 个小时才完成，差点没把我累死。😭</p><p>就是一个环境变量啊，干嘛搞得这么复杂呢？</p><p>美其名曰：架构安全。但是软件系统的安全是木桶效应，瓶颈不在最高的那块板，而是在最低的那块板。DevOps 搞得这么复杂，复杂到 DevOps developers 都不能完全理解和 100% 保证正确。最低的那块板就变成了维护如此复杂 DevOps 的人了。</p><blockquote class="tc-quote tc-big-quote"><p>“架构安全” 是什么垃圾？
推荐瞎折腾的人先看一下 <a class="tc-tiddlylink-external" href="https://zh.wikipedia.org/wiki/%E7%A4%BE%E4%BC%9A%E5%B7%A5%E7%A8%8B%E5%AD%A6" rel="noopener noreferrer" target="_blank">《社会工程学》</a> 是什么。
</p><cite>TJ 2023-12-18</cite></blockquote><p>简单记录一下我今天干了什么：</p><ol><li>使用 terraform 在 GCP 创建一个 Secret Manager，用来储存密钥。</li><li>在 k8s 中配置 secret-manager client，用来在读取密钥。</li><li>使用 terraform 为 k8s 配置 Secret Manager 权限，没有权限读不到密钥</li><li>更新 k8s container image tag，得到 k8s load-balancer 切换 pod。</li><li>使用 Postman 调用 health endpoint，并查看 container image tag 是否正确</li><li>查看 metabase 已确定 database migrations 正确执行</li><li>查看 datadog, Google Pub/Sub subscriptions, 等等周边服务</li></ol><p>关键是上面这些操作全都要通过 gitlab MR 和 CICD，美其名曰 GitOps，😂</p><ol><li>编写 yaml</li><li>提交 gitlab MR</li><li>请求 review</li><li>合并 MR，并等待 CICD</li><li>确认 CICD 结果</li></ol><p>我累死了，也傻掉了，太麻烦了。反复在 gitlab repositories 间横跳、提交 code、等待 review、执行 merge、继续等待，啊啊啊啊啊啊</p><blockquote class="tc-quote tc-big-quote"><p>GitOps 是什么垃圾？
等我休完年假回来，2024 年第一件事就是精简现在项目的 DevOps，不该用 git 的地方少扯版本管理。
infra as code 是继 micro-services 后又一个我粉转黑的架构技术。🤮
</p><cite>TJ 2023-12-18</cite></blockquote><h2 class="">最后再说一遍</h2><p>软件开发“白痴指数”，非功能相关的成本越高，项目水分越大。</p>
          </div>          
      </div>
  </div>
</div>     


<div class="copyright">
<strong>
<a href="https://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">
版权声明：自由转载-非商用-非衍生-保持署名（创意共享3.0许可证）
</a>
</strong>
</div>

<style>
.copyright {
  padding: 0.5rem 1rem;
  text-align: center;
}

.copyright:hover {
  opacity: 0.9;
}
</style>


]]></description>
      <pubDate>Mon, 18 December 2023 13:8:55 -00:00</pubDate>
			<guid>https://thaddeusjiang.com/2023-12-18-ruan-jian-kai-fa-bai-chi-zhi-shu</guid>      
   </item>

   <item>
      <title>2023-12-07 Install vs. Copy</title>
      <link>https://thaddeusjiang.com/2023-12-07-install-vs-copy</link>
			<description><![CDATA[
<div class="container">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><nav aria-label="main navigation" class="navbar" role="navigation"><p><div class="navbar-brand">
          <a href="./">
              <h1 class="title">ThaddeusJiang</h1>
              <p class="subtitle">I know I don't know.</p>
          </a>
      </div></p><p><div class="navbar-end mt-2 subtitle is-5"><a class="tc-tiddlylink tc-tiddlylink-shadow tc-tiddlylink-resolves" href="./#blog">Blogs</a> | <a class="tc-tiddlylink-external" href="https://thaddeusjiang.com/wiki" rel="noopener noreferrer" target="_blank">Wiki</a> | <a class="tc-tiddlylink-external" href="https://thaddeusjiang.com/rss.xml" rel="noopener noreferrer" target="_blank">RSS</a> </div></p></nav></div>
</div>


<div class="container mt-4">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="subtitle">2023-12-07 Install vs. Copy</h1>
            <hr>

            <p>对于依赖，应该选择使用包管理进行安装，还是复制粘贴代码？</p><p>我的心路历程：</p><ul><li>最开始，肯定是使用 npm <code>install</code> 搞定一切，安装 mui 和 antd 没商量。 😄</li><li>然后，tailwindcss 生态的组件库和 demo 缘来缘多，尤其是 shadcn/ui 出来以后，我开始使用 <code>copy &amp; paste</code> 了。😜</li><li>最近半年完全不写 UI，全都是和 Data 打交道，肯定要 <code>install</code> 啊，copy &amp; paste 的代码没过几周就面目全非了。💩</li></ul><h1 class="">现在阶段的判断：</h1><ul><li>不需要修改默认行为，install</li></ul><p>例如：一些用于数据处理的函数，lodash, dayjs 等等</p><ul><li>需要修改默认行为，copy and paste</li></ul><p>例如：UI 组件  shadcn/ui，业务流程手脚架代码 v0 等等</p><h1 class="">install vs. copy</h1><p>install 优点：</p><ol><li>可以进行版本检查，及时跟上依赖的更新以及一些补丁。</li></ol><p>install 缺点：</p><ol><li>不擅长删减和自由组合默认行为。（但是可以通过继承和扩展增加功能，即：擅长加，不擅长减</li></ol><p>copy 优点：</p><ol><li>可以根据需要删减和自由组合，可能性和自由度更大。</li></ol><p>copy 缺点：</p><ol><li>版本升级不便，容易和依赖原作脱钩。</li></ol><p>refs:</p><ul><li><a class="tc-tiddlylink-external" href="https://mui.com/" rel="noopener noreferrer" target="_blank">https://mui.com/</a></li><li><a class="tc-tiddlylink-external" href="https://ui.shadcn.com/" rel="noopener noreferrer" target="_blank">https://ui.shadcn.com/</a></li><li><a class="tc-tiddlylink-external" href="https://lodash.com/" rel="noopener noreferrer" target="_blank">https://lodash.com/</a></li><li><a class="tc-tiddlylink-external" href="https://day.js.org/" rel="noopener noreferrer" target="_blank">https://day.js.org/</a></li><li><a class="tc-tiddlylink-external" href="https://v0.dev/" rel="noopener noreferrer" target="_blank">https://v0.dev/</a></li></ul>
          </div>          
      </div>
  </div>
</div>     


<div class="copyright">
<strong>
<a href="https://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">
版权声明：自由转载-非商用-非衍生-保持署名（创意共享3.0许可证）
</a>
</strong>
</div>

<style>
.copyright {
  padding: 0.5rem 1rem;
  text-align: center;
}

.copyright:hover {
  opacity: 0.9;
}
</style>


]]></description>
      <pubDate>Thu, 7 December 2023 9:20:30 -00:00</pubDate>
			<guid>https://thaddeusjiang.com/2023-12-07-install-vs-copy</guid>      
   </item>

   <item>
      <title>2023-11-14 ISO 8601</title>
      <link>https://thaddeusjiang.com/2023-11-14-iso-8601</link>
			<description><![CDATA[
<div class="container">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><nav aria-label="main navigation" class="navbar" role="navigation"><p><div class="navbar-brand">
          <a href="./">
              <h1 class="title">ThaddeusJiang</h1>
              <p class="subtitle">I know I don't know.</p>
          </a>
      </div></p><p><div class="navbar-end mt-2 subtitle is-5"><a class="tc-tiddlylink tc-tiddlylink-shadow tc-tiddlylink-resolves" href="./#blog">Blogs</a> | <a class="tc-tiddlylink-external" href="https://thaddeusjiang.com/wiki" rel="noopener noreferrer" target="_blank">Wiki</a> | <a class="tc-tiddlylink-external" href="https://thaddeusjiang.com/rss.xml" rel="noopener noreferrer" target="_blank">RSS</a> </div></p></nav></div>
</div>


<div class="container mt-4">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="subtitle">2023-11-14 ISO 8601</h1>
            <hr>

            <p>imo: 永远使用 ISO 8601 string 在 API 之间传递日期时间数据。</p><h1 class="">Why?</h1><p>不同的编程语言对日期时间数据的实现有可能不同，但是 ISO 8601 Format 是相同的，始终是 <code>YYYY-MM-DDTHH:mm:ss.sssZ</code>。</p><p>始终使用 ISO 8601 string 在 API 之间传递日期时间数据，可以有效的减少开发者造轮子；减少没有任何收益的技术实现讨论。</p><p>并且 ISO 8601 string 是人类可读的，并且非常简单，任何智商正常的人都不需要额外学习就可以在大脑中进行对比、比较、简单运算。</p><ul><li>对比 ISO 8601 string：2023-12-06T23:00:00.000Z 和 2023-12-07T09:00:00.000Z 不相等</li><li>比较 ISO 8601 string：2023-12-06T23:00:00.000Z 比 2023-12-07T09:00:00.000Z 小</li><li>简单运算 ISO 8601 string：2023-12-06T23:00:00.000Z 加 10 小时等于 2023-12-07T09:00:00.000Z</li></ul><h1 class="">我遇到过的 issues</h1><h2 class="">1. 日期时间数据在 console / log 中不可读，不能直接在大脑中运算。</h2><p>例如：现在时间是 2023-12-06T04:30:48.253Z，如果不使用 ISO 8601 format，大脑无法直接对当前时间进行简单比较和运算。</p><pre class="hljs"><code class="js hljs"><span class="hljs-keyword">const</span> now = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()
now
<span class="hljs-comment">// Wed Dec 06 2023 13:28:53 GMT+0900 (Japan Standard Time)</span></code></pre><p>使用 ISO 8601 format 就简单多了</p><pre class="hljs"><code class="js hljs">now.<span class="hljs-title function_">toISOString</span>()
<span class="hljs-comment">// &#x27;2023-12-06T04:30:48.253Z&#x27;</span></code></pre><h2 class="">2. 某些项目使用 google/protobuf/Timestamp 类型传递日期时间数据，不仅难以阅读，且容易造成不必要的 bug。</h2><p>请问：谁能回答下面 timestamp 的日期和时间？</p><pre class="hljs"><code class="js hljs"><span class="hljs-comment">// https://github.com/protocolbuffers/protobuf/blob/main/src/google/protobuf/timestamp.proto</span>
message <span class="hljs-title class_">Timestamp</span> {
  int64 seconds = <span class="hljs-number">1</span>;
  int32 nanos = <span class="hljs-number">2</span>;
}

<span class="hljs-keyword">const</span> timestamp = {
  <span class="hljs-attr">seconds</span>: <span class="hljs-number">1701767836</span>,
  <span class="hljs-attr">nanos</span>: <span class="hljs-number">878000000</span>,
};</code></pre><p>答案：<code>2023-12-05T09:17:16.878Z</code></p><p>请问：谁能回答上面 timestamp 加 10小时得到的值？</p><blockquote><div>我也不知道，我也懒得算。在我看来，愿意折腾 Timestamp 运算的开发者都是</div></blockquote><p>BTW，如果你说在的团队强迫你使用 google/protobug/timestamp 传递 Date，推荐你 copy paste 这段代码，我写了自动化测试，可以 Timestamp 和 Date 转换的正确性。</p><p><a class="tc-tiddlylink-external" href="https://github.com/plugoinc/node-common/blob/main/src/utils/protobuf.util.ts#L35-L64" rel="noopener noreferrer" target="_blank">https://github.com/plugoinc/node-common/blob/main/src/utils/protobuf.util.ts#L35-L64</a></p><h1 class="">发出我最后的呼吼</h1><blockquote class="tc-quote tc-big-quote"><p>恳请各位使用 ISO 8601 string 在 API 之间传递日期时间数据，不要折腾了。
</p><cite>TJ</cite></blockquote>
          </div>          
      </div>
  </div>
</div>     


<div class="copyright">
<strong>
<a href="https://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">
版权声明：自由转载-非商用-非衍生-保持署名（创意共享3.0许可证）
</a>
</strong>
</div>

<style>
.copyright {
  padding: 0.5rem 1rem;
  text-align: center;
}

.copyright:hover {
  opacity: 0.9;
}
</style>


]]></description>
      <pubDate>Wed, 6 December 2023 4:56:41 -00:00</pubDate>
			<guid>https://thaddeusjiang.com/2023-11-14-iso-8601</guid>      
   </item>

</channel>
</rss>
