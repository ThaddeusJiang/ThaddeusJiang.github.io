<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   <title>ThaddeusJiang</title>
   <link>https://thaddeusjiang.com</link>
   <description>I know I don't know.</description>
   <item>
      <title>2024-01-11 TypeScript 最烦人，也最简单的 error</title>
      <link>https://thaddeusjiang.com/2024-01-11-typescript-zui-fan-ren-ye-zui-jian-dan-de-error</link>
			<description><![CDATA[
<div class="container">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><nav aria-label="main navigation" class="navbar" role="navigation"><p><div class="navbar-brand">
          <a href="./">
              <h1 class="title">ThaddeusJiang</h1>
              <p class="subtitle">I know I don't know.</p>
          </a>
      </div></p><p><div class="navbar-end mt-2 subtitle is-5"><a class="tc-tiddlylink tc-tiddlylink-shadow tc-tiddlylink-resolves" href="./#blog">Blogs</a> | <a class="tc-tiddlylink-external" href="https://thaddeusjiang.com/wiki" rel="noopener noreferrer" target="_blank">Wiki</a> | <a class="tc-tiddlylink-external" href="https://thaddeusjiang.com/rss.xml" rel="noopener noreferrer" target="_blank">RSS</a> </div></p></nav></div>
</div>


<div class="container mt-4">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="subtitle">2024-01-11 TypeScript 最烦人，也最简单的 error</h1>
            <hr>

            <p>TypeScript 最烦人，也最简单的 error，即：optional 声明方式不兼容。</p><p>相信所有 TypeScript 开发者都遇到下面的错误日志吧？😂</p><pre class="hljs"><code class="ts hljs"><span class="hljs-title class_">Type</span> <span class="hljs-string">&#x27;number | null&#x27;</span> is not assignable to <span class="hljs-keyword">type</span> <span class="hljs-string">&#x27;number | undefined&#x27;</span>.
  <span class="hljs-title class_">Type</span> <span class="hljs-string">&#x27;null&#x27;</span> is not assignable to <span class="hljs-keyword">type</span> <span class="hljs-string">&#x27;number | undefined&#x27;</span>.<span class="hljs-title function_">ts</span>(<span class="hljs-number">2322</span>)</code></pre><p>虽然这个错误的解决方法很简单，但是时不时就被它烦一下，也是服气了。忍不住想吐槽几句。</p><blockquote class="tc-quote tc-big-quote"><p>TypeScript optional 声明方式不兼容造成了生态问题，不是简单的语法问题。
</p><cite>TJ 2024-01-11</cite></blockquote><p>如果只是简单的语法问题，我又何必吐槽呢？</p><p>如果只是简单的程序，没有第三方依赖，不涉及工具链，那就做好自己就行了。只要自己和团队做得好，TypeScript optional 声明方式不兼容的问题是可以避免的。</p><p>但是对于复杂的程序，有大量第三方依赖，并使用各种工具链辅助开发，那么这就是生态问题。只靠自己和团队避坑是没有用的，因为生态里的总有人会挖好坑等你。</p><h2 class="">为什么说是生态问题呢？</h2><p>先解释一下我现在参加的项目的技术栈：</p><ol><li><a class="tc-tiddlylink tc-tiddlylink-missing" href="./#protobuf">protobuf</a> 定义 gRPC request response，并通过 codegen 生成 gRPC server 和 client 的 TypeScript 类型定义</li><li><a class="tc-tiddlylink tc-tiddlylink-missing" href="./#prisma">prisma</a> 定义 database schema，并通过 prisma generate 生成 TypeScript 类型定义</li><li><a class="tc-tiddlylink tc-tiddlylink-missing" href="./#class-validator">class-validator</a> 定义 validation schema</li><li><a class="tc-tiddlylink tc-tiddlylink-missing" href="./#typescript">TypeScript</a> 编写业务代码和辅助数据</li></ol><p>针对最开始分享的 TypeScript error 我分享一下我的 protobuf prisma class-validator TypeScript 分别是怎么写的，如果你是 TypeScript developer，相信你一定能看懂。</p><h3 class="">1. protobuf and generated code</h3><p>protobuf code</p><pre class="hljs"><code class="ts hljs"><span class="hljs-comment">// .proto</span>
message <span class="hljs-title class_">ChargingProfile</span> {
  <span class="hljs-comment">// ...</span>
  optional int32 duration = <span class="hljs-number">2</span>;
  <span class="hljs-comment">// ...</span>
}</code></pre><p>protobuf generated code </p><pre class="hljs"><code class="ts hljs"><span class="hljs-comment">// dist/buf/check_in_history_pb.ts</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChargingProfile</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Message</span>&lt;<span class="hljs-title class_">ChargingProfile</span>&gt; {
  <span class="hljs-comment">// ...</span>
  <span class="hljs-comment">/**
   * <span class="hljs-doctag">@generated</span> from field: optional int32 duration = 2;
   */</span>
  duration?: <span class="hljs-built_in">number</span>;
  <span class="hljs-comment">// ...</span></code></pre><h2 class="">2. prisma and generated code</h2><p>prisma schema</p><pre class="hljs"><code class="ts hljs"><span class="hljs-comment">// schema.prisma</span>
model <span class="hljs-title class_">ChargingProfile</span> {
  <span class="hljs-comment">// ...</span>
  duration                <span class="hljs-title class_">Int</span>?
  <span class="hljs-comment">// ...</span>
}</code></pre><p>prisma schema generated code</p><pre class="hljs"><code class="ts hljs"><span class="hljs-comment">// node_module/.prisma/client/index.d.ts</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">type</span> <span class="hljs-title class_">ChargingProfile</span> = {
  <span class="hljs-comment">// ...</span>
  <span class="hljs-attr">duration</span>: <span class="hljs-built_in">number</span> | <span class="hljs-literal">null</span>
  <span class="hljs-comment">// ...</span>
}</code></pre><h3 class="">小结</h3><p>注意看，protobuf generated code 和 prisma schema generated code</p><pre class="hljs"><code class="diff hljs">  // protobuf generated code
<span class="hljs-addition">+  duration?: number;</span>
  //prisma schema generated code
<span class="hljs-addition">+  duration: number | null</span></code></pre><p>最开始分享的 TypeScript error 就是因为这个原因造成的，我在 x.com 上分享了这段代码，很多朋友分享了他们的避免方法。但是 <code>generated code</code> 完全不是我编写的，而是 TypeScript 生态中工具链生成的，即使我的定义是相同的，不同工具链生成的代码还是造成了 TypeScripr error，我真不知道我要如何避免这个错误。🤷</p><blockquote class="tc-quote tc-big-quote"><p>BTW 这个问题的解决方法非常简单，我并不是不能解决。
只是它经常出来烦我一下，让我忍不住想吐槽。
</p><cite>TJ 2024-01-11</cite></blockquote><h2 class="">3. class-validator</h2><pre class="hljs"><code class="ts hljs"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChargingProfileDto</span> {
  <span class="hljs-comment">// ...</span>
  <span class="hljs-meta">@IsOptional</span>()
  <span class="hljs-meta">@IsInt</span>()
  duration?: <span class="hljs-built_in">number</span>;
  <span class="hljs-comment">// ...</span>
}</code></pre><p>其实 class-validator 实现的代码和本文没什么关系，不过这段代码是真实存在于我们的代码库中的，我就顺便分享一下。</p><p>并且，我非常不喜欢 class-validator，原因有以下几点：</p><ol><li>class-validator 和 TypeScript 在某些方面是重复的，例如 <code>@IsOptional()</code> 和 <code>?</code></li><li>class-validator 只能校验 class instance，如果想校验 JSON 还需要额外依赖（class-transformer）</li><li>class-validator 文档不全，例如：我一直没有找到 <code>@IsNumber(options: IsNumberOptions)</code> 中 options 有哪些配置项</li></ol><h2 class="">最后，分享几种 TypeScript 中 number 的定义</h2><pre class="hljs"><code class="ts hljs"><span class="hljs-keyword">type</span> A = {
  a?: <span class="hljs-built_in">number</span>
}

<span class="hljs-keyword">type</span> B = {
  <span class="hljs-attr">a</span>: <span class="hljs-built_in">number</span> | <span class="hljs-literal">undefined</span>
}

<span class="hljs-keyword">type</span> C = {
  <span class="hljs-attr">a</span>: <span class="hljs-built_in">number</span> | <span class="hljs-literal">null</span>
}

<span class="hljs-keyword">type</span> D = {
  <span class="hljs-attr">a</span>: <span class="hljs-built_in">number</span> | <span class="hljs-literal">null</span> | <span class="hljs-literal">undefined</span>
}

<span class="hljs-keyword">type</span> E = {
  <span class="hljs-attr">a</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">0</span>
}</code></pre><p>大家参加的项目中用哪一种呢？就个人而言，你倾向哪一种？</p><p>欢迎大家和我一起讨论：</p><ul><li>x.com: <a class="tc-tiddlylink-external" href="https://x.com/ThaddeusJiang/status/1745085873807347771" rel="noopener noreferrer" target="_blank">https://x.com/ThaddeusJiang/status/1745085873807347771</a></li><li>telegram: <a class="tc-tiddlylink-external" href="https://t.me/talktalk_developer/539" rel="noopener noreferrer" target="_blank">https://t.me/talktalk_developer/539</a></li><li>github: <a class="tc-tiddlylink-external" href="https://github.com/ThaddeusJiang/thaddeusjiang.github.io/discussions/63" rel="noopener noreferrer" target="_blank">https://github.com/ThaddeusJiang/thaddeusjiang.github.io/discussions/63</a></li></ul><p>other refs</p><ul><li><a class="tc-tiddlylink-external" href="https://protobuf.dev/" rel="noopener noreferrer" target="_blank">https://protobuf.dev/</a></li><li><a class="tc-tiddlylink-external" href="https://www.prisma.io/" rel="noopener noreferrer" target="_blank">https://www.prisma.io/</a></li><li><a class="tc-tiddlylink-external" href="https://www.typescriptlang.org/" rel="noopener noreferrer" target="_blank">https://www.typescriptlang.org/</a></li><li><a class="tc-tiddlylink-external" href="https://github.com/typestack/class-validator" rel="noopener noreferrer" target="_blank">https://github.com/typestack/class-validator</a></li><li><a class="tc-tiddlylink-external" href="https://github.com/typestack/class-transformer" rel="noopener noreferrer" target="_blank">https://github.com/typestack/class-transformer</a></li></ul>
          </div>          
      </div>
  </div>
</div>     


<div class="copyright">
<strong>
<a href="https://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">
版权声明：自由转载-非商用-非衍生-保持署名（创意共享3.0许可证）
</a>
</strong>
</div>

<style>
.copyright {
  padding: 0.5rem 1rem;
  text-align: center;
}

.copyright:hover {
  opacity: 0.9;
}
</style>


]]></description>
      <pubDate>Wed, 10 January 2024 19:44:26 -00:00</pubDate>
			<guid>https://thaddeusjiang.com/2024-01-11-typescript-zui-fan-ren-ye-zui-jian-dan-de-error</guid>      
   </item>

   <item>
      <title>2023-12-18 软件开发“白痴指数”</title>
      <link>https://thaddeusjiang.com/2023-12-18-ruan-jian-kai-fa-bai-chi-zhi-shu</link>
			<description><![CDATA[
<div class="container">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><nav aria-label="main navigation" class="navbar" role="navigation"><p><div class="navbar-brand">
          <a href="./">
              <h1 class="title">ThaddeusJiang</h1>
              <p class="subtitle">I know I don't know.</p>
          </a>
      </div></p><p><div class="navbar-end mt-2 subtitle is-5"><a class="tc-tiddlylink tc-tiddlylink-shadow tc-tiddlylink-resolves" href="./#blog">Blogs</a> | <a class="tc-tiddlylink-external" href="https://thaddeusjiang.com/wiki" rel="noopener noreferrer" target="_blank">Wiki</a> | <a class="tc-tiddlylink-external" href="https://thaddeusjiang.com/rss.xml" rel="noopener noreferrer" target="_blank">RSS</a> </div></p></nav></div>
</div>


<div class="container mt-4">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="subtitle">2023-12-18 软件开发“白痴指数”</h1>
            <hr>

            <p>“白痴指数”，用来计算某个制成品的成本比其基本材料的成本高多少。软件开发“白痴指数”，用来计算计算机软件总成本比功能相关成本高多少。</p><ul><li>总成本（功能相关 + 非功能相关）：设计、开发、测试、部署、配置</li><li>功能相关：设计、开发</li></ul><p>测试、部署、配置等非功能相关的成本越高，项目水分越大。</p><h2 class="">为什么我突然想写《软件开发“白痴指数”》 ？</h2><p>今天我负责 release 一个新版本，需要配置一个 connection token，我花了大约 3~4 个小时才完成，差点没把我累死。😭</p><p>就是一个环境变量啊，干嘛搞得这么复杂呢？</p><p>美其名曰：架构安全。但是软件系统的安全是木桶效应，瓶颈不在最高的那块板，而是在最低的那块板。DevOps 搞得这么复杂，复杂到 DevOps developers 都不能完全理解和 100% 保证正确。最低的那块板就变成了维护如此复杂 DevOps 的人了。</p><blockquote class="tc-quote tc-big-quote"><p>“架构安全” 是什么垃圾？
推荐瞎折腾的人先看一下 <a class="tc-tiddlylink-external" href="https://zh.wikipedia.org/wiki/%E7%A4%BE%E4%BC%9A%E5%B7%A5%E7%A8%8B%E5%AD%A6" rel="noopener noreferrer" target="_blank">《社会工程学》</a> 是什么。
</p><cite>TJ 2023-12-18</cite></blockquote><p>简单记录一下我今天干了什么：</p><ol><li>使用 terraform 在 GCP 创建一个 Secret Manager，用来储存密钥。</li><li>在 k8s 中配置 secret-manager client，用来在读取密钥。</li><li>使用 terraform 为 k8s 配置 Secret Manager 权限，没有权限读不到密钥</li><li>更新 k8s container image tag，得到 k8s load-balancer 切换 pod。</li><li>使用 Postman 调用 health endpoint，并查看 container image tag 是否正确</li><li>查看 metabase 已确定 database migrations 正确执行</li><li>查看 datadog, Google Pub/Sub subscriptions, 等等周边服务</li></ol><p>关键是上面这些操作全都要通过 gitlab MR 和 CICD，美其名曰 GitOps，😂</p><ol><li>编写 yaml</li><li>提交 gitlab MR</li><li>请求 review</li><li>合并 MR，并等待 CICD</li><li>确认 CICD 结果</li></ol><p>我累死了，也傻掉了，太麻烦了。反复在 gitlab repositories 间横跳、提交 code、等待 review、执行 merge、继续等待，啊啊啊啊啊啊</p><blockquote class="tc-quote tc-big-quote"><p>GitOps 是什么垃圾？
等我休完年假回来，2024 年第一件事就是精简现在项目的 DevOps，不该用 git 的地方少扯版本管理。
infra as code 是继 micro-services 后又一个我粉转黑的架构技术。🤮
</p><cite>TJ 2023-12-18</cite></blockquote><h2 class="">最后再说一遍</h2><p>软件开发“白痴指数”，非功能相关的成本越高，项目水分越大。</p>
          </div>          
      </div>
  </div>
</div>     


<div class="copyright">
<strong>
<a href="https://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">
版权声明：自由转载-非商用-非衍生-保持署名（创意共享3.0许可证）
</a>
</strong>
</div>

<style>
.copyright {
  padding: 0.5rem 1rem;
  text-align: center;
}

.copyright:hover {
  opacity: 0.9;
}
</style>


]]></description>
      <pubDate>Mon, 18 December 2023 13:8:55 -00:00</pubDate>
			<guid>https://thaddeusjiang.com/2023-12-18-ruan-jian-kai-fa-bai-chi-zhi-shu</guid>      
   </item>

   <item>
      <title>2023-12-07 Install vs. Copy</title>
      <link>https://thaddeusjiang.com/2023-12-07-install-vs-copy</link>
			<description><![CDATA[
<div class="container">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><nav aria-label="main navigation" class="navbar" role="navigation"><p><div class="navbar-brand">
          <a href="./">
              <h1 class="title">ThaddeusJiang</h1>
              <p class="subtitle">I know I don't know.</p>
          </a>
      </div></p><p><div class="navbar-end mt-2 subtitle is-5"><a class="tc-tiddlylink tc-tiddlylink-shadow tc-tiddlylink-resolves" href="./#blog">Blogs</a> | <a class="tc-tiddlylink-external" href="https://thaddeusjiang.com/wiki" rel="noopener noreferrer" target="_blank">Wiki</a> | <a class="tc-tiddlylink-external" href="https://thaddeusjiang.com/rss.xml" rel="noopener noreferrer" target="_blank">RSS</a> </div></p></nav></div>
</div>


<div class="container mt-4">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="subtitle">2023-12-07 Install vs. Copy</h1>
            <hr>

            <p>对于依赖，应该选择使用包管理进行安装，还是复制粘贴代码？</p><p>我的心路历程：</p><ul><li>最开始，肯定是使用 npm <code>install</code> 搞定一切，安装 mui 和 antd 没商量。 😄</li><li>然后，tailwindcss 生态的组件库和 demo 缘来缘多，尤其是 shadcn/ui 出来以后，我开始使用 <code>copy &amp; paste</code> 了。😜</li><li>最近半年完全不写 UI，全都是和 Data 打交道，肯定要 <code>install</code> 啊，copy &amp; paste 的代码没过几周就面目全非了。💩</li></ul><h1 class="">现在阶段的判断：</h1><ul><li>不需要修改默认行为，install</li></ul><p>例如：一些用于数据处理的函数，lodash, dayjs 等等</p><ul><li>需要修改默认行为，copy and paste</li></ul><p>例如：UI 组件  shadcn/ui，业务流程手脚架代码 v0 等等</p><h1 class="">install vs. copy</h1><p>install 优点：</p><ol><li>可以进行版本检查，及时跟上依赖的更新以及一些补丁。</li></ol><p>install 缺点：</p><ol><li>不擅长删减和自由组合默认行为。（但是可以通过继承和扩展增加功能，即：擅长加，不擅长减</li></ol><p>copy 优点：</p><ol><li>可以根据需要删减和自由组合，可能性和自由度更大。</li></ol><p>copy 缺点：</p><ol><li>版本升级不便，容易和依赖原作脱钩。</li></ol><p>refs:</p><ul><li><a class="tc-tiddlylink-external" href="https://mui.com/" rel="noopener noreferrer" target="_blank">https://mui.com/</a></li><li><a class="tc-tiddlylink-external" href="https://ui.shadcn.com/" rel="noopener noreferrer" target="_blank">https://ui.shadcn.com/</a></li><li><a class="tc-tiddlylink-external" href="https://lodash.com/" rel="noopener noreferrer" target="_blank">https://lodash.com/</a></li><li><a class="tc-tiddlylink-external" href="https://day.js.org/" rel="noopener noreferrer" target="_blank">https://day.js.org/</a></li><li><a class="tc-tiddlylink-external" href="https://v0.dev/" rel="noopener noreferrer" target="_blank">https://v0.dev/</a></li></ul>
          </div>          
      </div>
  </div>
</div>     


<div class="copyright">
<strong>
<a href="https://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">
版权声明：自由转载-非商用-非衍生-保持署名（创意共享3.0许可证）
</a>
</strong>
</div>

<style>
.copyright {
  padding: 0.5rem 1rem;
  text-align: center;
}

.copyright:hover {
  opacity: 0.9;
}
</style>


]]></description>
      <pubDate>Thu, 7 December 2023 9:20:30 -00:00</pubDate>
			<guid>https://thaddeusjiang.com/2023-12-07-install-vs-copy</guid>      
   </item>

</channel>
</rss>
