<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   <title>ThaddeusJiang's Blog</title>
   <link>https://thaddeusjiang.com</link>
   <description></description>
   <item>
      <title>2024-09-30 I Analyzed My Browser History</title>
      <link>https://thaddeusjiang.com/2024-09-30-i-analyzed-my-browser-history</link>
			<description><![CDATA[
<div class="container mt-4">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2"><nav aria-label="main navigation" class="navbar" role="navigation"><p><div>
        <h1 class="brand">
          <a class="title" href="./">ThaddeusJiang's Blog</a>
        </h1>
        <p class="subtitle is-size-6 is-italic"></p>
      </div>
      
      <div class="navbar-end mt-2">
        <a class="tc-tiddlylink tc-tiddlylink-shadow tc-tiddlylink-resolves" href="./#blog">Blog</a> | <a class="tc-tiddlylink tc-tiddlylink-missing" href="./#wiki">Wiki</a> | <a class="tc-tiddlylink-external" href="https://thaddeusjiang.com/rss.xml" rel="noopener noreferrer" target="_blank">RSS</a>
      </div></p></nav></div>
</div>


<div class="container">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <h1 class="title">2024-09-30 I Analyzed My Browser History</h1>
          <hr>

          <div class="content">
            <p>心血来潮，我尝试分析了我的浏览器记录，发现了一点点“不得了的”事情。</p><blockquote><div>TL;DR</div></blockquote><ul><li>我有 411k 访问记录，只有 27k 主动访问，占比仅 5%</li><li>我竟然访问过 63 个 Google 提供的服务</li><li>Open Source in <a class="tc-tiddlylink-external" href="https://github.com/ThaddeusJiang/history_analytics" rel="noopener noreferrer" target="_blank">https://github.com/ThaddeusJiang/history_analytics</a></li></ul><p>正文：</p><p>首先，分析的数据来自我的 Arc Browser，我从 2023 年开始使用 Arc Browser 作为主力浏览器，之前的数据在 Brave Browser 中，我这次没有分析旧的浏览器记录。</p><p>我分析了 411,345 条访问记录，其中包含 100,585 URLs 和 27,687 次主动访问；虽然我感觉自己已经很久没有访问 Google 搜索了，但是从数据上看 Google 依然是我使用最多的搜索引擎，占全部访问量的 7.23%。</p><blockquote><div>哈哈哈 和我的记忆有一点点出入。</div></blockquote><p><img class=" tc-image-loading" src="https://i.gyazo.com/4c20064b7de83e1b16a6d19f9b5ab9ef.png"></p><p>在我全部访问记录里，访问量最大的服务/域名依次是</p><ul><li>github.com</li><li>google.com</li><li>localhost</li><li>twitter.com</li><li>...</li></ul><h2 class="">GitHub</h2><p>从数据上看，一共访问 GitHub 92,340 次，查看过 2,271 Repositories。最近工作的 repository 访问量一骑绝尘，接下来就是我的个人项目了。</p><p><img class=" tc-image-loading" src="https://i.gyazo.com/9f9d7ec1b9ad3a45db7126d22874b4a7.png"></p><p>排除 Personal and Work Projects，我访问最多的 open source repositories 分别是</p><ol><li>epic-stack</li><li>ex_doc</li><li>conform</li><li>blues-stack</li><li>zed</li><li>react-google-maps</li><li>...</li></ol><p>其中 ex_doc, surface, ex_gram 是 elixir 生态。很高兴自己越来越多的使用 elixir 了。</p><h2 class="">Google</h2><p>我一共访问 Google 相关服务 78,999 次，让我感到震惊的是我竟然使用了 Google 63 种网络服务，🤯</p><blockquote><div>我甚至不知道 Google 有这么多服务，😂</div></blockquote><p><img class=" tc-image-loading" src="https://i.gyazo.com/692754ba6797359b330a4562cf507f99.png"></p><h2 class="">Localhost</h2><p>localhost 没什么可说的，作为程序员，访问多很合理。</p><p>3000 是 JS web frameworks 常用的端口，8000 系是 server 常用端口。</p><p><img class=" tc-image-loading" src="https://i.gyazo.com/8414f853e694d80aeeab574bc0c94b98.png"></p><h2 class="">Twitter</h2><p>一共访问 Twitter 21,953 次，其中主动访问 2,304 次。</p><p>我分析了我常关注的推油，我看过 1,327 位推油的推文，
最常关注的依次是 yihong0618, mieisgood, disksing, nishuang 等。</p><blockquote><div>其实 Twitter 数据很有意思，有时间的时候，我还想知道自己访问 twitter 的月度次数，星期分布，时间分布等等。</div></blockquote><p><img class=" tc-image-loading" src="https://i.gyazo.com/6d520eb16f16b215ef94273f84a7a0a7.png"></p><h2 class="">Others</h2><p>在分析浏览记录时，我意识到对于大多数网友或者程序员来说，可能大家访问 top10 的服务都大同小异。或许去除最最常见的服务，top 11~20 才能反映出大家的不同。</p><p>我的 top 11 ~ 20</p><ul><li>notion.so</li><li>vercel.com</li><li>www.aier.com</li><li>datadoghq.com</li><li>accounts.google.com </li><li>atlassian.net</li><li>fly.io</li><li>youtube.com</li><li>remix.run</li><li>openai.com</li></ul><h2 class="">最后</h2><p>遇到的几个小问题：</p><p>1. Chromium 系列浏览器 History 使用 SQLite 存储浏览记录，使用自增主键，导致合并不同浏览器的记录不方便，容易出现主键关联错误。</p><p>所以，我没有暂时没有合并我的多个浏览器的历史记录。</p><p>2. SQLite 默认不支持 RegExp，处理 URL 麻烦。</p><p>所以，我使用 pgloader 将 SQLite 导入到 PostgreSQL 才进行分析。</p><p>3. 通过 Metabase UI 编写 Questions 生成的查询代码难以阅读。</p><p>所以，我是编写 SQL 来分析。SQL 对 developer 友好；UI 对一般用户友好。</p><p>我使用的工具：</p><ul><li>sqlite3</li><li>psql</li><li><a class="tc-tiddlylink-external" href="https://pgloader.io/" rel="noopener noreferrer" target="_blank">https://pgloader.io/</a></li><li><a class="tc-tiddlylink-external" href="https://www.metabase.com/" rel="noopener noreferrer" target="_blank">https://www.metabase.com/</a></li></ul>
          </div>          
      </div>
  </div>
</div>     


<div class="copyright">
<strong>
<a href="https://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">
版权声明：自由转载-非商用-非衍生-保持署名（创意共享3.0许可证）
</a>
</strong>
</div>

<style>
.copyright {
  padding: 0.5rem 1rem;
  text-align: center;
}

.copyright:hover {
  opacity: 0.9;
}
</style>


]]></description>
      <pubDate>Mon, 30 September 2024 5:49:5 -00:00</pubDate>
			<guid>https://thaddeusjiang.com/2024-09-30-i-analyzed-my-browser-history</guid>      
   </item>

   <item>
      <title>2024-09-25 Just use PostgreSQL</title>
      <link>https://thaddeusjiang.com/2024-09-25-just-use-postgresql</link>
			<description><![CDATA[
<div class="container mt-4">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2"><nav aria-label="main navigation" class="navbar" role="navigation"><p><div>
        <h1 class="brand">
          <a class="title" href="./">ThaddeusJiang's Blog</a>
        </h1>
        <p class="subtitle is-size-6 is-italic"></p>
      </div>
      
      <div class="navbar-end mt-2">
        <a class="tc-tiddlylink tc-tiddlylink-shadow tc-tiddlylink-resolves" href="./#blog">Blog</a> | <a class="tc-tiddlylink tc-tiddlylink-missing" href="./#wiki">Wiki</a> | <a class="tc-tiddlylink-external" href="https://thaddeusjiang.com/rss.xml" rel="noopener noreferrer" target="_blank">RSS</a>
      </div></p></nav></div>
</div>


<div class="container">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <h1 class="title">2024-09-25 Just use PostgreSQL</h1>
          <hr>

          <div class="content">
            <p>一个小例子解释为什么我默认选择 PostgreSQL 而不是 SQLite。</p><blockquote><div>为什么要解释？</div><div>答：local-first 最近又流行起来了，JS 社区的 Kent C. Dodds 和 Rails 社区的 DHH 都推荐使用 SQLite。但是日常工作中，我感觉 SQLite 经常背刺我。</div></blockquote><h2 class="">需求：从 url 中提取 port，例如：<a class="tc-tiddlylink-external" href="http://localhost:3000/setup" rel="noopener noreferrer" target="_blank">http://localhost:3000/setup</a> -&gt; 3000</h2><pre class="hljs"><code class="sql hljs"># PostgreSQL
<span class="hljs-keyword">SELECT</span>
    <span class="hljs-built_in">substring</span>(url <span class="hljs-keyword">FROM</span> <span class="hljs-string">&#x27;:(\d+)&#x27;</span>) <span class="hljs-keyword">AS</span> port
<span class="hljs-keyword">FROM</span>
    (<span class="hljs-keyword">SELECT</span> <span class="hljs-string">&#x27;http://localhost:3000/setup&#x27;</span> <span class="hljs-keyword">AS</span> url) <span class="hljs-keyword">AS</span> t;
</code></pre><pre class="hljs"><code class="sql hljs"># SQLite
<span class="hljs-keyword">SELECT</span>
    substr(url, instr(url, <span class="hljs-string">&#x27;:&#x27;</span>) <span class="hljs-operator">+</span> <span class="hljs-number">1</span>, instr(url, <span class="hljs-string">&#x27;/&#x27;</span>, instr(url, <span class="hljs-string">&#x27;:&#x27;</span>)) <span class="hljs-operator">-</span> instr(url, <span class="hljs-string">&#x27;:&#x27;</span>) <span class="hljs-operator">-</span> <span class="hljs-number">1</span>) <span class="hljs-keyword">AS</span> port
<span class="hljs-keyword">FROM</span>
    (<span class="hljs-keyword">SELECT</span> <span class="hljs-string">&#x27;http://localhost:3000/setup&#x27;</span> <span class="hljs-keyword">AS</span> url) <span class="hljs-keyword">AS</span> t;</code></pre><p>对比之下，Postgres 的 substring 比 SQLite 的 substr 简单太多了，开箱即用的感觉真好。</p><h2 class="">另外</h2><p>我今天发现 Metabase 的 regexextract 表达式不支持 SQLite。🥲</p><p>Doc: <a class="tc-tiddlylink-external" href="https://www.metabase.com/docs/latest/questions/query-builder/expressions-list#regexextract" rel="noopener noreferrer" target="_blank">https://www.metabase.com/docs/latest/questions/query-builder/expressions-list#regexextract</a></p><h2 class="">人生苦短，我用 Postgres。</h2><p>refs:</p><ul><li><a class="tc-tiddlylink-external" href="https://www.epicweb.dev/why-you-should-probably-be-using-sqlite" rel="noopener noreferrer" target="_blank">https://www.epicweb.dev/why-you-should-probably-be-using-sqlite</a></li><li><a class="tc-tiddlylink-external" href="https://x.com/search?f=tweets&amp;q=sqlite+from:dhh" rel="noopener noreferrer" target="_blank">https://x.com/search?f=tweets&amp;q=sqlite+from:dhh</a></li><li><a class="tc-tiddlylink-external" href="https://x.com/search?q=Just%20use%20PostgreSQL" rel="noopener noreferrer" target="_blank">https://x.com/search?q=Just%20use%20PostgreSQL</a></li></ul>
          </div>          
      </div>
  </div>
</div>     


<div class="copyright">
<strong>
<a href="https://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">
版权声明：自由转载-非商用-非衍生-保持署名（创意共享3.0许可证）
</a>
</strong>
</div>

<style>
.copyright {
  padding: 0.5rem 1rem;
  text-align: center;
}

.copyright:hover {
  opacity: 0.9;
}
</style>


]]></description>
      <pubDate>Wed, 25 September 2024 9:36:29 -00:00</pubDate>
			<guid>https://thaddeusjiang.com/2024-09-25-just-use-postgresql</guid>      
   </item>

   <item>
      <title>2024-09-18 JS wretch</title>
      <link>https://thaddeusjiang.com/2024-09-18-js-wretch</link>
			<description><![CDATA[
<div class="container mt-4">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2"><nav aria-label="main navigation" class="navbar" role="navigation"><p><div>
        <h1 class="brand">
          <a class="title" href="./">ThaddeusJiang's Blog</a>
        </h1>
        <p class="subtitle is-size-6 is-italic"></p>
      </div>
      
      <div class="navbar-end mt-2">
        <a class="tc-tiddlylink tc-tiddlylink-shadow tc-tiddlylink-resolves" href="./#blog">Blog</a> | <a class="tc-tiddlylink tc-tiddlylink-missing" href="./#wiki">Wiki</a> | <a class="tc-tiddlylink-external" href="https://thaddeusjiang.com/rss.xml" rel="noopener noreferrer" target="_blank">RSS</a>
      </div></p></nav></div>
</div>


<div class="container">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <h1 class="title">2024-09-18 JS wretch</h1>
          <hr>

          <div class="content">
            <p>关于 JS HTTP request client library，现阶段我推荐 wretch。</p><blockquote><div>我的技术栈变化：wretch &lt;- fetch &lt;- node-fetch &lt;- axios</div></blockquote><h2 class="">我推荐 wretch 的理由：</h2><ol><li>适当的封装，不需要编写大量业务无关的 boilerplate code</li><li>统一实现的请求格式，如：请求 application/json, multipart/form-data, application/x-www-form-urlencoded</li><li>开箱即用的高级功能，如：retry, delay, abort 等等</li></ol><h2 class="">技术栈变化简述</h2><ul><li>axios: ES 提出 fetch() API 前，只记得 axios，XMLHttpRequest 我已经不记得了。</li><li>node-fetch: ES 提出 fetch() API 后，但是 Node.js 没有实现出来</li><li>fetch: Node.js 18 发布 fetch() API 后</li><li>wretch: 写 fetch() 太疲劳了，寻找简单的工具</li></ul><h2 class="">1. 什么是“不需要编写大量业务无关的 boilerplate code”</h2><p>fetch 需要手动配置 http methods, headers and body</p><pre><code>fetch("endpoint", {
  method: "POST",
  headers: { "Content-Type": "application/json" },
  body: JSON.stringify({ "hello": "world" })
}).then(response =&gt; /* ... */)</code></pre><p>fetch() 需要手动处理 status，堆叠 if-else</p><pre class="hljs"><code class="js hljs"><span class="hljs-comment">// 😮‍💨</span>
<span class="hljs-title function_">fetch</span>(<span class="hljs-string">&quot;anything&quot;</span>)
  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> {
    <span class="hljs-keyword">if</span>(!response.<span class="hljs-property">ok</span>) {
      <span class="hljs-keyword">if</span>(response.<span class="hljs-property">status</span> === <span class="hljs-number">404</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Not found&quot;</span>)
      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(response.<span class="hljs-property">status</span> === <span class="hljs-number">401</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Unauthorized&quot;</span>)
      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(response.<span class="hljs-property">status</span> === <span class="hljs-number">418</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;I&#x27;m a teapot !&quot;</span>)
      <span class="hljs-keyword">else</span> <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Other error&quot;</span>)
    }
    <span class="hljs-keyword">else</span> <span class="hljs-comment">// ...</span>
  })
  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> <span class="hljs-comment">/* ... */</span>)
  .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> { <span class="hljs-comment">/* ... */</span> })</code></pre><blockquote><div>而这些都是业务无关的代码，仅仅是为了配合 fetch() API 的使用。</div></blockquote><p>wretch 封装了这些业务无关的代码，让你专注于业务逻辑。</p><pre class="hljs"><code class="js hljs"><span class="hljs-title function_">wretch</span>(<span class="hljs-string">&quot;endpoint&quot;</span>)
  .<span class="hljs-title function_">post</span>({ <span class="hljs-string">&quot;hello&quot;</span>: <span class="hljs-string">&quot;world&quot;</span> })
  .<span class="hljs-title function_">notFound</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> { <span class="hljs-comment">/* ... */</span> })
  .<span class="hljs-title function_">unauthorized</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> { <span class="hljs-comment">/* ... */</span> })
  .<span class="hljs-title function_">error</span>(<span class="hljs-number">418</span>, <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> { <span class="hljs-comment">/* ... */</span> })
  .<span class="hljs-title function_">res</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> <span class="hljs-comment">/* ... */</span>)
  .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> { <span class="hljs-comment">/* uncaught errors */</span> })</code></pre><h2 class="">2. 什么是“统一实现的请求格式”</h2><p>wretch 无论是发送 json 或 form-data 亦或 x-www-form-urlencoded 都可以直接调用 JS object 对象。</p><blockquote><div>So Sweet 🥰</div></blockquote><pre class="hljs"><code class="js hljs"><span class="hljs-keyword">const</span> form = { <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: { <span class="hljs-attr">c</span>: <span class="hljs-number">2</span> } };

<span class="hljs-comment">// 📤 application/json</span>
<span class="hljs-title function_">wretch</span>(<span class="hljs-string">&quot;...&quot;</span>).<span class="hljs-title function_">post</span>(form)

<span class="hljs-comment">// 📤 multipart/form-data</span>
<span class="hljs-keyword">import</span> <span class="hljs-title class_">FormDataAddon</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;wretch/addons/formData&quot;</span>
<span class="hljs-title function_">wretch</span>(<span class="hljs-string">&quot;...&quot;</span>).<span class="hljs-title function_">addon</span>(<span class="hljs-title class_">FormDataAddon</span>).<span class="hljs-title function_">formData</span>(form).<span class="hljs-title function_">post</span>();

<span class="hljs-comment">// 📤 application/x-www-form-urlencoded</span>
<span class="hljs-keyword">import</span> <span class="hljs-title class_">FormUrlAddon</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;wretch/addons/formUrl&quot;</span>
<span class="hljs-title function_">wretch</span>(<span class="hljs-string">&quot;...&quot;</span>).<span class="hljs-title function_">addon</span>(<span class="hljs-title class_">FormUrlAddon</span>).<span class="hljs-title function_">formUrl</span>(form).<span class="hljs-title function_">post</span>();</code></pre><p>fetch()</p><ol><li>发送 json 需要 <code>JSON.stringify();</code></li><li>发送 form-data 需要构建 <code>new FormData();</code></li><li>发送 x-www-form-urlencoded 需要 <code>new URLSearchParams();</code></li></ol><blockquote><div>Why? 😵‍💫</div></blockquote><pre class="hljs"><code class="js hljs"><span class="hljs-keyword">const</span> data = { <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: { <span class="hljs-attr">c</span>: <span class="hljs-number">2</span> } }

<span class="hljs-comment">// 📤 application/json</span>
<span class="hljs-title function_">fetch</span>(<span class="hljs-string">&quot;endpoint&quot;</span>, {
  <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;POST&quot;</span>,
  <span class="hljs-attr">headers</span>: { <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/json&quot;</span> }, <span class="hljs-comment">// 1️⃣</span>
  <span class="hljs-attr">body</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data) <span class="hljs-comment">// 2️⃣</span>
}).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> <span class="hljs-comment">/* ... */</span>)

<span class="hljs-comment">// 📤 multipar/form-data</span>
<span class="hljs-keyword">const</span> formData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FormData</span>(); <span class="hljs-comment">// 1️⃣</span>
formData.<span class="hljs-title function_">append</span>(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">1</span>);
formData.<span class="hljs-title function_">append</span>(<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>({ <span class="hljs-attr">c</span>: <span class="hljs-number">2</span>})); <span class="hljs-comment">// 2️⃣</span>

<span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;https://example.com/submit&#x27;</span>, {
    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,
    <span class="hljs-attr">body</span>: formData
}).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> <span class="hljs-comment">/* ... */</span>)

<span class="hljs-comment">// 📤 application/x-www-form-urlencoded</span>
<span class="hljs-keyword">const</span> data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">URLSearchParams</span>(); <span class="hljs-comment">// 1️⃣</span>
data.<span class="hljs-title function_">append</span>(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">1</span>);
data.<span class="hljs-title function_">append</span>(<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>({ <span class="hljs-attr">c</span>: <span class="hljs-number">2</span>})); <span class="hljs-comment">// 2️⃣</span>

<span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;https://example.com/submit&#x27;</span>, {
    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,
    <span class="hljs-attr">headers</span>: {
        <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span> <span class="hljs-comment">// 3️⃣</span>
    },
    <span class="hljs-attr">body</span>: data.<span class="hljs-title function_">toString</span>()() <span class="hljs-comment">// 4️⃣</span>
}).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> <span class="hljs-comment">/* ... */</span>)</code></pre><h2 class="">3. wretch 提供的“开箱即用的高级功能”</h2><p>wretch 实现 retry 功能 So Easy</p><pre class="hljs"><code class="js hljs"><span class="hljs-keyword">import</span> { retry } <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;wretch/middlewares&quot;</span>

<span class="hljs-keyword">const</span> w = <span class="hljs-title function_">wretch</span>().<span class="hljs-title function_">middlewares</span>([<span class="hljs-title function_">retry</span>()])</code></pre><p>fetch() 实现 retry 功能，So Hard</p><pre class="hljs"><code class="js hljs"><span class="hljs-comment">// generated by ChatGPT</span>
<span class="hljs-keyword">function</span> <span class="hljs-title function_">fetchWithRetry</span>(<span class="hljs-params">url, options = {}, retries = <span class="hljs-number">3</span>, delay = <span class="hljs-number">1000</span></span>) {
    <span class="hljs-keyword">return</span> <span class="hljs-title function_">fetch</span>(url, options)
        .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> {
            <span class="hljs-keyword">if</span> (!response.<span class="hljs-property">ok</span>) {
                <span class="hljs-keyword">if</span> (retries &gt; <span class="hljs-number">0</span>) {
                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Retrying... <span class="hljs-subst">${retries}</span> attempts left.`</span>);
                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> {
                        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">resolve</span>(<span class="hljs-title function_">fetchWithRetry</span>(url, options, retries - <span class="hljs-number">1</span>, delay)), delay);
                    });
                } <span class="hljs-keyword">else</span> {
                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Max retries reached, fetch failed.&#x27;</span>);
                }
            }
            <span class="hljs-keyword">return</span> response.<span class="hljs-title function_">json</span>(); <span class="hljs-comment">// 处理返回的响应体（假设是 JSON 格式）</span>
        })
        .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> {
            <span class="hljs-keyword">if</span> (retries &gt; <span class="hljs-number">0</span>) {
                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Retrying due to error: <span class="hljs-subst">${error.message}</span>, <span class="hljs-subst">${retries}</span> attempts left.`</span>);
                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> {
                    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">resolve</span>(<span class="hljs-title function_">fetchWithRetry</span>(url, options, retries - <span class="hljs-number">1</span>, delay)), delay);
                });
            } <span class="hljs-keyword">else</span> {
                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Max retries reached, fetch failed: &#x27;</span> + error.<span class="hljs-property">message</span>);
            }
        });
}

<span class="hljs-comment">// 调用</span>
<span class="hljs-title function_">fetchWithRetry</span>(<span class="hljs-string">&#x27;https://example.com/api&#x27;</span>, { <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;GET&#x27;</span> })
    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Success:&#x27;</span>, data))
    .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Error:&#x27;</span>, error));
</code></pre><p>更不用提 delay abort 等高级功能了。</p><h2 class="">我发现的 wretch 的一点点不足</h2><ol><li>progress 特性仅支持 download <a class="tc-tiddlylink-external" href="https://github.com/elbywan/wretch/issues/225#issuecomment-2105633417" rel="noopener noreferrer" target="_blank">https://github.com/elbywan/wretch/issues/225#issuecomment-2105633417</a></li><li>没有开箱即用 Stream handler</li></ol><p>refs</p><ul><li><a class="tc-tiddlylink-external" href="https://github.com/elbywan/wretch" rel="noopener noreferrer" target="_blank">https://github.com/elbywan/wretch</a></li><li><a class="tc-tiddlylink-external" href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API" rel="noopener noreferrer" target="_blank">https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API</a></li><li><a class="tc-tiddlylink-external" href="https://github.com/node-fetch/node-fetch" rel="noopener noreferrer" target="_blank">https://github.com/node-fetch/node-fetch</a></li><li><a class="tc-tiddlylink-external" href="https://github.com/axios/axios" rel="noopener noreferrer" target="_blank">https://github.com/axios/axios</a></li><li><a class="tc-tiddlylink-external" href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest" rel="noopener noreferrer" target="_blank">https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest</a></li></ul>
          </div>          
      </div>
  </div>
</div>     


<div class="copyright">
<strong>
<a href="https://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">
版权声明：自由转载-非商用-非衍生-保持署名（创意共享3.0许可证）
</a>
</strong>
</div>

<style>
.copyright {
  padding: 0.5rem 1rem;
  text-align: center;
}

.copyright:hover {
  opacity: 0.9;
}
</style>


]]></description>
      <pubDate>Wed, 18 September 2024 7:45:32 -00:00</pubDate>
			<guid>https://thaddeusjiang.com/2024-09-18-js-wretch</guid>      
   </item>

</channel>
</rss>
