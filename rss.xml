<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   <title>TJ (Thaddeus Jiang)</title>
   <link>https://thaddeusjiang.com</link>
   <description>专注；分享；寻找。</description>
   <item>
      <title>2023-08-22 error handling</title>
      <link>https://thaddeusjiang.com/2023-08-22-error-handling</link>
			<description><![CDATA[
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4">
      <nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a href="./">
                <h1 class="title">TJ (Thaddeus Jiang)</h1>
                <p class="subtitle">专注；分享；寻找。</p>
            </a>
        </div>
     </nav>
    </div>
  </div>


<div class="container mt-4">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="subtitle">2023-08-22 error handling</h1>
            <hr>

            <blockquote><div>这是我的个人风格，不奢求成为主流，只希望将来有机会合作的朋友能事先了解我的个人风格。</div></blockquote><p>首先，对于 error handling，我的风格碰巧和 Ruby 作者 Matz 一致，虽然是巧合，但是增加了我的信心。</p><p>先说 error handling 需要解决哪些问题？</p><ol><li>不能放任 error 使其导致程序崩溃</li><li>不能让 error handling 多到影响原本的功能</li></ol><p>我常用的编程语言有 TypeScript 和 Elixir，Elixir 不用说了，我很喜欢它的 error handling 机制。</p><p>我主要分享一下我自己使用 TypeScript 时的 error handling 风格。</p><h3 class="">1. 80% 的情况下，我会直接使用 try-catch 处理 Promise rejected 状态，不用其他奇技淫巧</h3><h3 class="">2. 我会尽量避免 Nested try blocks，形如：</h3><pre class="hljs"><code class="js hljs"><span class="hljs-keyword">try</span> {
  <span class="hljs-keyword">try</span> {
    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;oops&quot;</span>);
  } <span class="hljs-keyword">finally</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;finally&quot;</span>);
  }
} <span class="hljs-keyword">catch</span> (ex) {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;outer&quot;</span>, ex.<span class="hljs-property">message</span>);
}</code></pre><p>为了避免嵌套 try blocks，我会参考 Elixir/golang/Swift 的方式返回一个数组包含 [isError, data/error]</p><p>形如：</p><pre class="hljs"><code class="js hljs"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">doSomething</span>(<span class="hljs-params"></span>) {
  <span class="hljs-keyword">try</span> {
    <span class="hljs-comment">// await ...</span>
    <span class="hljs-keyword">return</span> [<span class="hljs-literal">false</span>, data]
  } <span class="hljs-keyword">catch</span>(error) {
    <span class="hljs-keyword">return</span> [<span class="hljs-literal">true</span>, error]
  }
}

<span class="hljs-keyword">const</span> [isError, data] = <span class="hljs-keyword">await</span> <span class="hljs-title function_">doSomething</span>()
<span class="hljs-keyword">if</span>(isError) {
  <span class="hljs-comment">// data is error</span>
  <span class="hljs-comment">// fallback</span>
}

<span class="hljs-comment">// normal data</span>
<span class="hljs-comment">// next </span></code></pre><p>supabase-js 和 zod 也采用了类似的风格，只是细节不太一样，我会在引用出分享链接。</p><h3 class="">3. 我不会强迫症似的穷举所有的 Exception 类型</h3><pre class="hljs"><code class="js hljs"><span class="hljs-comment">// good</span>
<span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">doSomething</span>(<span class="hljs-params"></span>): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-title class_">Data</span>&gt;

<span class="hljs-comment">// bad</span>
<span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">doSomething</span>(<span class="hljs-params"></span>): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-title class_">Data</span> 
      | <span class="hljs-title class_">RpcException</span>
      | <span class="hljs-title class_">ChargeFeeHasNotBeenPaidException</span>
      | <span class="hljs-title class_">BadRequestException</span>
      | <span class="hljs-title class_">UnusableFacilityException</span>
      | <span class="hljs-title class_">NotBusinessDayException</span>&gt;</code></pre><p>当然，npm package, public library 除外。</p><h3 class="">4. 我不会让 Exception 不能导致整个 App 崩溃</h3><p>例如 MVC web server app 的 exception 最好控制在 controller 层，不要因为个别的 API 异常导致整个 App 崩溃或者重启。</p><p>类似 Remix.run 这样的框架甚至可以将 exception 控制在 component 级别，不过我不过分强求，只要别让整个 App 崩溃就行。</p><h3 class="">5. 我会适当记录 Exception log</h3><p>refs</p><ul><li>supabse-js error handling</li><li>zod.dev error handling</li></ul>
          </div>          
      </div>
  </div>
</div>     


]]></description>
      <pubDate>Mon, 21 August 2023 15:22:8 -00:00</pubDate>
			<guid>https://thaddeusjiang.com/2023-08-22-error-handling</guid>      
   </item>

   <item>
      <title>2023-08-15 未来程序员也可以是人间国宝</title>
      <link>https://thaddeusjiang.com/2023-08-15-wei-lai-cheng-xu-yuan-ye-ke-yi-shi-ren-jian-guo-bao</link>
			<description><![CDATA[
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4">
      <nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a href="./">
                <h1 class="title">TJ (Thaddeus Jiang)</h1>
                <p class="subtitle">专注；分享；寻找。</p>
            </a>
        </div>
     </nav>
    </div>
  </div>


<div class="container mt-4">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="subtitle">2023-08-15 未来程序员也可以是人间国宝</h1>
            <hr>

            <p>人间国宝是日本对一些传统手艺人的称呼，通常是指一些传递技艺的传承者。在日本，人间国宝的作品很受欢迎，大家都很喜欢，政府也有一定的辅助金扶持，所以他们的生活水平还不错。很羡慕他们，他们基本上是在做自己喜欢的工作，十年、几十年如一日的从事自己喜欢的工作，并且没有职场的各种压力。不需要考虑办公室政治，不需要年复一年的定目标、做计划、没有 KPI，没有 OKR。</p><p>我想未来程序员可以成为人间国宝，受到一部分人的推崇，国家和政府出钱保护这门手艺。程序员不需要和机器竞争，不用在生产效率和标准化上疯狂内圈，程序员只需要保持自己的特色，依据客户的订单编写程序即可。</p><p>个人思考，如何才能在 2050 年成为人间国宝？</p><ol><li>有别于工业生产的风格，成果是艺术品，可以赏玩。</li><li>即使不用工业生产也能保证质量稳定，有一定的实际价值。</li><li>稀有</li></ol>
          </div>          
      </div>
  </div>
</div>     


]]></description>
      <pubDate>Tue, 15 August 2023 6:56:45 -00:00</pubDate>
			<guid>https://thaddeusjiang.com/2023-08-15-wei-lai-cheng-xu-yuan-ye-ke-yi-shi-ren-jian-guo-bao</guid>      
   </item>

   <item>
      <title>2023-08-13 《ReSkilling》读后感</title>
      <link>https://thaddeusjiang.com/2023-08-13-reskilling-du-hou-gan</link>
			<description><![CDATA[
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4">
      <nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a href="./">
                <h1 class="title">TJ (Thaddeus Jiang)</h1>
                <p class="subtitle">专注；分享；寻找。</p>
            </a>
        </div>
     </nav>
    </div>
  </div>


<div class="container mt-4">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="subtitle">2023-08-13 《ReSkilling》读后感</h1>
            <hr>

            <p>日本的盂兰盆节假期，因为台风没有远行，看完的第一本书《ReSkilling》。虽然书中很多内容我并不是很同意，但是也有一些读后感想记录一下。</p><p>很久没有写 blog 了，😂
其实这段时间也写了很多内容，只是没有整理到 blog 而已，将来有时间分享出来。</p><p>言归正传，我谈谈自己对于《ReSkilling》这本书的读后感。</p><p>首先，我很喜欢这本书的标题，感觉和“终身学习”一样，是一个积极的词，对人生有益。</p><p>其次，我觉得这本书开头几章写的不错。简明扼要地介绍了书名的由来，以及世界范围和日本国内 ReSkilling 的发展和现状。作者有美国留学经历，并一直供职于跨国企业，所以他的资料收集和总结能力非常好，客观事实的论述比较有信服力。</p><p>但是我觉得这本书在实操方向价值不高，作者过度夸大了计算机技术的作用，书中很多事例和方案都偏向让非 IT 从业人员自学 IT 知识。我并不是反对非 IT 从业人员学习 IT 知识，但是我觉得没有必要所有人都懂的如何配置网络，没有必要所有人都知道 DNS 是什么，更没有必要学习 HTML, JavaScript, CSS 之类的 web UI 开发技术。</p><p>其实很多优秀的人并不是什么都会的全能型选手，例如：巴菲特不懂网络技术，Linus 也不会开发 Web UI，但是他们都是世界级专家。术业有专攻，有时候遇到自己不擅长的领域合理委外才是更聪明的做法。</p><p>书中提到工作多年的社会人如何新技能的几种方法我觉得还挺有意思的，一种是“技能交换”，另外一种是“拜师学艺”。</p><p>技能交换，即：“请教我xxx，作为回报我可以教你yyy”。这个挺有意思，无形中形成了一个学习小组，虽然对于有快速学习能力并且有强大自制力的人来说这种形式可能很低效，但是我很喜欢。其实我愿意尝试这种形式，并且我认为我有能力快速教会别人一些技术，例如：如何使用 React 开发网页，如何使用 RDB 管理数据，如何 self host 一个开源的论坛等等。如果有人能教一些 TiddlyWiki 或者 ESP32 的开发技巧，我还是挺愿意进行技能交换的。</p><p>拜师学艺，即：“到某人身边学习”。作者给的方法是多去线下活动混脸熟，然后找机会多交流，并且从实际问题出发请教对方。这显然有点 old school 了，但是我喜欢。我觉得目前学习很多入门级技能的门槛的确变低了，很多内容 YouTube、blog，甚至抖音上都能学会，但是精通一门技术的门槛却变高了，大家不愿意请教他人了，大家不愿意在实际项目中慢慢体会过程了，大家变得自负以为自己看看视频看看书就能学会任何内容了。我一直有一个想法，非常个人，不喜勿喷。我认为：经验是无法通过任何语言或文字学会的，必须亲身体会。借用一个例子：我说：青春期第一次牵暗恋女生的手时是一种触电的感觉。如果你没有亲身体会，你是无法理解所谓“触电”是一种什么感觉的。说不定你以为是一种疼痛感呢。</p><p>作者在第五章有一个爆论“不 ReSkilling 人生将穷途末路”。这个观点和这一章讲的故事让我非常抵触，甚至产生了生理反感。fuck！！！这就是在贩卖焦虑。作者在这一章编写了一个故事的两个结局，不 ReSkilling 的主人公很惨，ReSkilling 的主人公很顺利。😂 这太扯。我看过一些书，也听过一些名人分享，我渐渐地理解了一件事：人生的境遇很大程度上是运气决定的，如果一个人运气不好，那么做什么都会不顺，反之即使不做额外的努力也可以风生水起。当然我不是说努力无用，我只是觉得没有必要贩卖焦虑，没有必要编故事吓人。</p><p>最后，想分享一个我自己的真实的故事，和一些自己真实的想法。我大学毕业后工作的第一家公司叫 DreamArts.co.jp，这家公司的新人培训非常强调一句话：“Be knowledge worker, not skills worker.”因为是非常重要的思想，被刻意训练了3年之久，导致我可能今生会记得。knowledge worker 关注方法论而不是方法，关注整体而不是细节，合理委外而不是十项全能。我的思维模式中 knowledge 大于 skill，但是这本书侧重 skill，和我的思维模式相反，所以即使我认同书中部分内容，整体上还是持反对态度。</p><p>refs:</p><ul><li><a class="tc-tiddlylink-external" href="https://baike.baidu.com/item/%E8%B4%A9%E5%8D%96%E7%84%A6%E8%99%91/57336792" rel="noopener noreferrer" target="_blank">贩卖焦虑</a></li><li><a class="tc-tiddlylink-external" href="https://tomorrowtodayglobal.com/2005/06/26/the-difference-between-knowledge-and-skills-workers/" rel="noopener noreferrer" target="_blank">The difference between knowledge and skills workers</a></li></ul>
          </div>          
      </div>
  </div>
</div>     


]]></description>
      <pubDate>Sun, 13 August 2023 14:48:22 -00:00</pubDate>
			<guid>https://thaddeusjiang.com/2023-08-13-reskilling-du-hou-gan</guid>      
   </item>

</channel>
</rss>
