<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   <title>ThaddeusJiang</title>
   <link>https://thaddeusjiang.com</link>
   <description>Freelance full-stack engineer</description><follow_challenge>
    <feedId>41718658305983488</feedId>
    <userId>41718122139849728</userId>
</follow_challenge>
   <item>
      <title>2025-01-07 refactorex</title>
      <link>https://thaddeusjiang.com/2025-01-07-refactorex</link>
			<description><![CDATA[
<div class="content">
  <p>为 ElixirLang 开发者推荐一款 VS Code 插件 refactorex，它通过扩展 VS Code Refactor 功能，提供了很多 elixir 常用的重构方法。它帮助我减少了很多无聊的键盘敲击，使用单一快捷键就可以实现超多类型的 Refactor，重构工作从枯燥无味变得十分愉悦，提升了我 Coding 的幸福感，希望你也会喜欢。</p><p>分享几个我觉得很爽的 Refactor</p><h2 class="">1. 下划线标注未使用的参数</h2><p><img class=" tc-image-loading" src="https://github.com/gp-pereira/refactorex/raw/main/assets/examples/function/underscore_unused_args.gif?raw=true"></p><p>下划线标注未使用的参数是 elixir 特色，其他语言应该也有类似风格，我不太确定。我知道 JavaScript 社区推荐把未使用的参数删掉，😂</p><h2 class="">2. 短函数</h2><p><img class=" tc-image-loading" src="https://github.com/gp-pereira/refactorex/raw/main/assets/examples/function/collapse_anonymous_function.gif?raw=true"></p><p>类似 <code>&amp;(&amp;1 + &amp;2)</code> 的匿名函数编写方式也是 elixir 特色，可以让代码变得非常简洁，易读。它似乎有另外一个名字叫 <code>Pointfree 风格</code>。</p><p>对比：</p><pre><code># before
items
|&gt; Enum.map(fn item -&gt; 
  item.price * (1- discount_rate)
end)
|&gt; Enum.sum()

# after
items
|&gt; Enum.map(&amp;(&amp;.price * (1- discount_rate)))
|&gt; Enum.sum()</code></pre><p>或许有人会不喜欢短函数，但是无所谓，我很喜欢 😄</p><h2 class="">3. 引入管道 （introduce pipeline）</h2><p><img class=" tc-image-loading" src="https://github.com/gp-pereira/refactorex/raw/main/assets/examples/pipeline/introduce_pipe.gif?raw=true"></p><p>pipeline 也是 elixir 特色。说实话，pipeline 是我喜欢 elixir 的一个非常重要的原因，pipeline 代码写起来非常爽，可以减少函数嵌套，并且可以避免大量临时变量，代码更清晰。</p><p>对比：</p><pre><code># before
Shipping.send_package(Shipping.new_package(items))

# after
items
|&gt; Shipping.new_package()
|&gt; shipping.send_package()</code></pre><h2 class="">小结</h2><p>你可能注意到了，我分享的 Refactor 都是极具 elixir 特色的。但是不用担心，其他编程语言常用的重构方法 refactorex 也提供，如提取函数、内联函数、重命名等等，更多内容请自行阅读 <a class="tc-tiddlylink-external" href="https://github.com/gp-pereira/refactorex" rel="noopener noreferrer" target="_blank">refactorex in GitHub</a></p><p>refs</p><ul><li><a class="tc-tiddlylink-external" href="https://marketplace.visualstudio.com/items?itemName=gp-pereira.refatorex" rel="noopener noreferrer" target="_blank">RefactorEx in VS Code Marketplace</a></li><li><a class="tc-tiddlylink-external" href="https://www.ruanyifeng.com/blog/2017/03/pointfree.html" rel="noopener noreferrer" target="_blank">Pointfree 编程风格指南</a></li></ul>
</div>


<div class="copyright">
<strong>
<a href="https://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">
版权声明：自由转载-非商用-非衍生-保持署名（创意共享3.0许可证）
</a>
</strong>
</div>

<style>
.copyright {
  padding: 0.5rem 1rem;
  text-align: center;
}

.copyright:hover {
  opacity: 0.9;
}
</style>



]]></description>
      <pubDate>Tue, 7 January 2025 7:23:41 -00:00</pubDate>
			<guid>https://thaddeusjiang.com/2025-01-07-refactorex</guid>      
   </item>

   <item>
      <title>2024-11-21 对事不对人</title>
      <link>https://thaddeusjiang.com/2024-11-21-dui-shi-bu-dui-ren</link>
			<description><![CDATA[
<div class="content">
  <p>几年前，我给自己定下一个规矩“不再评价任何人”。从那以后我讨论问题没有再从人出发，而仅仅讨论事情本身。</p><p>简单解释，无论马斯克做人怎么样，他在 SpaceX Tesla 以及其他方面，他都挺优秀的。大家总是攻击他这个人，现在我觉得没有必要了，看他做的事和成果比较客观。</p><p>我不明白为什么大家喜欢攻击人，而不是讨论事情。我想起一个段子“为什么中国人喜欢在辩论中进行人身攻击”，相关文章：
<a class="tc-tiddlylink-external" href="https://www.douban.com/group/topic/262139690/?_i=2179714VEA7LMK" rel="noopener noreferrer" target="_blank">https://www.douban.com/group/topic/262139690/?_i=2179714VEA7LMK</a></p><p>TL;DR</p><p>我们来假设一个问题，如果欧几里得先生被证明是一个精神病患者，那么几何学是否还成立？同样，假设牛顿先生后来被发现是一个罪犯，他的第一宇宙定律是否还成立？
中国人认为如果一个人被证明品质不好，那么他的理论和观点自然就是没有价值的。
那么＂把人搞臭＂就会永远成为中国人不得不选择的“证伪工具”。</p><p>为什么我想写这段文字？</p><ol><li>看到“何同学涉嫌抄袭”事件中 X.com 上网友表现</li><li>看到《再见爱人》在华语圈引发的讨论</li></ol><p>引用一位网友的话：“抓住一个机会就要把一个人彻底打倒，当代红卫兵开赛博批斗大会。” <a class="tc-tiddlylink-external" href="https://x.com/safaricheung/status/1858871535819427877" rel="noopener noreferrer" target="_blank">https://x.com/safaricheung/status/1858871535819427877</a></p><p>refs:</p><ul><li><a class="tc-tiddlylink-external" href="https://github.com/vietnh1009/ASCII-generator/issues/25" rel="noopener noreferrer" target="_blank">https://github.com/vietnh1009/ASCII-generator/issues/25</a></li></ul>
</div>


<div class="copyright">
<strong>
<a href="https://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">
版权声明：自由转载-非商用-非衍生-保持署名（创意共享3.0许可证）
</a>
</strong>
</div>

<style>
.copyright {
  padding: 0.5rem 1rem;
  text-align: center;
}

.copyright:hover {
  opacity: 0.9;
}
</style>



]]></description>
      <pubDate>Thu, 21 November 2024 9:18:23 -00:00</pubDate>
			<guid>https://thaddeusjiang.com/2024-11-21-dui-shi-bu-dui-ren</guid>      
   </item>

   <item>
      <title>2024-10-30 可以控制的力量才属于你</title>
      <link>https://thaddeusjiang.com/2024-10-30-ke-yi-kong-zhi-de-li-liang-cai-shu-yu-ni</link>
			<description><![CDATA[
<div class="content">
  <p>虽然现在有很多很强大的 AI，但是很多都是被大公司或者少数人控制的，你必须在他们的限制下使用 AI 的力量。虽然大部分 AI 的所有者没有对你提出过分的要求，但是它们的确阉割了很多你原本可以使用的力量。</p><p>例如：你无法请 ChatGPT 描述下面这张 Rihanna 的写真</p><p><img class=" tc-image-loading" height="300px" src="https://i.gyazo.com/c4a65c8afbc926a270d2f2ca341e6a5d.png"></p><p>在 AI SaaS 时代，AI SaaS 提供商就是道德警察，你必须像生活在极端伊斯兰教统治的国家里一样使用 AI，不能涉及一丁点成人内容，即使你不是为了成人内容，只要有一点点相关也不行。</p><p>所以，self own AI 是必要的，运行你自己的 AI，掌控你自己的 AI，不要让 AI Providers 阉割你原本可以使用的力量。</p>
</div>


<div class="copyright">
<strong>
<a href="https://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">
版权声明：自由转载-非商用-非衍生-保持署名（创意共享3.0许可证）
</a>
</strong>
</div>

<style>
.copyright {
  padding: 0.5rem 1rem;
  text-align: center;
}

.copyright:hover {
  opacity: 0.9;
}
</style>



]]></description>
      <pubDate>Wed, 30 October 2024 6:10:22 -00:00</pubDate>
			<guid>https://thaddeusjiang.com/2024-10-30-ke-yi-kong-zhi-de-li-liang-cai-shu-yu-ni</guid>      
   </item>

</channel>
</rss>
