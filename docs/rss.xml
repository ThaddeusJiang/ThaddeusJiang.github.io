<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   <title>蒋继发 (ThaddeusJiang)</title>
   <link>https://thaddeusjiang.com</link>
   <description>在日本做 SaaS，爱猫、爱读书、爱自由</description>
   <item>
      <title>2022-11-21 我很少使用 Enum</title>
      <link>https://thaddeusjiang.com/2022-11-21-wo-hen-shao-shi-yong-enum</link>
			<description><![CDATA[
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本做 SaaS，爱猫、爱读书、爱自由</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2022-11-21 我很少使用 Enum</h1>
            <hr>

            <p>一个很重要的原因就是“命名真的太难了”。</p><p>很多开发者喜欢用 Enum 类型存储状态数据，但是我很少使用 Enum，主要是因为起名太难了。</p><h1 class="">实际的例子（日本语）：</h1><p>这是我在开发的一个【工资计算系统】的计算方法的类型，写出这些方法的英文对于我来说真的很吃力，我还是喜欢用数字表示。</p><p><img class=" tc-image-loading" src="https://i.gyazo.com/41dea8025f3fc17fc71a2dc681d2b885.png"></p><p>如果你觉得上面例子还好，我们换几个例子：</p><p>【工作时间计算系统】的单位:</p><p><img class=" tc-image-loading" src="https://i.gyazo.com/afd6b0527004f0961517546d5e252eff.png"></p><p>【工资计算系统】的工作时间和工作天数，不多，也就三四十项吧。</p><p><img class=" tc-image-loading" src="https://i.gyazo.com/451e406f4bd33cb2ba99b334437688fa.gif"></p><p>大家能理解我为什么很少使用 Enum 了吗？😂😂😂</p><p>顺便一提，我真的没有遇到过必须使用 Enum 才能解决的技术问题。</p>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Mon, 21 November 2022 18:51:26 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2022-11-21-wo-hen-shao-shi-yong-enum</guid>      
   </item>

   <item>
      <title>2022-11-15 monorepo vs. multi-repo</title>
      <link>https://thaddeusjiang.com/2022-11-15-monorepo-vs-multi-repo</link>
			<description><![CDATA[
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本做 SaaS，爱猫、爱读书、爱自由</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2022-11-15 monorepo vs. multi-repo</h1>
            <hr>

            <p>最近被讨论 monorepo 讨论的有点烦了。分享一下我对于 monorepo 的理解</p><blockquote class="tc-quote tc-big-quote"><p>事实上 monorepo 是在鼓励自治，而不是统一规范。</p><ul><li>小公司应该用 monorepo</li><li>大公司应该用 multi-repo，或者拆分成多个小公司</li><li>超大规模公司应该拆分成多个大公司。</li></ul><cite>TJ</cite></blockquote><p>在 SmartCompany 开发代码，我使用 multi-repo；开发 OSS 我使用 monorepo。</p><p>为什么我不使用 monorepo 管理 micro-frontends？</p><ul><li>因为我想让 micro-frontends 的 sub-apps 可以像 library 一样被复用，让它们跨产品被使用。</li><li>使用 monorepo 管理 sub-apps，会导致大家误会 sub-apps 属于某个产品，导致其无法被复用。</li><li>使用 monorepo，如果我开个新的项目，难道不要把所有的代码都复制一份吗？</li></ul><h1 class="">追加说明</h1><ul><li>我希望共同的业务代码可以跨项目复用，不属于某个项目</li><li>我希望每个 micro-frontends 可以<ul><li>独立 test</li><li>独立 build</li><li>独立 deploy</li></ul></li><li>整体部署只是 copy file，没有 build 过程， build time 是常量，而不是 n * frontends</li><li>我希望每个 micro-frontends 有独立的 version (git commit hash)</li><li>我希望部署 <ul><li>✅ micro-frontends<ul><li>(共同功能)micro-auth-app</li><li>(共同功能)micro-account-app</li><li>(共同功能)micro-datasheet-app</li><li>(共同功能)micro-sso-app</li><li>talent-app</li><li>romu-app</li><li>kintai-app</li></ul></li><li>❌ frontends<ul><li>talent-app</li><li>romu-app</li><li>kintai-app</li></ul></li></ul></li></ul><p>如果不推荐 monorepo，但是过度分散的 repos 导致大家有抵触情绪，该怎么办？</p><p>可以试试 <a class="tc-tiddlylink-external" href="https://www.atlassian.com/git/tutorials/git-subtree" rel="noopener noreferrer" target="_blank">git subtree</a>，只需要写好 local repo 的 README 即可使用。比 git submodule 好用。
</p>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Tue, 15 November 2022 15:11:19 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2022-11-15-monorepo-vs-multi-repo</guid>      
   </item>

   <item>
      <title>2022-11-14 product components vs. common components</title>
      <link>https://thaddeusjiang.com/2022-11-14-product-components-vs-common-components</link>
			<description><![CDATA[
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本做 SaaS，爱猫、爱读书、爱自由</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2022-11-14 product components vs. common components</h1>
            <hr>

            <p>做前端开发的，没有人不曾想过开发一套自己的 components library 让大家使用。</p><p>我刚开始做 frontend 时也做过类似的事情，不过我的代码只是在内部被使用，并没有在公共区域被使用。为什么呢？</p><p>首先，开发业务产品和开发通用组件库的思维是完全不一样的。</p><ul><li>开发业务产品：要统一性，要限制自由发挥。</li><li>开发通用组件库：要通用性，要支持自由发挥。</li></ul><p>因为思维方式的不同，所采用的 API 也就不同。</p><ul><li>开发业务产品：尽量少的 props，内嵌 styles。</li><li>开发通用组件库：尽量多的 props，外部定义 styles。</li></ul><h2 class="">想要业务产品组件库</h2><ul><li>不要执着自由度，大胆内嵌 styles，不需要公开的 API 就不公开。</li></ul><h2 class="">想要通用组件库</h2><ul><li>追求绝对的自由度，不要基于 Headful UI Framework 二次开发。</li></ul><p>如果你的公司有信心和实力维护一套自己的通用组件库，你可以在一些 Headless UI Framework 上进行二次开发，例如：Radix UI和 Headless UI。
基于 Headful UI Framework 进行二次开发也不是不行，但是 UI framework 如果没有提供全面覆盖 styles 的方法，你就惨了。没错，我说的就是 MUI、Ant Design 等等。
千万不要太高估 Custom Theme 技术，Custom 能力绝对是有限的，Headful UI Framework 内嵌的 styles 是你永远绕不过的坑。</p><p>refs</p><ul><li><a class="tc-tiddlylink-external" href="https://www.radix-ui.com/" rel="noopener noreferrer" target="_blank">https://www.radix-ui.com/</a></li><li><a class="tc-tiddlylink-external" href="https://headlessui.com/" rel="noopener noreferrer" target="_blank">https://headlessui.com/</a></li></ul>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Mon, 14 November 2022 12:19:32 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2022-11-14-product-components-vs-common-components</guid>      
   </item>

</channel>
</rss>
