<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   <title>蒋继发 (ThaddeusJiang)</title>
   <link>https://thaddeusjiang.com</link>
   <description>在日本开发 SaaS 产品，爱猫、爱读书、爱大海</description>
   <item>
      <title>2022-04-27 Scenario-Focused Engineering 读后感</title>
      <link>https://thaddeusjiang.com/2022-04-27-scenario-focused-engineering–du-hou-gan</link>
			<description><![CDATA[
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2022-04-27 Scenario-Focused Engineering 读后感</h1>
            <hr>

            <p>先说结论，这本书写的十分冗长，内容也虎头蛇尾，读这本书真的累得半死。虽然整体感受不佳，但是还是有一点点小收获的，勉强及格吧。</p><p>因为我要转行做产品经理，一位创业的朋友给我推荐了《Scenario-Focused Engineering》。
朋友曾经在微软工作过，这本书是微软内部出版的书籍，暂时没找到中文版。</p><p>我和同事吃午饭闲聊时，分享了一下这本书的内容，以下是我们的对话摘要：</p><blockquote><div>J 是我，Z 是我同事。</div></blockquote><p>J: “上次那个谁分享的《Scenario-Focused Engineering》，我看了。还不错，你读了吗？”</p><p>Z: “没有，那本书除了书名以外，还有其他内容吗？”</p><p>J: “没有。不过就像《极简主义》和《It Doesn't Have To Be Crazy At Work》一样，书名虽然已经概括了整本书的核心，但是书中还是有很多细节不读一下是理解不了的。”</p><p>J: “作者蛮擅长讲故事的，有几个小故事我记得挺清楚的，我给你讲讲。”</p><h2 class="">第一个小故事讲的是 End-to-End User Experiences</h2><p>J: “故事的大概是：作者在上班的路上心情特别好，因为他买了一辆小汽车，他迫不及待地想和同事分享。
为什么他想和同事分享他的小汽车呢？
说来话长，作者一家人前一段时间去了欧洲旅行，在欧洲没有美国那种油老虎的汽车，只能租到小汽车，刚开始作者还有点担心小汽车能不能容纳一家人，不过在欧洲的旅行时开的小汽车体验非常好，让作者爱上了小汽车。
作者回到美国以后，就像买一个在欧洲旅行时开的那种小汽车，但是作者发现在美国那种小汽车比较少，作者又花了一些精力终于买到了心心念念的小汽车。”</p><p>J: “所以，你觉得作者仅仅是因为买了汽车就心情愉悦，迫不及待地想和同事分享吗？
不是的，是作者在旅行中体验过小汽车的美好，又在美国买到了比较稀有的小汽车，这个完整的过程才让作者心情愉悦，迫不及待的想和同事分享。”</p><p>J: “通过作者的小故事，作者想表达的是用户体验不单单是功能的堆砌，不是简单的性能的对比，用户体验是一个完整的过程。作者推荐通过 End-to-End Experiences 让用户心情愉悦，并想要和朋友分享你的产品。”</p><p>原文：</p><blockquote class="tc-quote tc-big-quote"><p>Can you build something your customers will truly love, so much so that the would go out of their way to recommend it to a friend?
</p><cite>《Scenario-Focused Engineering》</cite></blockquote><h2 class="">第二个小故事我也不知道作者想讲什么，不过我现在还记忆犹新</h2><p>故事是曾经 Nintendo 有一款体重秤风靡美国。
作为一款体重秤，Nintendo 的体重秤采用纯白的配色，一反常态的左右脚分离设计，的确是与众不同。
<img class=" tc-image-loading" src="https://i.gyazo.com/b80f9ace9dfa5c7f98d1242bc9229d2d.jpg"></p><p>所以，你觉得 Nintendo 的体重秤是因为这些外形的特立独行而风靡美国吗？
不是的，是因为这款体重秤可以链接 Nintendo 的游戏机打游戏，😂</p><p><img class=" tc-image-loading" src="https://i.gyazo.com/8b1845345f9fa2951d93332eed95e631.jpg"></p><p>原文：</p><blockquote class="tc-quote tc-big-quote"><p>Customters want their problems solved, from their point of view, as seamless end-to-end experiences.
</p><cite>《Scenario-Focused Engineering》</cite></blockquote><p>最后，我并不推荐这本书，因为从客观角度，它只能算及格。但是我分享一句我喜欢的日本语：“読んだ損する本がいない”。</p>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Wed, 27 April 2022 23:58:41 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2022-04-27-scenario-focused-engineering–du-hou-gan</guid>      
   </item>

   <item>
      <title>2022-03-27 读《俞军产品方法论》</title>
      <link>https://thaddeusjiang.com/2022-03-27–du–yu-jun-chan-pin-fang-fa-lun-</link>
			<description><![CDATA[
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2022-03-27 读《俞军产品方法论》</h1>
            <hr>

            <p>因为想认真做产品经理，我找到了这本书，非常感谢这本书，让我对产品经理有了一点初步的认识。</p><p>其实我曾经是一名开发者（现在依然是），由于没有遇到过特别令人信服的产品经理，我一直对产品经理这个职位有一种不太友好的认识。不过这本书让我有了一定改观，感谢俞军。</p><blockquote class="tc-quote tc-big-quote"><p>产品经理就是以产品为笔，与世界对话。
</p><cite>俞军</cite></blockquote><p>我太喜欢这句话了，有理想，有境界。</p><p>我是一个“好读书，不求甚解”的人，所以我不喜欢整理脑图。这本书很不错，我从个人角度分享一下。</p><p>本书中很多实际的案例非常有代表性，而且分析的很透彻，让我豁然开朗。
例如，书中提到海底捞是如何理解用户的，“海底捞认为翻台率高利润就大，所以他们宁愿以低价让用户保持排队状态”。原来如此，原来海底捞需要排队是有意而为之啊，我以前一直疑问为什么海底捞不改善排队等待的问题，原来这是为了保证最高的翻台率啊。果然隔行如隔山，我还是太小看海底捞了。</p><p>本书第二个让我会心一笑的点：</p><blockquote class="tc-quote tc-big-quote"><p>产品经理要理解各利益方的价值判断和行为习惯，把所有产品看作交易。
</p><cite>俞军</cite></blockquote><p>原来产品经理的工作和开发竟然有共通点，“把所有产品都可以看作是交易”这句话和业务建模中“所有数据都可以看作交易凭证”简直就是一句话的两种不同表达。这句话是徐昊的《业务建模》中提到的，在学习徐昊的课程时我也不能完全理解，依然记得自己在课程评论区讨论这个问题。真没想到读了一本讲产品的书，让我更加理解软件开发的逻辑了。nice</p><p>本书让我会心一笑的第三点：随着互联网浪潮过去，产品经理的工作似乎又回到最初的样子。
前几天听了一期《三五环》，flomo 的少楠老师在节目中说：“现在市场上的笔记应用从功能上已经无法拉开差距了，功能多功能强大不再是获得用户重点，品牌认知才是，产品要有 story。”
哟，好巧啊。
宝洁最初产生产品经理的原因也是因为香皂的产品质量无法拉开差距，香皂的生产技术也无法拉开差距。
看来产品经理的工作似乎回到了最初的样子。</p><p>哈哈哈，看来现在转产品对于我来说是一个不错的时机。我太喜欢那些返璞归真的东西了，相信从我的 blog 使用的技术你也能看出来。</p><p>最后，我想客观的评价一下这本书，就像曾经在豆瓣上做的事情一样。</p><p>我给这本书 4 星（★★★★☆），首先书中干货很多，对于一个想要成为产品经理的人来说，是一本十分推荐的书籍。
其次这本书的编辑也很厉害，开篇 3 篇高质量的推荐序，第一章和第二章直接点题详细讨论俞军产品方法论，正文结束后又直接通过附录的形式展示作者曾经公开发表的内容，实现首尾呼应。
不过，老实说第三章和第四章真的挺枯燥的，有点堆砌概念强行凑字数的感觉，我完全没看下去。😂</p><p>refs:</p><ul><li><a class="tc-tiddlylink-external" href="https://podcasts.apple.com/jp/podcast/%E4%B8%89%E4%BA%94%E7%8E%AF/id1475113228?i=1000544207187" rel="noopener noreferrer" target="_blank">No.54 跟少楠聊聊做 flomo 的新体会，以及什么是 indie</a></li><li><a class="tc-tiddlylink tc-tiddlylink-resolves" href="./#2022-03-10--ji-hua-zhuan-xing-zuo--chan-pin-jing-li--liao">2022-03-10 计划转行做【产品经理】了</a></li></ul>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Sun, 27 March 2022 22:12: +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2022-03-27–du–yu-jun-chan-pin-fang-fa-lun-</guid>      
   </item>

   <item>
      <title>2022-03-14 DevOps 三级进化</title>
      <link>https://thaddeusjiang.com/2022-03-14-devops–san-ji-jin-hua</link>
			<description><![CDATA[
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2022-03-14 DevOps 三级进化</h1>
            <hr>

            <p>从结果来看，这是一个十分简单的小项目，能做的只是通过 UI 创建和维护 Azure Cloud 资源。
但是从过程来看，这是一次标准的渐进式开发，是我最擅长的领域。</p><p>并且项目没有开源，有点空口无凭的感觉。
但是因为和几个朋友分享过，朋友们夸我做的不错，于是我决定还是分享出来吧。</p><p>TL;DR</p><ul><li>Staging 1: Manual in Azure Portal<ul><li>有熟练使用 Azure Portal 的技术者可以使用，且需要几个小时。</li></ul></li><li>Staging 2: Command Line instead of Manual<ul><li>会使用 Command Line 的技术者都可以使用，只需要几分钟。</li></ul></li><li>Staging 3: UI instead of Command Line<ul><li>任何人都可以使用，异步处理，一分钟以内完成。</li></ul></li></ul><h2 class="">Staging 1: Manual in Azure Portal</h2><blockquote><div>只有熟练使用 Azure Portal 的技术者可以使用，且需要几个小时。</div></blockquote><p>SmartCompany 是一个前后端分离的项目，backend 使用 Javalin 提供 REST API，frontend 使用 React 提供 SPA，然后将两者通过 docker-compose 整合在一起，部署在 Azure。</p><p>先说一下，我刚刚加入项目的时候，是怎么创建和维护 Azure Cloud 资源的吧。</p><p>我们有一个 README 文件，里面记录了：</p><ul><li>如何将 docker-compose 发布到 Azure App Service。</li><li>如何创建 Azure CosmosDB。</li><li>如何创建 Azure Storage</li><li>如何创建 DNS。</li><li>如何将它们整合到一起。</li></ul><p>如果你需要创建一个环境，就可以一边看着 README，一边打开 Azure Portal UI 操作了。</p><p><img class=" tc-image-loading" src="https://user-images.githubusercontent.com/17308201/158159797-397d909a-c3f1-48d4-90c4-602017506876.png"></p><h2 class="">Staging 2: Command Line instead of Manual</h2><blockquote><div>会使用 Command Line 的技术者都可以使用，只需要几分钟。</div></blockquote><p>因为团队中几乎所有工程师都专注于 Backend 或者 Frontend，我加入了后，DevOps 就由我顺便承担了。
而且我太笨了，我几乎无法通过 README 成功启动一个复杂的项目。（我从大学就发现自己这方面的问题了， Network 课程的实操课全是😭）</p><p>由于我的动手能力真的太差了，我一直是 Command Line 的忠实用户。
于是我创建了一个 terraform 文件，大致如：<a class="tc-tiddlylink-external" href="https://gist.github.com/ThaddeusJiang/2473709158c4b3f57455fdd920c31304" rel="noopener noreferrer" target="_blank">https://gist.github.com/ThaddeusJiang/2473709158c4b3f57455fdd920c31304</a></p><p>从此之后，我创建环境基本上只需要：</p><pre><code>$ terraform plan
$ terraform apply </code></pre><p>不过，很遗憾这个阶段，还是只有我一个人使用这个项目。
后来我将这个项目交接给其他小伙伴，现在已经有 48 Commits 了。nice 👍</p><h2 class="">Staging 3: UI instead of Command Line</h2><blockquote><div>任何人都可以使用，异步处理，一分钟以内完成。</div></blockquote><p>我们做一个 SaaS 产品，SaaS 产品的标配就是注册即用。由于我们是 ToB SaaS，每个潜在客户都需要有专门的 Sales 和 Support 支持。
为了更好地符合这种业务流程。我们有一个特殊的要求：“那就是 Sales 和 Support 同事可以创建，更新，停用客户的环境（or Account）”。</p><p>因为 Sales 和 Support 并不是技术者，让他们使用 Command Line 太过于强人所难了。
所以我创建了一个 Web App，目的是“提供简单易用的 UI 创建和维护环境，不需要使用命令行”。</p><p>从技术角度，这个 Web App 有什么？</p><ol><li>Azure Functions: 创建 Serverless App 并提供 REST API。</li><li>Next.js: 创建 SPA 提供 UI。</li><li>GitHub Actions: CICD for API。</li><li>Vercel: CICD for UI，并通过 Vercel Functions 提供 Auth 认证。</li><li>Terraform: 创建 mojito-admin 所需要 Infrastructure。</li></ol><p>我会尽快开源代码的，<a class="tc-tiddlylink-external" href="https://github.com/ThaddeusJiang/mojito-admin" rel="noopener noreferrer" target="_blank">https://github.com/ThaddeusJiang/mojito-admin</a></p><h2 class="">最后</h2><p>DevOps 工作不仅仅是创建 DB 和 App，还包括 monitoring，backup/restore 等等，
本着自动化一切的基本原则，我计划将剩余的 DevOps works 也都整合到 mojito-admin。</p><p>由于我个人能力和精力有限，并且项目更需要我做一些 <strong>业务梳理</strong>和<strong>功能设计</strong>的工作，我实在是分身乏术。
非常欢迎对我提到的这些工作感兴趣的朋友加入我们团队，关于我们团队的一些信息，请查看我的 Tweets 如果想进一步欢迎邮件联系我。
</p>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Mon, 14 March 2022 20:44:12 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2022-03-14-devops–san-ji-jin-hua</guid>      
   </item>

</channel>
</rss>
